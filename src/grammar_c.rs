/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
use rustemo::{
    Result, Input as InputT, Lexer, Token, TokenRecognizer as TokenRecognizerT, Parser,
    ParserDefinition, State as StateT, Builder,
};
use regex::Regex;
use once_cell::sync::Lazy;
use rustemo::StringLexer;
use rustemo::LRBuilder;
use super::grammar_c_actions;
use rustemo::{GlrParser, Forest, GssHead};
use rustemo::Action::{self, Shift, Reduce, Accept};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use colored::*;
pub type Input = str;
const STATE_COUNT: usize = 379usize;
const MAX_RECOGNIZERS: usize = 63usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 86usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    Ampersand,
    Caret,
    Colon,
    Comma,
    Dash,
    Dot,
    Equal,
    Exclaim,
    LeftBracket,
    LeftCurlyBracket,
    LeftParen,
    LeftSquareBracket,
    Percent,
    Plus,
    Question,
    RightBracket,
    RightCurlyBracket,
    RightParen,
    RightSquareBracket,
    Semicolon,
    Sizeof,
    Slash,
    Star,
    Tilde,
    VerticalBar,
    AmpersandEqual,
    CaretEqual,
    DashEqual,
    DashRightBracket,
    DoubleAmpersand,
    DoubleEqual,
    DoubleLeft,
    DoubleDash,
    DoublePlus,
    DoubleRight,
    DoubleVerticalBar,
    ExclaimEqual,
    LeftBracketEqual,
    PercentEqual,
    PlusEqual,
    RightBracketEqual,
    SlashEqual,
    StarEqual,
    VerticalBarEqual,
    Ellipsis,
    DoubleLeftEqual,
    DoubleRightEqual,
    Auto,
    Break,
    Case,
    Char,
    Const,
    Continue,
    Default,
    Do,
    Double,
    Else,
    Enum,
    Extern,
    Float,
    For,
    Goto,
    If,
    Inline,
    Int,
    Long,
    Register,
    Restrict,
    Return,
    Short,
    Signed,
    Static,
    Struct,
    Switch,
    Typedef,
    UnderscoreBool,
    UnderscoreComplex,
    Union,
    Unsigned,
    Void,
    Volatile,
    While,
    Num,
    Identifier,
    StringLiteral,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    TranslationUnitP1,
    TranslationUnitP2,
    ExternalDeclarationP1,
    ExternalDeclarationP2,
    FunctionDefinitionP1,
    DeclarationSpecifier1P1,
    DeclarationSpecifier1P2,
    Declaration1P1,
    Declaration1P2,
    Declaration0P1,
    Declaration0P2,
    DeclarationSpecifierP1,
    DeclarationSpecifierP2,
    DeclarationSpecifierP3,
    DeclarationSpecifierP4,
    StorageClassSpecifierP1,
    StorageClassSpecifierP2,
    StorageClassSpecifierP3,
    StorageClassSpecifierP4,
    StorageClassSpecifierP5,
    TypeSpecifierP1,
    TypeSpecifierP2,
    TypeSpecifierP3,
    TypeSpecifierP4,
    TypeSpecifierP5,
    TypeSpecifierP6,
    TypeSpecifierP7,
    TypeSpecifierP8,
    TypeSpecifierP9,
    TypeSpecifierP10,
    TypeSpecifierP11,
    TypeSpecifierP12,
    TypeSpecifierP13,
    TypeSpecifierP14,
    StructOrUnionSpecifierP1,
    IdentifierOptP1,
    IdentifierOptP2,
    StructDeclaration1P1,
    StructDeclaration1P2,
    StructOrUnionSpecifierP2,
    StructOrUnionP1,
    StructOrUnionP2,
    StructDeclarationP1,
    SpecifierQualifierKind1P1,
    SpecifierQualifierKind1P2,
    SpecifierQualifierKindP1,
    SpecifierQualifierKindP2,
    TypeQualifierP1,
    TypeQualifierP2,
    TypeQualifierP3,
    StructDeclaratorListP1,
    StructDeclaratorListP2,
    StructDeclaratorP1,
    StructDeclaratorP2,
    DeclaratorOptP1,
    DeclaratorOptP2,
    DeclaratorP1,
    PointerOptP1,
    PointerOptP2,
    PointerP1,
    TypeQualifier1P1,
    TypeQualifier1P2,
    TypeQualifier0P1,
    TypeQualifier0P2,
    PointerP2,
    DirectDeclaratorP1,
    DirectDeclaratorP2,
    DirectDeclaratorP3,
    AssignmentExpressionOptP1,
    AssignmentExpressionOptP2,
    DirectDeclaratorP4,
    DirectDeclaratorP5,
    DirectDeclaratorP6,
    DirectDeclaratorP7,
    DirectDeclaratorP8,
    IdentifierListOptP1,
    IdentifierListOptP2,
    ExpressionCommaExpression,
    ExpressionP2,
    AssignmentOperatorsP1,
    AssignmentOperatorsP2,
    AssignmentOperatorsP3,
    AssignmentOperatorsP4,
    AssignmentOperatorsP5,
    AssignmentOperatorsP6,
    AssignmentOperatorsP7,
    AssignmentOperatorsP8,
    AssignmentOperatorsP9,
    AssignmentOperatorsP10,
    AssignmentOperatorsP11,
    AssignmentExpressionP1,
    AssignmentExpressionP2,
    ConditionalExpressionP1,
    ConditionalExpressionP2,
    ArithmeticExpressionP1,
    ArithmeticExpressionLogicalOrExpression,
    ArithmeticExpressionLogicalAndExpression,
    ArithmeticExpressionBitwiseOrExpression,
    ArithmeticExpressionBitwiseExclusiveOrExpression,
    ArithmeticExpressionBitwiseAndExpression,
    ArithmeticExpressionLogicalEqualExpression,
    ArithmeticExpressionLogicalNotEqualExpression,
    ArithmeticExpressionLessThanExpression,
    ArithmeticExpressionLessThanOrEqualExpression,
    ArithmeticExpressionGreaterThanExpression,
    ArithmeticExpressionGreaterThanOrEqualExpression,
    ArithmeticExpressionBitwiseLeftShiftExpression,
    ArithmeticExpressionBitwiseRightShiftExpression,
    ArithmeticExpressionAdditionExpression,
    ArithmeticExpressionSubtractionExpression,
    ArithmeticExpressionMultiplyExpression,
    ArithmeticExpressionDivisionExpression,
    ArithmeticExpressionModuloExpression,
    TypeCastP1,
    UnaryExpressionP1,
    UnaryExpressionPreIncrementExpression,
    UnaryExpressionPreDecrementExpression,
    UnaryExpressionLogicalNotExpression,
    TypeCastOptP1,
    TypeCastOptP2,
    UnaryExpressionBitwiseNotExpression,
    UnaryExpressionPlusExpression,
    UnaryExpressionMinusExpression,
    UnaryExpressionDereferenceExpression,
    UnaryExpressionReferenceExpression,
    UnaryExpressionSizeOfExpressionExpression,
    UnaryExpressionSizeOfTypenameExpression,
    UnaryExpressionArrayAccessExpression,
    UnaryExpressionFunctionCallExpression,
    ArgumentExpressionListOptP1,
    ArgumentExpressionListOptP2,
    UnaryExpressionAccessExpression,
    UnaryExpressionPointerAccessExpression,
    UnaryExpressionPostIncrementExpression,
    UnaryExpressionPostDecrementExpression,
    UnaryExpressionCompoundLiteralExpression,
    CommaOptP1,
    CommaOptP2,
    PrimaryExpressionNumber,
    PrimaryExpressionIdentifier,
    PrimaryExpressionStringLiteral,
    PrimaryExpressionParen,
    ArgumentExpressionListP1,
    ArgumentExpressionListP2,
    TypeNameP1,
    AbstractDeclaratorOptP1,
    AbstractDeclaratorOptP2,
    AbstractDeclaratorP1,
    AbstractDeclaratorP2,
    DirectAbstractDeclaratorP1,
    DirectAbstractDeclaratorP2,
    DirectAbstractDeclaratorOptP1,
    DirectAbstractDeclaratorOptP2,
    DirectAbstractDeclaratorP3,
    DirectAbstractDeclaratorP4,
    DirectAbstractDeclaratorP5,
    DirectAbstractDeclaratorP6,
    ParameterTypeListOptP1,
    ParameterTypeListOptP2,
    ParameterTypeListP1,
    ParameterTypeListP2,
    ParameterListP1,
    ParameterListP2,
    ParameterDeclarationKindP1,
    ParameterDeclarationKindP2,
    ParameterDeclarationP1,
    InitializerListP1,
    DesignationOptP1,
    DesignationOptP2,
    InitializerListP2,
    DesignationP1,
    Designator1P1,
    Designator1P2,
    DesignatorP1,
    DesignatorP2,
    ConstantExpressionP1,
    InitializerP1,
    InitializerP2,
    IdentifierListP1,
    IdentifierListP2,
    EnumSpecifierP1,
    EnumSpecifierP2,
    EnumeratorListP1,
    EnumeratorListP2,
    EnumeratorP1,
    EnumeratorP2,
    EnumerationConstantP1,
    TypedefNameP1,
    FunctionSpecifierP1,
    DeclarationP1,
    InitDeclaratorListOptP1,
    InitDeclaratorListOptP2,
    InitDeclaratorListP1,
    InitDeclaratorListP2,
    InitDeclaratorP1,
    InitDeclaratorP2,
    CompoundStatementP1,
    BlockItem1P1,
    BlockItem1P2,
    BlockItem0P1,
    BlockItem0P2,
    BlockItemP1,
    BlockItemP2,
    StatementLabelStatement,
    StatementCaseClause,
    StatementDefaultClause,
    StatementP4,
    StatementExpressionStatement,
    ExpressionOptP1,
    ExpressionOptP2,
    StatementIfStatement,
    StatementIfElseStatement,
    StatementSwitchStatement,
    StatementWhileStatement,
    StatementDoWhileStatement,
    StatementForStatement,
    StatementGotoStatement,
    StatementContinueStatement,
    StatementBreakStatement,
    StatementReturnStatement,
    ForInitClauseNone,
    ForInitClauseForInitWithExpression,
    ForInitClauseForInitWithDeclaration,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::TranslationUnitP1 => "TranslationUnit: ExternalDeclaration",
            ProdKind::TranslationUnitP2 => {
                "TranslationUnit: TranslationUnit ExternalDeclaration"
            }
            ProdKind::ExternalDeclarationP1 => "ExternalDeclaration: FunctionDefinition",
            ProdKind::ExternalDeclarationP2 => "ExternalDeclaration: Declaration",
            ProdKind::FunctionDefinitionP1 => {
                "FunctionDefinition: DeclarationSpecifier1 Declarator Declaration0 CompoundStatement"
            }
            ProdKind::DeclarationSpecifier1P1 => {
                "DeclarationSpecifier1: DeclarationSpecifier1 DeclarationSpecifier"
            }
            ProdKind::DeclarationSpecifier1P2 => {
                "DeclarationSpecifier1: DeclarationSpecifier"
            }
            ProdKind::Declaration1P1 => "Declaration1: Declaration1 Declaration",
            ProdKind::Declaration1P2 => "Declaration1: Declaration",
            ProdKind::Declaration0P1 => "Declaration0: Declaration1",
            ProdKind::Declaration0P2 => "Declaration0: ",
            ProdKind::DeclarationSpecifierP1 => {
                "DeclarationSpecifier: StorageClassSpecifier"
            }
            ProdKind::DeclarationSpecifierP2 => "DeclarationSpecifier: TypeSpecifier",
            ProdKind::DeclarationSpecifierP3 => "DeclarationSpecifier: TypeQualifier",
            ProdKind::DeclarationSpecifierP4 => "DeclarationSpecifier: FunctionSpecifier",
            ProdKind::StorageClassSpecifierP1 => "StorageClassSpecifier: Typedef",
            ProdKind::StorageClassSpecifierP2 => "StorageClassSpecifier: Extern",
            ProdKind::StorageClassSpecifierP3 => "StorageClassSpecifier: Static",
            ProdKind::StorageClassSpecifierP4 => "StorageClassSpecifier: Auto",
            ProdKind::StorageClassSpecifierP5 => "StorageClassSpecifier: Register",
            ProdKind::TypeSpecifierP1 => "TypeSpecifier: Void",
            ProdKind::TypeSpecifierP2 => "TypeSpecifier: Char",
            ProdKind::TypeSpecifierP3 => "TypeSpecifier: Short",
            ProdKind::TypeSpecifierP4 => "TypeSpecifier: Int",
            ProdKind::TypeSpecifierP5 => "TypeSpecifier: Long",
            ProdKind::TypeSpecifierP6 => "TypeSpecifier: Float",
            ProdKind::TypeSpecifierP7 => "TypeSpecifier: Double",
            ProdKind::TypeSpecifierP8 => "TypeSpecifier: Signed",
            ProdKind::TypeSpecifierP9 => "TypeSpecifier: Unsigned",
            ProdKind::TypeSpecifierP10 => "TypeSpecifier: UnderscoreBool",
            ProdKind::TypeSpecifierP11 => "TypeSpecifier: UnderscoreComplex",
            ProdKind::TypeSpecifierP12 => "TypeSpecifier: StructOrUnionSpecifier",
            ProdKind::TypeSpecifierP13 => "TypeSpecifier: EnumSpecifier",
            ProdKind::TypeSpecifierP14 => "TypeSpecifier: TypedefName",
            ProdKind::StructOrUnionSpecifierP1 => {
                "StructOrUnionSpecifier: StructOrUnion IdentifierOpt LeftCurlyBracket StructDeclaration1 RightCurlyBracket"
            }
            ProdKind::IdentifierOptP1 => "IdentifierOpt: Identifier",
            ProdKind::IdentifierOptP2 => "IdentifierOpt: ",
            ProdKind::StructDeclaration1P1 => {
                "StructDeclaration1: StructDeclaration1 StructDeclaration"
            }
            ProdKind::StructDeclaration1P2 => "StructDeclaration1: StructDeclaration",
            ProdKind::StructOrUnionSpecifierP2 => {
                "StructOrUnionSpecifier: StructOrUnion Identifier"
            }
            ProdKind::StructOrUnionP1 => "StructOrUnion: Struct",
            ProdKind::StructOrUnionP2 => "StructOrUnion: Union",
            ProdKind::StructDeclarationP1 => {
                "StructDeclaration: SpecifierQualifierKind1 StructDeclaratorList Semicolon"
            }
            ProdKind::SpecifierQualifierKind1P1 => {
                "SpecifierQualifierKind1: SpecifierQualifierKind1 SpecifierQualifierKind"
            }
            ProdKind::SpecifierQualifierKind1P2 => {
                "SpecifierQualifierKind1: SpecifierQualifierKind"
            }
            ProdKind::SpecifierQualifierKindP1 => "SpecifierQualifierKind: TypeSpecifier",
            ProdKind::SpecifierQualifierKindP2 => "SpecifierQualifierKind: TypeQualifier",
            ProdKind::TypeQualifierP1 => "TypeQualifier: Const",
            ProdKind::TypeQualifierP2 => "TypeQualifier: Restrict",
            ProdKind::TypeQualifierP3 => "TypeQualifier: Volatile",
            ProdKind::StructDeclaratorListP1 => {
                "StructDeclaratorList: StructDeclaratorList Comma StructDeclarator"
            }
            ProdKind::StructDeclaratorListP2 => "StructDeclaratorList: StructDeclarator",
            ProdKind::StructDeclaratorP1 => "StructDeclarator: Declarator",
            ProdKind::StructDeclaratorP2 => {
                "StructDeclarator: DeclaratorOpt Colon ConstantExpression"
            }
            ProdKind::DeclaratorOptP1 => "DeclaratorOpt: Declarator",
            ProdKind::DeclaratorOptP2 => "DeclaratorOpt: ",
            ProdKind::DeclaratorP1 => "Declarator: PointerOpt DirectDeclarator",
            ProdKind::PointerOptP1 => "PointerOpt: Pointer",
            ProdKind::PointerOptP2 => "PointerOpt: ",
            ProdKind::PointerP1 => "Pointer: Star TypeQualifier0",
            ProdKind::TypeQualifier1P1 => "TypeQualifier1: TypeQualifier1 TypeQualifier",
            ProdKind::TypeQualifier1P2 => "TypeQualifier1: TypeQualifier",
            ProdKind::TypeQualifier0P1 => "TypeQualifier0: TypeQualifier1",
            ProdKind::TypeQualifier0P2 => "TypeQualifier0: ",
            ProdKind::PointerP2 => "Pointer: Star TypeQualifier0 Pointer",
            ProdKind::DirectDeclaratorP1 => "DirectDeclarator: Identifier",
            ProdKind::DirectDeclaratorP2 => {
                "DirectDeclarator: LeftParen Declarator RightParen"
            }
            ProdKind::DirectDeclaratorP3 => {
                "DirectDeclarator: DirectDeclarator LeftSquareBracket TypeQualifier0 AssignmentExpressionOpt RightSquareBracket"
            }
            ProdKind::AssignmentExpressionOptP1 => {
                "AssignmentExpressionOpt: AssignmentExpression"
            }
            ProdKind::AssignmentExpressionOptP2 => "AssignmentExpressionOpt: ",
            ProdKind::DirectDeclaratorP4 => {
                "DirectDeclarator: DirectDeclarator LeftSquareBracket Static TypeQualifier0 AssignmentExpression RightSquareBracket"
            }
            ProdKind::DirectDeclaratorP5 => {
                "DirectDeclarator: DirectDeclarator LeftSquareBracket TypeQualifier1 Static AssignmentExpression RightSquareBracket"
            }
            ProdKind::DirectDeclaratorP6 => {
                "DirectDeclarator: DirectDeclarator LeftSquareBracket TypeQualifier0 Star RightSquareBracket"
            }
            ProdKind::DirectDeclaratorP7 => {
                "DirectDeclarator: DirectDeclarator LeftParen ParameterTypeList RightParen"
            }
            ProdKind::DirectDeclaratorP8 => {
                "DirectDeclarator: DirectDeclarator LeftParen IdentifierListOpt RightParen"
            }
            ProdKind::IdentifierListOptP1 => "IdentifierListOpt: IdentifierList",
            ProdKind::IdentifierListOptP2 => "IdentifierListOpt: ",
            ProdKind::ExpressionCommaExpression => {
                "Expression: Expression Comma Expression"
            }
            ProdKind::ExpressionP2 => "Expression: AssignmentExpression",
            ProdKind::AssignmentOperatorsP1 => "AssignmentOperators: Equal",
            ProdKind::AssignmentOperatorsP2 => "AssignmentOperators: PlusEqual",
            ProdKind::AssignmentOperatorsP3 => "AssignmentOperators: DashEqual",
            ProdKind::AssignmentOperatorsP4 => "AssignmentOperators: StarEqual",
            ProdKind::AssignmentOperatorsP5 => "AssignmentOperators: SlashEqual",
            ProdKind::AssignmentOperatorsP6 => "AssignmentOperators: PercentEqual",
            ProdKind::AssignmentOperatorsP7 => "AssignmentOperators: DoubleLeftEqual",
            ProdKind::AssignmentOperatorsP8 => "AssignmentOperators: DoubleRightEqual",
            ProdKind::AssignmentOperatorsP9 => "AssignmentOperators: AmpersandEqual",
            ProdKind::AssignmentOperatorsP10 => "AssignmentOperators: CaretEqual",
            ProdKind::AssignmentOperatorsP11 => "AssignmentOperators: VerticalBarEqual",
            ProdKind::AssignmentExpressionP1 => {
                "AssignmentExpression: ConditionalExpression"
            }
            ProdKind::AssignmentExpressionP2 => {
                "AssignmentExpression: UnaryExpression AssignmentOperators Expression"
            }
            ProdKind::ConditionalExpressionP1 => {
                "ConditionalExpression: ArithmeticExpression"
            }
            ProdKind::ConditionalExpressionP2 => {
                "ConditionalExpression: Expression Question Expression Colon Expression"
            }
            ProdKind::ArithmeticExpressionP1 => "ArithmeticExpression: UnaryExpression",
            ProdKind::ArithmeticExpressionLogicalOrExpression => {
                "ArithmeticExpression: Expression DoubleVerticalBar Expression"
            }
            ProdKind::ArithmeticExpressionLogicalAndExpression => {
                "ArithmeticExpression: Expression DoubleAmpersand Expression"
            }
            ProdKind::ArithmeticExpressionBitwiseOrExpression => {
                "ArithmeticExpression: Expression VerticalBar Expression"
            }
            ProdKind::ArithmeticExpressionBitwiseExclusiveOrExpression => {
                "ArithmeticExpression: Expression Caret Expression"
            }
            ProdKind::ArithmeticExpressionBitwiseAndExpression => {
                "ArithmeticExpression: Expression Ampersand Expression"
            }
            ProdKind::ArithmeticExpressionLogicalEqualExpression => {
                "ArithmeticExpression: Expression DoubleEqual Expression"
            }
            ProdKind::ArithmeticExpressionLogicalNotEqualExpression => {
                "ArithmeticExpression: Expression ExclaimEqual Expression"
            }
            ProdKind::ArithmeticExpressionLessThanExpression => {
                "ArithmeticExpression: Expression LeftBracket Expression"
            }
            ProdKind::ArithmeticExpressionLessThanOrEqualExpression => {
                "ArithmeticExpression: Expression LeftBracketEqual Expression"
            }
            ProdKind::ArithmeticExpressionGreaterThanExpression => {
                "ArithmeticExpression: Expression RightBracket Expression"
            }
            ProdKind::ArithmeticExpressionGreaterThanOrEqualExpression => {
                "ArithmeticExpression: Expression RightBracketEqual Expression"
            }
            ProdKind::ArithmeticExpressionBitwiseLeftShiftExpression => {
                "ArithmeticExpression: Expression DoubleLeft Expression"
            }
            ProdKind::ArithmeticExpressionBitwiseRightShiftExpression => {
                "ArithmeticExpression: Expression DoubleRight Expression"
            }
            ProdKind::ArithmeticExpressionAdditionExpression => {
                "ArithmeticExpression: Expression Plus Expression"
            }
            ProdKind::ArithmeticExpressionSubtractionExpression => {
                "ArithmeticExpression: Expression Dash Expression"
            }
            ProdKind::ArithmeticExpressionMultiplyExpression => {
                "ArithmeticExpression: Expression Star Expression"
            }
            ProdKind::ArithmeticExpressionDivisionExpression => {
                "ArithmeticExpression: Expression Slash Expression"
            }
            ProdKind::ArithmeticExpressionModuloExpression => {
                "ArithmeticExpression: Expression Percent Expression"
            }
            ProdKind::TypeCastP1 => "TypeCast: LeftParen TypeName RightParen",
            ProdKind::UnaryExpressionP1 => "UnaryExpression: PrimaryExpression",
            ProdKind::UnaryExpressionPreIncrementExpression => {
                "UnaryExpression: DoublePlus UnaryExpression"
            }
            ProdKind::UnaryExpressionPreDecrementExpression => {
                "UnaryExpression: DoubleDash UnaryExpression"
            }
            ProdKind::UnaryExpressionLogicalNotExpression => {
                "UnaryExpression: Exclaim TypeCastOpt UnaryExpression"
            }
            ProdKind::TypeCastOptP1 => "TypeCastOpt: TypeCast",
            ProdKind::TypeCastOptP2 => "TypeCastOpt: ",
            ProdKind::UnaryExpressionBitwiseNotExpression => {
                "UnaryExpression: Tilde TypeCastOpt UnaryExpression"
            }
            ProdKind::UnaryExpressionPlusExpression => {
                "UnaryExpression: Plus TypeCastOpt UnaryExpression"
            }
            ProdKind::UnaryExpressionMinusExpression => {
                "UnaryExpression: Dash TypeCastOpt UnaryExpression"
            }
            ProdKind::UnaryExpressionDereferenceExpression => {
                "UnaryExpression: Star TypeCastOpt UnaryExpression"
            }
            ProdKind::UnaryExpressionReferenceExpression => {
                "UnaryExpression: Ampersand TypeCastOpt UnaryExpression"
            }
            ProdKind::UnaryExpressionSizeOfExpressionExpression => {
                "UnaryExpression: Sizeof Expression"
            }
            ProdKind::UnaryExpressionSizeOfTypenameExpression => {
                "UnaryExpression: Sizeof LeftParen TypeName RightParen"
            }
            ProdKind::UnaryExpressionArrayAccessExpression => {
                "UnaryExpression: UnaryExpression LeftSquareBracket Expression RightSquareBracket"
            }
            ProdKind::UnaryExpressionFunctionCallExpression => {
                "UnaryExpression: UnaryExpression LeftParen ArgumentExpressionListOpt RightParen"
            }
            ProdKind::ArgumentExpressionListOptP1 => {
                "ArgumentExpressionListOpt: ArgumentExpressionList"
            }
            ProdKind::ArgumentExpressionListOptP2 => "ArgumentExpressionListOpt: ",
            ProdKind::UnaryExpressionAccessExpression => {
                "UnaryExpression: UnaryExpression Dot Identifier"
            }
            ProdKind::UnaryExpressionPointerAccessExpression => {
                "UnaryExpression: UnaryExpression DashRightBracket Identifier"
            }
            ProdKind::UnaryExpressionPostIncrementExpression => {
                "UnaryExpression: UnaryExpression DoublePlus"
            }
            ProdKind::UnaryExpressionPostDecrementExpression => {
                "UnaryExpression: UnaryExpression DoubleDash"
            }
            ProdKind::UnaryExpressionCompoundLiteralExpression => {
                "UnaryExpression: TypeCast LeftCurlyBracket InitializerList CommaOpt RightCurlyBracket"
            }
            ProdKind::CommaOptP1 => "CommaOpt: Comma",
            ProdKind::CommaOptP2 => "CommaOpt: ",
            ProdKind::PrimaryExpressionNumber => "PrimaryExpression: Num",
            ProdKind::PrimaryExpressionIdentifier => "PrimaryExpression: Identifier",
            ProdKind::PrimaryExpressionStringLiteral => {
                "PrimaryExpression: StringLiteral"
            }
            ProdKind::PrimaryExpressionParen => {
                "PrimaryExpression: LeftParen Expression RightParen"
            }
            ProdKind::ArgumentExpressionListP1 => {
                "ArgumentExpressionList: AssignmentExpression"
            }
            ProdKind::ArgumentExpressionListP2 => {
                "ArgumentExpressionList: ArgumentExpressionList Comma AssignmentExpression"
            }
            ProdKind::TypeNameP1 => {
                "TypeName: SpecifierQualifierKind1 AbstractDeclaratorOpt"
            }
            ProdKind::AbstractDeclaratorOptP1 => {
                "AbstractDeclaratorOpt: AbstractDeclarator"
            }
            ProdKind::AbstractDeclaratorOptP2 => "AbstractDeclaratorOpt: ",
            ProdKind::AbstractDeclaratorP1 => "AbstractDeclarator: Pointer",
            ProdKind::AbstractDeclaratorP2 => {
                "AbstractDeclarator: PointerOpt DirectAbstractDeclarator"
            }
            ProdKind::DirectAbstractDeclaratorP1 => {
                "DirectAbstractDeclarator: LeftParen AbstractDeclarator RightParen"
            }
            ProdKind::DirectAbstractDeclaratorP2 => {
                "DirectAbstractDeclarator: DirectAbstractDeclaratorOpt LeftSquareBracket TypeQualifier0 AssignmentExpressionOpt RightSquareBracket"
            }
            ProdKind::DirectAbstractDeclaratorOptP1 => {
                "DirectAbstractDeclaratorOpt: DirectAbstractDeclarator"
            }
            ProdKind::DirectAbstractDeclaratorOptP2 => "DirectAbstractDeclaratorOpt: ",
            ProdKind::DirectAbstractDeclaratorP3 => {
                "DirectAbstractDeclarator: DirectAbstractDeclaratorOpt LeftSquareBracket Static TypeQualifier0 AssignmentExpression RightSquareBracket"
            }
            ProdKind::DirectAbstractDeclaratorP4 => {
                "DirectAbstractDeclarator: DirectAbstractDeclaratorOpt LeftSquareBracket TypeQualifier1 Static AssignmentExpression RightSquareBracket"
            }
            ProdKind::DirectAbstractDeclaratorP5 => {
                "DirectAbstractDeclarator: DirectAbstractDeclaratorOpt LeftSquareBracket Star RightSquareBracket"
            }
            ProdKind::DirectAbstractDeclaratorP6 => {
                "DirectAbstractDeclarator: DirectAbstractDeclaratorOpt LeftParen ParameterTypeListOpt RightParen"
            }
            ProdKind::ParameterTypeListOptP1 => "ParameterTypeListOpt: ParameterTypeList",
            ProdKind::ParameterTypeListOptP2 => "ParameterTypeListOpt: ",
            ProdKind::ParameterTypeListP1 => "ParameterTypeList: ParameterList",
            ProdKind::ParameterTypeListP2 => {
                "ParameterTypeList: ParameterList Comma Ellipsis"
            }
            ProdKind::ParameterListP1 => "ParameterList: ParameterDeclaration",
            ProdKind::ParameterListP2 => {
                "ParameterList: ParameterList Comma ParameterDeclaration"
            }
            ProdKind::ParameterDeclarationKindP1 => {
                "ParameterDeclarationKind: Declarator"
            }
            ProdKind::ParameterDeclarationKindP2 => {
                "ParameterDeclarationKind: AbstractDeclaratorOpt"
            }
            ProdKind::ParameterDeclarationP1 => {
                "ParameterDeclaration: DeclarationSpecifier1 ParameterDeclarationKind"
            }
            ProdKind::InitializerListP1 => "InitializerList: DesignationOpt Initializer",
            ProdKind::DesignationOptP1 => "DesignationOpt: Designation",
            ProdKind::DesignationOptP2 => "DesignationOpt: ",
            ProdKind::InitializerListP2 => {
                "InitializerList: InitializerList Comma DesignationOpt Initializer"
            }
            ProdKind::DesignationP1 => "Designation: Designator1 Equal",
            ProdKind::Designator1P1 => "Designator1: Designator1 Designator",
            ProdKind::Designator1P2 => "Designator1: Designator",
            ProdKind::DesignatorP1 => {
                "Designator: LeftSquareBracket ConstantExpression RightSquareBracket"
            }
            ProdKind::DesignatorP2 => "Designator: Dot Identifier",
            ProdKind::ConstantExpressionP1 => "ConstantExpression: ConditionalExpression",
            ProdKind::InitializerP1 => "Initializer: AssignmentExpression",
            ProdKind::InitializerP2 => {
                "Initializer: LeftCurlyBracket InitializerList CommaOpt RightCurlyBracket"
            }
            ProdKind::IdentifierListP1 => "IdentifierList: Identifier",
            ProdKind::IdentifierListP2 => {
                "IdentifierList: IdentifierList Comma Identifier"
            }
            ProdKind::EnumSpecifierP1 => {
                "EnumSpecifier: Enum IdentifierOpt LeftCurlyBracket EnumeratorList CommaOpt RightCurlyBracket"
            }
            ProdKind::EnumSpecifierP2 => "EnumSpecifier: Enum Identifier",
            ProdKind::EnumeratorListP1 => "EnumeratorList: Enumerator",
            ProdKind::EnumeratorListP2 => {
                "EnumeratorList: EnumeratorList Comma Enumerator"
            }
            ProdKind::EnumeratorP1 => "Enumerator: EnumerationConstant",
            ProdKind::EnumeratorP2 => {
                "Enumerator: EnumerationConstant Equal ConstantExpression"
            }
            ProdKind::EnumerationConstantP1 => "EnumerationConstant: Identifier",
            ProdKind::TypedefNameP1 => "TypedefName: Identifier",
            ProdKind::FunctionSpecifierP1 => "FunctionSpecifier: Inline",
            ProdKind::DeclarationP1 => {
                "Declaration: DeclarationSpecifier1 InitDeclaratorListOpt Semicolon"
            }
            ProdKind::InitDeclaratorListOptP1 => {
                "InitDeclaratorListOpt: InitDeclaratorList"
            }
            ProdKind::InitDeclaratorListOptP2 => "InitDeclaratorListOpt: ",
            ProdKind::InitDeclaratorListP1 => "InitDeclaratorList: InitDeclarator",
            ProdKind::InitDeclaratorListP2 => {
                "InitDeclaratorList: InitDeclaratorList Comma InitDeclarator"
            }
            ProdKind::InitDeclaratorP1 => "InitDeclarator: Declarator",
            ProdKind::InitDeclaratorP2 => "InitDeclarator: Declarator Equal Initializer",
            ProdKind::CompoundStatementP1 => {
                "CompoundStatement: LeftCurlyBracket BlockItem0 RightCurlyBracket"
            }
            ProdKind::BlockItem1P1 => "BlockItem1: BlockItem1 BlockItem",
            ProdKind::BlockItem1P2 => "BlockItem1: BlockItem",
            ProdKind::BlockItem0P1 => "BlockItem0: BlockItem1",
            ProdKind::BlockItem0P2 => "BlockItem0: ",
            ProdKind::BlockItemP1 => "BlockItem: Declaration",
            ProdKind::BlockItemP2 => "BlockItem: Statement",
            ProdKind::StatementLabelStatement => "Statement: Identifier Colon Statement",
            ProdKind::StatementCaseClause => {
                "Statement: Case ConstantExpression Colon Statement"
            }
            ProdKind::StatementDefaultClause => "Statement: Default Colon Statement",
            ProdKind::StatementP4 => "Statement: CompoundStatement",
            ProdKind::StatementExpressionStatement => {
                "Statement: ExpressionOpt Semicolon"
            }
            ProdKind::ExpressionOptP1 => "ExpressionOpt: Expression",
            ProdKind::ExpressionOptP2 => "ExpressionOpt: ",
            ProdKind::StatementIfStatement => {
                "Statement: If LeftParen Expression RightParen Statement"
            }
            ProdKind::StatementIfElseStatement => {
                "Statement: If LeftParen Expression RightParen Statement Else Statement"
            }
            ProdKind::StatementSwitchStatement => {
                "Statement: Switch LeftParen Expression RightParen Statement"
            }
            ProdKind::StatementWhileStatement => {
                "Statement: While LeftParen Expression RightParen Statement"
            }
            ProdKind::StatementDoWhileStatement => {
                "Statement: Do Statement While LeftParen Expression RightParen Semicolon"
            }
            ProdKind::StatementForStatement => {
                "Statement: For LeftParen ForInitClause ExpressionOpt Semicolon ExpressionOpt RightParen Statement"
            }
            ProdKind::StatementGotoStatement => "Statement: Goto Identifier Semicolon",
            ProdKind::StatementContinueStatement => "Statement: Continue Semicolon",
            ProdKind::StatementBreakStatement => "Statement: Break Semicolon",
            ProdKind::StatementReturnStatement => {
                "Statement: Return ExpressionOpt Semicolon"
            }
            ProdKind::ForInitClauseNone => "ForInitClause: Semicolon",
            ProdKind::ForInitClauseForInitWithExpression => {
                "ForInitClause: Expression Semicolon"
            }
            ProdKind::ForInitClauseForInitWithDeclaration => "ForInitClause: Declaration",
        };
        write!(f, "{}", name)
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    TranslationUnit,
    ExternalDeclaration,
    FunctionDefinition,
    DeclarationSpecifier1,
    Declaration1,
    Declaration0,
    DeclarationSpecifier,
    StorageClassSpecifier,
    TypeSpecifier,
    StructOrUnionSpecifier,
    IdentifierOpt,
    StructDeclaration1,
    StructOrUnion,
    StructDeclaration,
    SpecifierQualifierKind1,
    SpecifierQualifierKind,
    TypeQualifier,
    StructDeclaratorList,
    StructDeclarator,
    DeclaratorOpt,
    Declarator,
    PointerOpt,
    Pointer,
    TypeQualifier1,
    TypeQualifier0,
    DirectDeclarator,
    AssignmentExpressionOpt,
    IdentifierListOpt,
    Expression,
    AssignmentOperators,
    AssignmentExpression,
    ConditionalExpression,
    ArithmeticExpression,
    TypeCast,
    UnaryExpression,
    TypeCastOpt,
    ArgumentExpressionListOpt,
    CommaOpt,
    PrimaryExpression,
    ArgumentExpressionList,
    TypeName,
    AbstractDeclaratorOpt,
    AbstractDeclarator,
    DirectAbstractDeclarator,
    DirectAbstractDeclaratorOpt,
    ParameterTypeListOpt,
    ParameterTypeList,
    ParameterList,
    ParameterDeclarationKind,
    ParameterDeclaration,
    InitializerList,
    DesignationOpt,
    Designation,
    Designator1,
    Designator,
    ConstantExpression,
    Initializer,
    IdentifierList,
    EnumSpecifier,
    EnumeratorList,
    Enumerator,
    EnumerationConstant,
    TypedefName,
    FunctionSpecifier,
    Declaration,
    InitDeclaratorListOpt,
    InitDeclaratorList,
    InitDeclarator,
    CompoundStatement,
    BlockItem1,
    BlockItem0,
    BlockItem,
    Statement,
    ExpressionOpt,
    ForInitClause,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::TranslationUnitP1 => NonTermKind::TranslationUnit,
            ProdKind::TranslationUnitP2 => NonTermKind::TranslationUnit,
            ProdKind::ExternalDeclarationP1 => NonTermKind::ExternalDeclaration,
            ProdKind::ExternalDeclarationP2 => NonTermKind::ExternalDeclaration,
            ProdKind::FunctionDefinitionP1 => NonTermKind::FunctionDefinition,
            ProdKind::DeclarationSpecifier1P1 => NonTermKind::DeclarationSpecifier1,
            ProdKind::DeclarationSpecifier1P2 => NonTermKind::DeclarationSpecifier1,
            ProdKind::Declaration1P1 => NonTermKind::Declaration1,
            ProdKind::Declaration1P2 => NonTermKind::Declaration1,
            ProdKind::Declaration0P1 => NonTermKind::Declaration0,
            ProdKind::Declaration0P2 => NonTermKind::Declaration0,
            ProdKind::DeclarationSpecifierP1 => NonTermKind::DeclarationSpecifier,
            ProdKind::DeclarationSpecifierP2 => NonTermKind::DeclarationSpecifier,
            ProdKind::DeclarationSpecifierP3 => NonTermKind::DeclarationSpecifier,
            ProdKind::DeclarationSpecifierP4 => NonTermKind::DeclarationSpecifier,
            ProdKind::StorageClassSpecifierP1 => NonTermKind::StorageClassSpecifier,
            ProdKind::StorageClassSpecifierP2 => NonTermKind::StorageClassSpecifier,
            ProdKind::StorageClassSpecifierP3 => NonTermKind::StorageClassSpecifier,
            ProdKind::StorageClassSpecifierP4 => NonTermKind::StorageClassSpecifier,
            ProdKind::StorageClassSpecifierP5 => NonTermKind::StorageClassSpecifier,
            ProdKind::TypeSpecifierP1 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP2 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP3 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP4 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP5 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP6 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP7 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP8 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP9 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP10 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP11 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP12 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP13 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP14 => NonTermKind::TypeSpecifier,
            ProdKind::StructOrUnionSpecifierP1 => NonTermKind::StructOrUnionSpecifier,
            ProdKind::IdentifierOptP1 => NonTermKind::IdentifierOpt,
            ProdKind::IdentifierOptP2 => NonTermKind::IdentifierOpt,
            ProdKind::StructDeclaration1P1 => NonTermKind::StructDeclaration1,
            ProdKind::StructDeclaration1P2 => NonTermKind::StructDeclaration1,
            ProdKind::StructOrUnionSpecifierP2 => NonTermKind::StructOrUnionSpecifier,
            ProdKind::StructOrUnionP1 => NonTermKind::StructOrUnion,
            ProdKind::StructOrUnionP2 => NonTermKind::StructOrUnion,
            ProdKind::StructDeclarationP1 => NonTermKind::StructDeclaration,
            ProdKind::SpecifierQualifierKind1P1 => NonTermKind::SpecifierQualifierKind1,
            ProdKind::SpecifierQualifierKind1P2 => NonTermKind::SpecifierQualifierKind1,
            ProdKind::SpecifierQualifierKindP1 => NonTermKind::SpecifierQualifierKind,
            ProdKind::SpecifierQualifierKindP2 => NonTermKind::SpecifierQualifierKind,
            ProdKind::TypeQualifierP1 => NonTermKind::TypeQualifier,
            ProdKind::TypeQualifierP2 => NonTermKind::TypeQualifier,
            ProdKind::TypeQualifierP3 => NonTermKind::TypeQualifier,
            ProdKind::StructDeclaratorListP1 => NonTermKind::StructDeclaratorList,
            ProdKind::StructDeclaratorListP2 => NonTermKind::StructDeclaratorList,
            ProdKind::StructDeclaratorP1 => NonTermKind::StructDeclarator,
            ProdKind::StructDeclaratorP2 => NonTermKind::StructDeclarator,
            ProdKind::DeclaratorOptP1 => NonTermKind::DeclaratorOpt,
            ProdKind::DeclaratorOptP2 => NonTermKind::DeclaratorOpt,
            ProdKind::DeclaratorP1 => NonTermKind::Declarator,
            ProdKind::PointerOptP1 => NonTermKind::PointerOpt,
            ProdKind::PointerOptP2 => NonTermKind::PointerOpt,
            ProdKind::PointerP1 => NonTermKind::Pointer,
            ProdKind::TypeQualifier1P1 => NonTermKind::TypeQualifier1,
            ProdKind::TypeQualifier1P2 => NonTermKind::TypeQualifier1,
            ProdKind::TypeQualifier0P1 => NonTermKind::TypeQualifier0,
            ProdKind::TypeQualifier0P2 => NonTermKind::TypeQualifier0,
            ProdKind::PointerP2 => NonTermKind::Pointer,
            ProdKind::DirectDeclaratorP1 => NonTermKind::DirectDeclarator,
            ProdKind::DirectDeclaratorP2 => NonTermKind::DirectDeclarator,
            ProdKind::DirectDeclaratorP3 => NonTermKind::DirectDeclarator,
            ProdKind::AssignmentExpressionOptP1 => NonTermKind::AssignmentExpressionOpt,
            ProdKind::AssignmentExpressionOptP2 => NonTermKind::AssignmentExpressionOpt,
            ProdKind::DirectDeclaratorP4 => NonTermKind::DirectDeclarator,
            ProdKind::DirectDeclaratorP5 => NonTermKind::DirectDeclarator,
            ProdKind::DirectDeclaratorP6 => NonTermKind::DirectDeclarator,
            ProdKind::DirectDeclaratorP7 => NonTermKind::DirectDeclarator,
            ProdKind::DirectDeclaratorP8 => NonTermKind::DirectDeclarator,
            ProdKind::IdentifierListOptP1 => NonTermKind::IdentifierListOpt,
            ProdKind::IdentifierListOptP2 => NonTermKind::IdentifierListOpt,
            ProdKind::ExpressionCommaExpression => NonTermKind::Expression,
            ProdKind::ExpressionP2 => NonTermKind::Expression,
            ProdKind::AssignmentOperatorsP1 => NonTermKind::AssignmentOperators,
            ProdKind::AssignmentOperatorsP2 => NonTermKind::AssignmentOperators,
            ProdKind::AssignmentOperatorsP3 => NonTermKind::AssignmentOperators,
            ProdKind::AssignmentOperatorsP4 => NonTermKind::AssignmentOperators,
            ProdKind::AssignmentOperatorsP5 => NonTermKind::AssignmentOperators,
            ProdKind::AssignmentOperatorsP6 => NonTermKind::AssignmentOperators,
            ProdKind::AssignmentOperatorsP7 => NonTermKind::AssignmentOperators,
            ProdKind::AssignmentOperatorsP8 => NonTermKind::AssignmentOperators,
            ProdKind::AssignmentOperatorsP9 => NonTermKind::AssignmentOperators,
            ProdKind::AssignmentOperatorsP10 => NonTermKind::AssignmentOperators,
            ProdKind::AssignmentOperatorsP11 => NonTermKind::AssignmentOperators,
            ProdKind::AssignmentExpressionP1 => NonTermKind::AssignmentExpression,
            ProdKind::AssignmentExpressionP2 => NonTermKind::AssignmentExpression,
            ProdKind::ConditionalExpressionP1 => NonTermKind::ConditionalExpression,
            ProdKind::ConditionalExpressionP2 => NonTermKind::ConditionalExpression,
            ProdKind::ArithmeticExpressionP1 => NonTermKind::ArithmeticExpression,
            ProdKind::ArithmeticExpressionLogicalOrExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionLogicalAndExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionBitwiseOrExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionBitwiseExclusiveOrExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionBitwiseAndExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionLogicalEqualExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionLogicalNotEqualExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionLessThanExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionLessThanOrEqualExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionGreaterThanExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionGreaterThanOrEqualExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionBitwiseLeftShiftExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionBitwiseRightShiftExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionAdditionExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionSubtractionExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionMultiplyExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionDivisionExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionModuloExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::TypeCastP1 => NonTermKind::TypeCast,
            ProdKind::UnaryExpressionP1 => NonTermKind::UnaryExpression,
            ProdKind::UnaryExpressionPreIncrementExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionPreDecrementExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionLogicalNotExpression => NonTermKind::UnaryExpression,
            ProdKind::TypeCastOptP1 => NonTermKind::TypeCastOpt,
            ProdKind::TypeCastOptP2 => NonTermKind::TypeCastOpt,
            ProdKind::UnaryExpressionBitwiseNotExpression => NonTermKind::UnaryExpression,
            ProdKind::UnaryExpressionPlusExpression => NonTermKind::UnaryExpression,
            ProdKind::UnaryExpressionMinusExpression => NonTermKind::UnaryExpression,
            ProdKind::UnaryExpressionDereferenceExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionReferenceExpression => NonTermKind::UnaryExpression,
            ProdKind::UnaryExpressionSizeOfExpressionExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionSizeOfTypenameExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionArrayAccessExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionFunctionCallExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::ArgumentExpressionListOptP1 => {
                NonTermKind::ArgumentExpressionListOpt
            }
            ProdKind::ArgumentExpressionListOptP2 => {
                NonTermKind::ArgumentExpressionListOpt
            }
            ProdKind::UnaryExpressionAccessExpression => NonTermKind::UnaryExpression,
            ProdKind::UnaryExpressionPointerAccessExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionPostIncrementExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionPostDecrementExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionCompoundLiteralExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::CommaOptP1 => NonTermKind::CommaOpt,
            ProdKind::CommaOptP2 => NonTermKind::CommaOpt,
            ProdKind::PrimaryExpressionNumber => NonTermKind::PrimaryExpression,
            ProdKind::PrimaryExpressionIdentifier => NonTermKind::PrimaryExpression,
            ProdKind::PrimaryExpressionStringLiteral => NonTermKind::PrimaryExpression,
            ProdKind::PrimaryExpressionParen => NonTermKind::PrimaryExpression,
            ProdKind::ArgumentExpressionListP1 => NonTermKind::ArgumentExpressionList,
            ProdKind::ArgumentExpressionListP2 => NonTermKind::ArgumentExpressionList,
            ProdKind::TypeNameP1 => NonTermKind::TypeName,
            ProdKind::AbstractDeclaratorOptP1 => NonTermKind::AbstractDeclaratorOpt,
            ProdKind::AbstractDeclaratorOptP2 => NonTermKind::AbstractDeclaratorOpt,
            ProdKind::AbstractDeclaratorP1 => NonTermKind::AbstractDeclarator,
            ProdKind::AbstractDeclaratorP2 => NonTermKind::AbstractDeclarator,
            ProdKind::DirectAbstractDeclaratorP1 => NonTermKind::DirectAbstractDeclarator,
            ProdKind::DirectAbstractDeclaratorP2 => NonTermKind::DirectAbstractDeclarator,
            ProdKind::DirectAbstractDeclaratorOptP1 => {
                NonTermKind::DirectAbstractDeclaratorOpt
            }
            ProdKind::DirectAbstractDeclaratorOptP2 => {
                NonTermKind::DirectAbstractDeclaratorOpt
            }
            ProdKind::DirectAbstractDeclaratorP3 => NonTermKind::DirectAbstractDeclarator,
            ProdKind::DirectAbstractDeclaratorP4 => NonTermKind::DirectAbstractDeclarator,
            ProdKind::DirectAbstractDeclaratorP5 => NonTermKind::DirectAbstractDeclarator,
            ProdKind::DirectAbstractDeclaratorP6 => NonTermKind::DirectAbstractDeclarator,
            ProdKind::ParameterTypeListOptP1 => NonTermKind::ParameterTypeListOpt,
            ProdKind::ParameterTypeListOptP2 => NonTermKind::ParameterTypeListOpt,
            ProdKind::ParameterTypeListP1 => NonTermKind::ParameterTypeList,
            ProdKind::ParameterTypeListP2 => NonTermKind::ParameterTypeList,
            ProdKind::ParameterListP1 => NonTermKind::ParameterList,
            ProdKind::ParameterListP2 => NonTermKind::ParameterList,
            ProdKind::ParameterDeclarationKindP1 => NonTermKind::ParameterDeclarationKind,
            ProdKind::ParameterDeclarationKindP2 => NonTermKind::ParameterDeclarationKind,
            ProdKind::ParameterDeclarationP1 => NonTermKind::ParameterDeclaration,
            ProdKind::InitializerListP1 => NonTermKind::InitializerList,
            ProdKind::DesignationOptP1 => NonTermKind::DesignationOpt,
            ProdKind::DesignationOptP2 => NonTermKind::DesignationOpt,
            ProdKind::InitializerListP2 => NonTermKind::InitializerList,
            ProdKind::DesignationP1 => NonTermKind::Designation,
            ProdKind::Designator1P1 => NonTermKind::Designator1,
            ProdKind::Designator1P2 => NonTermKind::Designator1,
            ProdKind::DesignatorP1 => NonTermKind::Designator,
            ProdKind::DesignatorP2 => NonTermKind::Designator,
            ProdKind::ConstantExpressionP1 => NonTermKind::ConstantExpression,
            ProdKind::InitializerP1 => NonTermKind::Initializer,
            ProdKind::InitializerP2 => NonTermKind::Initializer,
            ProdKind::IdentifierListP1 => NonTermKind::IdentifierList,
            ProdKind::IdentifierListP2 => NonTermKind::IdentifierList,
            ProdKind::EnumSpecifierP1 => NonTermKind::EnumSpecifier,
            ProdKind::EnumSpecifierP2 => NonTermKind::EnumSpecifier,
            ProdKind::EnumeratorListP1 => NonTermKind::EnumeratorList,
            ProdKind::EnumeratorListP2 => NonTermKind::EnumeratorList,
            ProdKind::EnumeratorP1 => NonTermKind::Enumerator,
            ProdKind::EnumeratorP2 => NonTermKind::Enumerator,
            ProdKind::EnumerationConstantP1 => NonTermKind::EnumerationConstant,
            ProdKind::TypedefNameP1 => NonTermKind::TypedefName,
            ProdKind::FunctionSpecifierP1 => NonTermKind::FunctionSpecifier,
            ProdKind::DeclarationP1 => NonTermKind::Declaration,
            ProdKind::InitDeclaratorListOptP1 => NonTermKind::InitDeclaratorListOpt,
            ProdKind::InitDeclaratorListOptP2 => NonTermKind::InitDeclaratorListOpt,
            ProdKind::InitDeclaratorListP1 => NonTermKind::InitDeclaratorList,
            ProdKind::InitDeclaratorListP2 => NonTermKind::InitDeclaratorList,
            ProdKind::InitDeclaratorP1 => NonTermKind::InitDeclarator,
            ProdKind::InitDeclaratorP2 => NonTermKind::InitDeclarator,
            ProdKind::CompoundStatementP1 => NonTermKind::CompoundStatement,
            ProdKind::BlockItem1P1 => NonTermKind::BlockItem1,
            ProdKind::BlockItem1P2 => NonTermKind::BlockItem1,
            ProdKind::BlockItem0P1 => NonTermKind::BlockItem0,
            ProdKind::BlockItem0P2 => NonTermKind::BlockItem0,
            ProdKind::BlockItemP1 => NonTermKind::BlockItem,
            ProdKind::BlockItemP2 => NonTermKind::BlockItem,
            ProdKind::StatementLabelStatement => NonTermKind::Statement,
            ProdKind::StatementCaseClause => NonTermKind::Statement,
            ProdKind::StatementDefaultClause => NonTermKind::Statement,
            ProdKind::StatementP4 => NonTermKind::Statement,
            ProdKind::StatementExpressionStatement => NonTermKind::Statement,
            ProdKind::ExpressionOptP1 => NonTermKind::ExpressionOpt,
            ProdKind::ExpressionOptP2 => NonTermKind::ExpressionOpt,
            ProdKind::StatementIfStatement => NonTermKind::Statement,
            ProdKind::StatementIfElseStatement => NonTermKind::Statement,
            ProdKind::StatementSwitchStatement => NonTermKind::Statement,
            ProdKind::StatementWhileStatement => NonTermKind::Statement,
            ProdKind::StatementDoWhileStatement => NonTermKind::Statement,
            ProdKind::StatementForStatement => NonTermKind::Statement,
            ProdKind::StatementGotoStatement => NonTermKind::Statement,
            ProdKind::StatementContinueStatement => NonTermKind::Statement,
            ProdKind::StatementBreakStatement => NonTermKind::Statement,
            ProdKind::StatementReturnStatement => NonTermKind::Statement,
            ProdKind::ForInitClauseNone => NonTermKind::ForInitClause,
            ProdKind::ForInitClauseForInitWithExpression => NonTermKind::ForInitClause,
            ProdKind::ForInitClauseForInitWithDeclaration => NonTermKind::ForInitClause,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    AutoS1,
    CharS2,
    ConstS3,
    DoubleS4,
    EnumS5,
    ExternS6,
    FloatS7,
    InlineS8,
    IntS9,
    LongS10,
    RegisterS11,
    RestrictS12,
    ShortS13,
    SignedS14,
    StaticS15,
    StructS16,
    TypedefS17,
    UnderscoreBoolS18,
    UnderscoreComplexS19,
    UnionS20,
    UnsignedS21,
    VoidS22,
    VolatileS23,
    IdentifierS24,
    TranslationUnitS25,
    ExternalDeclarationS26,
    FunctionDefinitionS27,
    DeclarationSpecifier1S28,
    DeclarationSpecifierS29,
    StorageClassSpecifierS30,
    TypeSpecifierS31,
    StructOrUnionSpecifierS32,
    StructOrUnionS33,
    TypeQualifierS34,
    EnumSpecifierS35,
    TypedefNameS36,
    FunctionSpecifierS37,
    DeclarationS38,
    IdentifierS39,
    IdentifierOptS40,
    ExternalDeclarationS41,
    StarS42,
    DeclarationSpecifierS43,
    DeclaratorS44,
    PointerOptS45,
    PointerS46,
    InitDeclaratorListOptS47,
    InitDeclaratorListS48,
    InitDeclaratorS49,
    IdentifierS50,
    IdentifierOptS51,
    LeftCurlyBracketS52,
    TypeQualifierS53,
    TypeQualifier1S54,
    TypeQualifier0S55,
    EqualS56,
    DeclarationSpecifier1S57,
    Declaration1S58,
    Declaration0S59,
    DeclarationS60,
    LeftParenS61,
    IdentifierS62,
    DirectDeclaratorS63,
    SemicolonS64,
    CommaS65,
    LeftCurlyBracketS66,
    IdentifierS67,
    EnumeratorListS68,
    EnumeratorS69,
    EnumerationConstantS70,
    TypeQualifierS71,
    PointerS72,
    AmpersandS73,
    DashS74,
    ExclaimS75,
    LeftCurlyBracketS76,
    LeftParenS77,
    PlusS78,
    SizeofS79,
    StarS80,
    TildeS81,
    DoubleDashS82,
    DoublePlusS83,
    NumS84,
    IdentifierS85,
    StringLiteralS86,
    ExpressionS87,
    AssignmentExpressionS88,
    ConditionalExpressionS89,
    ArithmeticExpressionS90,
    TypeCastS91,
    UnaryExpressionS92,
    PrimaryExpressionS93,
    InitializerS94,
    DeclaratorS95,
    DeclarationS96,
    LeftCurlyBracketS97,
    CompoundStatementS98,
    DeclaratorS99,
    LeftParenS100,
    LeftSquareBracketS101,
    InitDeclaratorS102,
    TypeSpecifierS103,
    StructDeclaration1S104,
    StructDeclarationS105,
    SpecifierQualifierKind1S106,
    SpecifierQualifierKindS107,
    TypeQualifierS108,
    CommaS109,
    CommaOptS110,
    EqualS111,
    LeftParenS112,
    TypeCastS113,
    TypeCastOptS114,
    TypeCastOptS115,
    TypeCastOptS116,
    DotS117,
    LeftSquareBracketS118,
    InitializerListS119,
    DesignationOptS120,
    DesignationS121,
    Designator1S122,
    DesignatorS123,
    IdentifierS124,
    SpecifierQualifierKind1S125,
    ExpressionS126,
    AssignmentExpressionS127,
    TypeNameS128,
    TypeCastOptS129,
    LeftParenS130,
    ExpressionS131,
    TypeCastOptS132,
    TypeCastOptS133,
    UnaryExpressionS134,
    UnaryExpressionS135,
    AmpersandS136,
    CaretS137,
    CommaS138,
    DashS139,
    LeftBracketS140,
    PercentS141,
    PlusS142,
    QuestionS143,
    RightBracketS144,
    SlashS145,
    StarS146,
    VerticalBarS147,
    DoubleAmpersandS148,
    DoubleEqualS149,
    DoubleLeftS150,
    DoubleRightS151,
    DoubleVerticalBarS152,
    ExclaimEqualS153,
    LeftBracketEqualS154,
    RightBracketEqualS155,
    LeftCurlyBracketS156,
    DotS157,
    EqualS158,
    LeftParenS159,
    LeftSquareBracketS160,
    AmpersandEqualS161,
    CaretEqualS162,
    DashEqualS163,
    DashRightBracketS164,
    DoubleDashS165,
    DoublePlusS166,
    PercentEqualS167,
    PlusEqualS168,
    SlashEqualS169,
    StarEqualS170,
    VerticalBarEqualS171,
    DoubleLeftEqualS172,
    DoubleRightEqualS173,
    AssignmentOperatorsS174,
    BreakS175,
    CaseS176,
    ContinueS177,
    DefaultS178,
    DoS179,
    ForS180,
    GotoS181,
    IfS182,
    ReturnS183,
    SwitchS184,
    WhileS185,
    IdentifierS186,
    ExpressionS187,
    DeclarationS188,
    CompoundStatementS189,
    BlockItem1S190,
    BlockItem0S191,
    BlockItemS192,
    StatementS193,
    ExpressionOptS194,
    RightParenS195,
    IdentifierS196,
    DeclarationSpecifier1S197,
    IdentifierListOptS198,
    ParameterTypeListS199,
    ParameterListS200,
    ParameterDeclarationS201,
    IdentifierListS202,
    StaticS203,
    TypeQualifier1S204,
    TypeQualifier0S205,
    RightCurlyBracketS206,
    StructDeclarationS207,
    SpecifierQualifierKindS208,
    StructDeclaratorListS209,
    StructDeclaratorS210,
    DeclaratorOptS211,
    DeclaratorS212,
    EnumeratorS213,
    RightCurlyBracketS214,
    ConditionalExpressionS215,
    UnaryExpressionS216,
    ConstantExpressionS217,
    UnaryExpressionS218,
    UnaryExpressionS219,
    UnaryExpressionS220,
    IdentifierS221,
    ConstantExpressionS222,
    CommaS223,
    CommaOptS224,
    InitializerS225,
    EqualS226,
    DesignatorS227,
    PointerOptS228,
    PointerS229,
    AbstractDeclaratorOptS230,
    AbstractDeclaratorS231,
    RightParenS232,
    RightParenS233,
    UnaryExpressionS234,
    TypeNameS235,
    UnaryExpressionS236,
    UnaryExpressionS237,
    ExpressionS238,
    ExpressionS239,
    ExpressionS240,
    ExpressionS241,
    ExpressionS242,
    ExpressionS243,
    ExpressionS244,
    ExpressionS245,
    ExpressionS246,
    ExpressionS247,
    ExpressionS248,
    ExpressionS249,
    ExpressionS250,
    ExpressionS251,
    ExpressionS252,
    ExpressionS253,
    ExpressionS254,
    ExpressionS255,
    ExpressionS256,
    ExpressionS257,
    InitializerListS258,
    IdentifierS259,
    AssignmentExpressionS260,
    ArgumentExpressionListOptS261,
    ArgumentExpressionListS262,
    ExpressionS263,
    IdentifierS264,
    ExpressionS265,
    SemicolonS266,
    ConstantExpressionS267,
    SemicolonS268,
    ColonS269,
    IdentifierS270,
    StatementS271,
    LeftParenS272,
    IdentifierS273,
    LeftParenS274,
    ExpressionOptS275,
    LeftParenS276,
    LeftParenS277,
    ColonS278,
    BlockItemS279,
    RightCurlyBracketS280,
    SemicolonS281,
    DeclaratorS282,
    PointerOptS283,
    PointerS284,
    AbstractDeclaratorOptS285,
    ParameterDeclarationKindS286,
    RightParenS287,
    RightParenS288,
    CommaS289,
    CommaS290,
    TypeQualifier0S291,
    StaticS292,
    StarS293,
    AssignmentExpressionOptS294,
    AssignmentExpressionS295,
    CommaS296,
    SemicolonS297,
    ColonS298,
    RightSquareBracketS299,
    DesignationOptS300,
    RightCurlyBracketS301,
    LeftParenS302,
    DirectAbstractDeclaratorS303,
    DirectAbstractDeclaratorOptS304,
    RightParenS305,
    ColonS306,
    CommaOptS307,
    RightParenS308,
    CommaS309,
    RightSquareBracketS310,
    ColonS311,
    StatementS312,
    WhileS313,
    SemicolonS314,
    ExpressionS315,
    DeclarationS316,
    ForInitClauseS317,
    SemicolonS318,
    ExpressionS319,
    SemicolonS320,
    ExpressionS321,
    ExpressionS322,
    StatementS323,
    LeftParenS324,
    EllipsisS325,
    ParameterDeclarationS326,
    IdentifierS327,
    AssignmentExpressionS328,
    AssignmentExpressionS329,
    RightSquareBracketS330,
    RightSquareBracketS331,
    StructDeclaratorS332,
    ConstantExpressionS333,
    InitializerS334,
    AbstractDeclaratorS335,
    LeftParenS336,
    LeftSquareBracketS337,
    ExpressionS338,
    RightCurlyBracketS339,
    AssignmentExpressionS340,
    StatementS341,
    LeftParenS342,
    SemicolonS343,
    ExpressionOptS344,
    RightParenS345,
    RightParenS346,
    RightParenS347,
    RightSquareBracketS348,
    RightSquareBracketS349,
    RightParenS350,
    ParameterTypeListOptS351,
    ParameterTypeListS352,
    StarS353,
    StaticS354,
    TypeQualifier1S355,
    TypeQualifier0S356,
    ExpressionS357,
    SemicolonS358,
    StatementS359,
    StatementS360,
    StatementS361,
    RightParenS362,
    RightSquareBracketS363,
    TypeQualifier0S364,
    StaticS365,
    AssignmentExpressionOptS366,
    RightParenS367,
    ExpressionOptS368,
    ElseS369,
    AssignmentExpressionS370,
    AssignmentExpressionS371,
    RightSquareBracketS372,
    SemicolonS373,
    RightParenS374,
    StatementS375,
    RightSquareBracketS376,
    RightSquareBracketS377,
    StatementS378,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        None
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::AutoS1 => "1:Auto",
            State::CharS2 => "2:Char",
            State::ConstS3 => "3:Const",
            State::DoubleS4 => "4:Double",
            State::EnumS5 => "5:Enum",
            State::ExternS6 => "6:Extern",
            State::FloatS7 => "7:Float",
            State::InlineS8 => "8:Inline",
            State::IntS9 => "9:Int",
            State::LongS10 => "10:Long",
            State::RegisterS11 => "11:Register",
            State::RestrictS12 => "12:Restrict",
            State::ShortS13 => "13:Short",
            State::SignedS14 => "14:Signed",
            State::StaticS15 => "15:Static",
            State::StructS16 => "16:Struct",
            State::TypedefS17 => "17:Typedef",
            State::UnderscoreBoolS18 => "18:UnderscoreBool",
            State::UnderscoreComplexS19 => "19:UnderscoreComplex",
            State::UnionS20 => "20:Union",
            State::UnsignedS21 => "21:Unsigned",
            State::VoidS22 => "22:Void",
            State::VolatileS23 => "23:Volatile",
            State::IdentifierS24 => "24:Identifier",
            State::TranslationUnitS25 => "25:TranslationUnit",
            State::ExternalDeclarationS26 => "26:ExternalDeclaration",
            State::FunctionDefinitionS27 => "27:FunctionDefinition",
            State::DeclarationSpecifier1S28 => "28:DeclarationSpecifier1",
            State::DeclarationSpecifierS29 => "29:DeclarationSpecifier",
            State::StorageClassSpecifierS30 => "30:StorageClassSpecifier",
            State::TypeSpecifierS31 => "31:TypeSpecifier",
            State::StructOrUnionSpecifierS32 => "32:StructOrUnionSpecifier",
            State::StructOrUnionS33 => "33:StructOrUnion",
            State::TypeQualifierS34 => "34:TypeQualifier",
            State::EnumSpecifierS35 => "35:EnumSpecifier",
            State::TypedefNameS36 => "36:TypedefName",
            State::FunctionSpecifierS37 => "37:FunctionSpecifier",
            State::DeclarationS38 => "38:Declaration",
            State::IdentifierS39 => "39:Identifier",
            State::IdentifierOptS40 => "40:IdentifierOpt",
            State::ExternalDeclarationS41 => "41:ExternalDeclaration",
            State::StarS42 => "42:Star",
            State::DeclarationSpecifierS43 => "43:DeclarationSpecifier",
            State::DeclaratorS44 => "44:Declarator",
            State::PointerOptS45 => "45:PointerOpt",
            State::PointerS46 => "46:Pointer",
            State::InitDeclaratorListOptS47 => "47:InitDeclaratorListOpt",
            State::InitDeclaratorListS48 => "48:InitDeclaratorList",
            State::InitDeclaratorS49 => "49:InitDeclarator",
            State::IdentifierS50 => "50:Identifier",
            State::IdentifierOptS51 => "51:IdentifierOpt",
            State::LeftCurlyBracketS52 => "52:LeftCurlyBracket",
            State::TypeQualifierS53 => "53:TypeQualifier",
            State::TypeQualifier1S54 => "54:TypeQualifier1",
            State::TypeQualifier0S55 => "55:TypeQualifier0",
            State::EqualS56 => "56:Equal",
            State::DeclarationSpecifier1S57 => "57:DeclarationSpecifier1",
            State::Declaration1S58 => "58:Declaration1",
            State::Declaration0S59 => "59:Declaration0",
            State::DeclarationS60 => "60:Declaration",
            State::LeftParenS61 => "61:LeftParen",
            State::IdentifierS62 => "62:Identifier",
            State::DirectDeclaratorS63 => "63:DirectDeclarator",
            State::SemicolonS64 => "64:Semicolon",
            State::CommaS65 => "65:Comma",
            State::LeftCurlyBracketS66 => "66:LeftCurlyBracket",
            State::IdentifierS67 => "67:Identifier",
            State::EnumeratorListS68 => "68:EnumeratorList",
            State::EnumeratorS69 => "69:Enumerator",
            State::EnumerationConstantS70 => "70:EnumerationConstant",
            State::TypeQualifierS71 => "71:TypeQualifier",
            State::PointerS72 => "72:Pointer",
            State::AmpersandS73 => "73:Ampersand",
            State::DashS74 => "74:Dash",
            State::ExclaimS75 => "75:Exclaim",
            State::LeftCurlyBracketS76 => "76:LeftCurlyBracket",
            State::LeftParenS77 => "77:LeftParen",
            State::PlusS78 => "78:Plus",
            State::SizeofS79 => "79:Sizeof",
            State::StarS80 => "80:Star",
            State::TildeS81 => "81:Tilde",
            State::DoubleDashS82 => "82:DoubleDash",
            State::DoublePlusS83 => "83:DoublePlus",
            State::NumS84 => "84:Num",
            State::IdentifierS85 => "85:Identifier",
            State::StringLiteralS86 => "86:StringLiteral",
            State::ExpressionS87 => "87:Expression",
            State::AssignmentExpressionS88 => "88:AssignmentExpression",
            State::ConditionalExpressionS89 => "89:ConditionalExpression",
            State::ArithmeticExpressionS90 => "90:ArithmeticExpression",
            State::TypeCastS91 => "91:TypeCast",
            State::UnaryExpressionS92 => "92:UnaryExpression",
            State::PrimaryExpressionS93 => "93:PrimaryExpression",
            State::InitializerS94 => "94:Initializer",
            State::DeclaratorS95 => "95:Declarator",
            State::DeclarationS96 => "96:Declaration",
            State::LeftCurlyBracketS97 => "97:LeftCurlyBracket",
            State::CompoundStatementS98 => "98:CompoundStatement",
            State::DeclaratorS99 => "99:Declarator",
            State::LeftParenS100 => "100:LeftParen",
            State::LeftSquareBracketS101 => "101:LeftSquareBracket",
            State::InitDeclaratorS102 => "102:InitDeclarator",
            State::TypeSpecifierS103 => "103:TypeSpecifier",
            State::StructDeclaration1S104 => "104:StructDeclaration1",
            State::StructDeclarationS105 => "105:StructDeclaration",
            State::SpecifierQualifierKind1S106 => "106:SpecifierQualifierKind1",
            State::SpecifierQualifierKindS107 => "107:SpecifierQualifierKind",
            State::TypeQualifierS108 => "108:TypeQualifier",
            State::CommaS109 => "109:Comma",
            State::CommaOptS110 => "110:CommaOpt",
            State::EqualS111 => "111:Equal",
            State::LeftParenS112 => "112:LeftParen",
            State::TypeCastS113 => "113:TypeCast",
            State::TypeCastOptS114 => "114:TypeCastOpt",
            State::TypeCastOptS115 => "115:TypeCastOpt",
            State::TypeCastOptS116 => "116:TypeCastOpt",
            State::DotS117 => "117:Dot",
            State::LeftSquareBracketS118 => "118:LeftSquareBracket",
            State::InitializerListS119 => "119:InitializerList",
            State::DesignationOptS120 => "120:DesignationOpt",
            State::DesignationS121 => "121:Designation",
            State::Designator1S122 => "122:Designator1",
            State::DesignatorS123 => "123:Designator",
            State::IdentifierS124 => "124:Identifier",
            State::SpecifierQualifierKind1S125 => "125:SpecifierQualifierKind1",
            State::ExpressionS126 => "126:Expression",
            State::AssignmentExpressionS127 => "127:AssignmentExpression",
            State::TypeNameS128 => "128:TypeName",
            State::TypeCastOptS129 => "129:TypeCastOpt",
            State::LeftParenS130 => "130:LeftParen",
            State::ExpressionS131 => "131:Expression",
            State::TypeCastOptS132 => "132:TypeCastOpt",
            State::TypeCastOptS133 => "133:TypeCastOpt",
            State::UnaryExpressionS134 => "134:UnaryExpression",
            State::UnaryExpressionS135 => "135:UnaryExpression",
            State::AmpersandS136 => "136:Ampersand",
            State::CaretS137 => "137:Caret",
            State::CommaS138 => "138:Comma",
            State::DashS139 => "139:Dash",
            State::LeftBracketS140 => "140:LeftBracket",
            State::PercentS141 => "141:Percent",
            State::PlusS142 => "142:Plus",
            State::QuestionS143 => "143:Question",
            State::RightBracketS144 => "144:RightBracket",
            State::SlashS145 => "145:Slash",
            State::StarS146 => "146:Star",
            State::VerticalBarS147 => "147:VerticalBar",
            State::DoubleAmpersandS148 => "148:DoubleAmpersand",
            State::DoubleEqualS149 => "149:DoubleEqual",
            State::DoubleLeftS150 => "150:DoubleLeft",
            State::DoubleRightS151 => "151:DoubleRight",
            State::DoubleVerticalBarS152 => "152:DoubleVerticalBar",
            State::ExclaimEqualS153 => "153:ExclaimEqual",
            State::LeftBracketEqualS154 => "154:LeftBracketEqual",
            State::RightBracketEqualS155 => "155:RightBracketEqual",
            State::LeftCurlyBracketS156 => "156:LeftCurlyBracket",
            State::DotS157 => "157:Dot",
            State::EqualS158 => "158:Equal",
            State::LeftParenS159 => "159:LeftParen",
            State::LeftSquareBracketS160 => "160:LeftSquareBracket",
            State::AmpersandEqualS161 => "161:AmpersandEqual",
            State::CaretEqualS162 => "162:CaretEqual",
            State::DashEqualS163 => "163:DashEqual",
            State::DashRightBracketS164 => "164:DashRightBracket",
            State::DoubleDashS165 => "165:DoubleDash",
            State::DoublePlusS166 => "166:DoublePlus",
            State::PercentEqualS167 => "167:PercentEqual",
            State::PlusEqualS168 => "168:PlusEqual",
            State::SlashEqualS169 => "169:SlashEqual",
            State::StarEqualS170 => "170:StarEqual",
            State::VerticalBarEqualS171 => "171:VerticalBarEqual",
            State::DoubleLeftEqualS172 => "172:DoubleLeftEqual",
            State::DoubleRightEqualS173 => "173:DoubleRightEqual",
            State::AssignmentOperatorsS174 => "174:AssignmentOperators",
            State::BreakS175 => "175:Break",
            State::CaseS176 => "176:Case",
            State::ContinueS177 => "177:Continue",
            State::DefaultS178 => "178:Default",
            State::DoS179 => "179:Do",
            State::ForS180 => "180:For",
            State::GotoS181 => "181:Goto",
            State::IfS182 => "182:If",
            State::ReturnS183 => "183:Return",
            State::SwitchS184 => "184:Switch",
            State::WhileS185 => "185:While",
            State::IdentifierS186 => "186:Identifier",
            State::ExpressionS187 => "187:Expression",
            State::DeclarationS188 => "188:Declaration",
            State::CompoundStatementS189 => "189:CompoundStatement",
            State::BlockItem1S190 => "190:BlockItem1",
            State::BlockItem0S191 => "191:BlockItem0",
            State::BlockItemS192 => "192:BlockItem",
            State::StatementS193 => "193:Statement",
            State::ExpressionOptS194 => "194:ExpressionOpt",
            State::RightParenS195 => "195:RightParen",
            State::IdentifierS196 => "196:Identifier",
            State::DeclarationSpecifier1S197 => "197:DeclarationSpecifier1",
            State::IdentifierListOptS198 => "198:IdentifierListOpt",
            State::ParameterTypeListS199 => "199:ParameterTypeList",
            State::ParameterListS200 => "200:ParameterList",
            State::ParameterDeclarationS201 => "201:ParameterDeclaration",
            State::IdentifierListS202 => "202:IdentifierList",
            State::StaticS203 => "203:Static",
            State::TypeQualifier1S204 => "204:TypeQualifier1",
            State::TypeQualifier0S205 => "205:TypeQualifier0",
            State::RightCurlyBracketS206 => "206:RightCurlyBracket",
            State::StructDeclarationS207 => "207:StructDeclaration",
            State::SpecifierQualifierKindS208 => "208:SpecifierQualifierKind",
            State::StructDeclaratorListS209 => "209:StructDeclaratorList",
            State::StructDeclaratorS210 => "210:StructDeclarator",
            State::DeclaratorOptS211 => "211:DeclaratorOpt",
            State::DeclaratorS212 => "212:Declarator",
            State::EnumeratorS213 => "213:Enumerator",
            State::RightCurlyBracketS214 => "214:RightCurlyBracket",
            State::ConditionalExpressionS215 => "215:ConditionalExpression",
            State::UnaryExpressionS216 => "216:UnaryExpression",
            State::ConstantExpressionS217 => "217:ConstantExpression",
            State::UnaryExpressionS218 => "218:UnaryExpression",
            State::UnaryExpressionS219 => "219:UnaryExpression",
            State::UnaryExpressionS220 => "220:UnaryExpression",
            State::IdentifierS221 => "221:Identifier",
            State::ConstantExpressionS222 => "222:ConstantExpression",
            State::CommaS223 => "223:Comma",
            State::CommaOptS224 => "224:CommaOpt",
            State::InitializerS225 => "225:Initializer",
            State::EqualS226 => "226:Equal",
            State::DesignatorS227 => "227:Designator",
            State::PointerOptS228 => "228:PointerOpt",
            State::PointerS229 => "229:Pointer",
            State::AbstractDeclaratorOptS230 => "230:AbstractDeclaratorOpt",
            State::AbstractDeclaratorS231 => "231:AbstractDeclarator",
            State::RightParenS232 => "232:RightParen",
            State::RightParenS233 => "233:RightParen",
            State::UnaryExpressionS234 => "234:UnaryExpression",
            State::TypeNameS235 => "235:TypeName",
            State::UnaryExpressionS236 => "236:UnaryExpression",
            State::UnaryExpressionS237 => "237:UnaryExpression",
            State::ExpressionS238 => "238:Expression",
            State::ExpressionS239 => "239:Expression",
            State::ExpressionS240 => "240:Expression",
            State::ExpressionS241 => "241:Expression",
            State::ExpressionS242 => "242:Expression",
            State::ExpressionS243 => "243:Expression",
            State::ExpressionS244 => "244:Expression",
            State::ExpressionS245 => "245:Expression",
            State::ExpressionS246 => "246:Expression",
            State::ExpressionS247 => "247:Expression",
            State::ExpressionS248 => "248:Expression",
            State::ExpressionS249 => "249:Expression",
            State::ExpressionS250 => "250:Expression",
            State::ExpressionS251 => "251:Expression",
            State::ExpressionS252 => "252:Expression",
            State::ExpressionS253 => "253:Expression",
            State::ExpressionS254 => "254:Expression",
            State::ExpressionS255 => "255:Expression",
            State::ExpressionS256 => "256:Expression",
            State::ExpressionS257 => "257:Expression",
            State::InitializerListS258 => "258:InitializerList",
            State::IdentifierS259 => "259:Identifier",
            State::AssignmentExpressionS260 => "260:AssignmentExpression",
            State::ArgumentExpressionListOptS261 => "261:ArgumentExpressionListOpt",
            State::ArgumentExpressionListS262 => "262:ArgumentExpressionList",
            State::ExpressionS263 => "263:Expression",
            State::IdentifierS264 => "264:Identifier",
            State::ExpressionS265 => "265:Expression",
            State::SemicolonS266 => "266:Semicolon",
            State::ConstantExpressionS267 => "267:ConstantExpression",
            State::SemicolonS268 => "268:Semicolon",
            State::ColonS269 => "269:Colon",
            State::IdentifierS270 => "270:Identifier",
            State::StatementS271 => "271:Statement",
            State::LeftParenS272 => "272:LeftParen",
            State::IdentifierS273 => "273:Identifier",
            State::LeftParenS274 => "274:LeftParen",
            State::ExpressionOptS275 => "275:ExpressionOpt",
            State::LeftParenS276 => "276:LeftParen",
            State::LeftParenS277 => "277:LeftParen",
            State::ColonS278 => "278:Colon",
            State::BlockItemS279 => "279:BlockItem",
            State::RightCurlyBracketS280 => "280:RightCurlyBracket",
            State::SemicolonS281 => "281:Semicolon",
            State::DeclaratorS282 => "282:Declarator",
            State::PointerOptS283 => "283:PointerOpt",
            State::PointerS284 => "284:Pointer",
            State::AbstractDeclaratorOptS285 => "285:AbstractDeclaratorOpt",
            State::ParameterDeclarationKindS286 => "286:ParameterDeclarationKind",
            State::RightParenS287 => "287:RightParen",
            State::RightParenS288 => "288:RightParen",
            State::CommaS289 => "289:Comma",
            State::CommaS290 => "290:Comma",
            State::TypeQualifier0S291 => "291:TypeQualifier0",
            State::StaticS292 => "292:Static",
            State::StarS293 => "293:Star",
            State::AssignmentExpressionOptS294 => "294:AssignmentExpressionOpt",
            State::AssignmentExpressionS295 => "295:AssignmentExpression",
            State::CommaS296 => "296:Comma",
            State::SemicolonS297 => "297:Semicolon",
            State::ColonS298 => "298:Colon",
            State::RightSquareBracketS299 => "299:RightSquareBracket",
            State::DesignationOptS300 => "300:DesignationOpt",
            State::RightCurlyBracketS301 => "301:RightCurlyBracket",
            State::LeftParenS302 => "302:LeftParen",
            State::DirectAbstractDeclaratorS303 => "303:DirectAbstractDeclarator",
            State::DirectAbstractDeclaratorOptS304 => "304:DirectAbstractDeclaratorOpt",
            State::RightParenS305 => "305:RightParen",
            State::ColonS306 => "306:Colon",
            State::CommaOptS307 => "307:CommaOpt",
            State::RightParenS308 => "308:RightParen",
            State::CommaS309 => "309:Comma",
            State::RightSquareBracketS310 => "310:RightSquareBracket",
            State::ColonS311 => "311:Colon",
            State::StatementS312 => "312:Statement",
            State::WhileS313 => "313:While",
            State::SemicolonS314 => "314:Semicolon",
            State::ExpressionS315 => "315:Expression",
            State::DeclarationS316 => "316:Declaration",
            State::ForInitClauseS317 => "317:ForInitClause",
            State::SemicolonS318 => "318:Semicolon",
            State::ExpressionS319 => "319:Expression",
            State::SemicolonS320 => "320:Semicolon",
            State::ExpressionS321 => "321:Expression",
            State::ExpressionS322 => "322:Expression",
            State::StatementS323 => "323:Statement",
            State::LeftParenS324 => "324:LeftParen",
            State::EllipsisS325 => "325:Ellipsis",
            State::ParameterDeclarationS326 => "326:ParameterDeclaration",
            State::IdentifierS327 => "327:Identifier",
            State::AssignmentExpressionS328 => "328:AssignmentExpression",
            State::AssignmentExpressionS329 => "329:AssignmentExpression",
            State::RightSquareBracketS330 => "330:RightSquareBracket",
            State::RightSquareBracketS331 => "331:RightSquareBracket",
            State::StructDeclaratorS332 => "332:StructDeclarator",
            State::ConstantExpressionS333 => "333:ConstantExpression",
            State::InitializerS334 => "334:Initializer",
            State::AbstractDeclaratorS335 => "335:AbstractDeclarator",
            State::LeftParenS336 => "336:LeftParen",
            State::LeftSquareBracketS337 => "337:LeftSquareBracket",
            State::ExpressionS338 => "338:Expression",
            State::RightCurlyBracketS339 => "339:RightCurlyBracket",
            State::AssignmentExpressionS340 => "340:AssignmentExpression",
            State::StatementS341 => "341:Statement",
            State::LeftParenS342 => "342:LeftParen",
            State::SemicolonS343 => "343:Semicolon",
            State::ExpressionOptS344 => "344:ExpressionOpt",
            State::RightParenS345 => "345:RightParen",
            State::RightParenS346 => "346:RightParen",
            State::RightParenS347 => "347:RightParen",
            State::RightSquareBracketS348 => "348:RightSquareBracket",
            State::RightSquareBracketS349 => "349:RightSquareBracket",
            State::RightParenS350 => "350:RightParen",
            State::ParameterTypeListOptS351 => "351:ParameterTypeListOpt",
            State::ParameterTypeListS352 => "352:ParameterTypeList",
            State::StarS353 => "353:Star",
            State::StaticS354 => "354:Static",
            State::TypeQualifier1S355 => "355:TypeQualifier1",
            State::TypeQualifier0S356 => "356:TypeQualifier0",
            State::ExpressionS357 => "357:Expression",
            State::SemicolonS358 => "358:Semicolon",
            State::StatementS359 => "359:Statement",
            State::StatementS360 => "360:Statement",
            State::StatementS361 => "361:Statement",
            State::RightParenS362 => "362:RightParen",
            State::RightSquareBracketS363 => "363:RightSquareBracket",
            State::TypeQualifier0S364 => "364:TypeQualifier0",
            State::StaticS365 => "365:Static",
            State::AssignmentExpressionOptS366 => "366:AssignmentExpressionOpt",
            State::RightParenS367 => "367:RightParen",
            State::ExpressionOptS368 => "368:ExpressionOpt",
            State::ElseS369 => "369:Else",
            State::AssignmentExpressionS370 => "370:AssignmentExpression",
            State::AssignmentExpressionS371 => "371:AssignmentExpression",
            State::RightSquareBracketS372 => "372:RightSquareBracket",
            State::SemicolonS373 => "373:Semicolon",
            State::RightParenS374 => "374:RightParen",
            State::StatementS375 => "375:Statement",
            State::RightSquareBracketS376 => "376:RightSquareBracket",
            State::RightSquareBracketS377 => "377:RightSquareBracket",
            State::StatementS378 => "378:Statement",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    Ampersand,
    Caret,
    Colon,
    Comma,
    Dash,
    Dot,
    Equal,
    Exclaim,
    LeftBracket,
    LeftCurlyBracket,
    LeftParen,
    LeftSquareBracket,
    Percent,
    Plus,
    Question,
    RightBracket,
    RightCurlyBracket,
    RightParen,
    RightSquareBracket,
    Semicolon,
    Sizeof,
    Slash,
    Star,
    Tilde,
    VerticalBar,
    AmpersandEqual,
    CaretEqual,
    DashEqual,
    DashRightBracket,
    DoubleAmpersand,
    DoubleEqual,
    DoubleLeft,
    DoubleDash,
    DoublePlus,
    DoubleRight,
    DoubleVerticalBar,
    ExclaimEqual,
    LeftBracketEqual,
    PercentEqual,
    PlusEqual,
    RightBracketEqual,
    SlashEqual,
    StarEqual,
    VerticalBarEqual,
    Ellipsis,
    DoubleLeftEqual,
    DoubleRightEqual,
    Auto,
    Break,
    Case,
    Char,
    Const,
    Continue,
    Default,
    Do,
    Double,
    Else,
    Enum,
    Extern,
    Float,
    For,
    Goto,
    If,
    Inline,
    Int,
    Long,
    Register,
    Restrict,
    Return,
    Short,
    Signed,
    Static,
    Struct,
    Switch,
    Typedef,
    UnderscoreBool,
    UnderscoreComplex,
    Union,
    Unsigned,
    Void,
    Volatile,
    While,
    Num(grammar_c_actions::Num),
    Identifier(grammar_c_actions::Identifier),
    StringLiteral(grammar_c_actions::StringLiteral),
}
#[derive(Debug)]
pub enum NonTerminal {
    TranslationUnit(grammar_c_actions::TranslationUnit),
    ExternalDeclaration(grammar_c_actions::ExternalDeclaration),
    FunctionDefinition(grammar_c_actions::FunctionDefinition),
    DeclarationSpecifier1(grammar_c_actions::DeclarationSpecifier1),
    Declaration1(grammar_c_actions::Declaration1),
    Declaration0(grammar_c_actions::Declaration0),
    DeclarationSpecifier(grammar_c_actions::DeclarationSpecifier),
    StorageClassSpecifier(grammar_c_actions::StorageClassSpecifier),
    TypeSpecifier(grammar_c_actions::TypeSpecifier),
    StructOrUnionSpecifier(grammar_c_actions::StructOrUnionSpecifier),
    IdentifierOpt(grammar_c_actions::IdentifierOpt),
    StructDeclaration1(grammar_c_actions::StructDeclaration1),
    StructOrUnion(grammar_c_actions::StructOrUnion),
    StructDeclaration(grammar_c_actions::StructDeclaration),
    SpecifierQualifierKind1(grammar_c_actions::SpecifierQualifierKind1),
    SpecifierQualifierKind(grammar_c_actions::SpecifierQualifierKind),
    TypeQualifier(grammar_c_actions::TypeQualifier),
    StructDeclaratorList(grammar_c_actions::StructDeclaratorList),
    StructDeclarator(grammar_c_actions::StructDeclarator),
    DeclaratorOpt(grammar_c_actions::DeclaratorOpt),
    Declarator(grammar_c_actions::Declarator),
    PointerOpt(grammar_c_actions::PointerOpt),
    Pointer(grammar_c_actions::Pointer),
    TypeQualifier1(grammar_c_actions::TypeQualifier1),
    TypeQualifier0(grammar_c_actions::TypeQualifier0),
    DirectDeclarator(grammar_c_actions::DirectDeclarator),
    AssignmentExpressionOpt(grammar_c_actions::AssignmentExpressionOpt),
    IdentifierListOpt(grammar_c_actions::IdentifierListOpt),
    Expression(grammar_c_actions::Expression),
    AssignmentOperators(grammar_c_actions::AssignmentOperators),
    AssignmentExpression(grammar_c_actions::AssignmentExpression),
    ConditionalExpression(grammar_c_actions::ConditionalExpression),
    ArithmeticExpression(grammar_c_actions::ArithmeticExpression),
    TypeCast(grammar_c_actions::TypeCast),
    UnaryExpression(grammar_c_actions::UnaryExpression),
    TypeCastOpt(grammar_c_actions::TypeCastOpt),
    ArgumentExpressionListOpt(grammar_c_actions::ArgumentExpressionListOpt),
    CommaOpt(grammar_c_actions::CommaOpt),
    PrimaryExpression(grammar_c_actions::PrimaryExpression),
    ArgumentExpressionList(grammar_c_actions::ArgumentExpressionList),
    TypeName(grammar_c_actions::TypeName),
    AbstractDeclaratorOpt(grammar_c_actions::AbstractDeclaratorOpt),
    AbstractDeclarator(grammar_c_actions::AbstractDeclarator),
    DirectAbstractDeclarator(grammar_c_actions::DirectAbstractDeclarator),
    DirectAbstractDeclaratorOpt(grammar_c_actions::DirectAbstractDeclaratorOpt),
    ParameterTypeListOpt(grammar_c_actions::ParameterTypeListOpt),
    ParameterTypeList(grammar_c_actions::ParameterTypeList),
    ParameterList(grammar_c_actions::ParameterList),
    ParameterDeclarationKind(grammar_c_actions::ParameterDeclarationKind),
    ParameterDeclaration(grammar_c_actions::ParameterDeclaration),
    InitializerList(grammar_c_actions::InitializerList),
    DesignationOpt(grammar_c_actions::DesignationOpt),
    Designation(grammar_c_actions::Designation),
    Designator1(grammar_c_actions::Designator1),
    Designator(grammar_c_actions::Designator),
    ConstantExpression(grammar_c_actions::ConstantExpression),
    Initializer(grammar_c_actions::Initializer),
    IdentifierList(grammar_c_actions::IdentifierList),
    EnumSpecifier(grammar_c_actions::EnumSpecifier),
    EnumeratorList(grammar_c_actions::EnumeratorList),
    Enumerator(grammar_c_actions::Enumerator),
    EnumerationConstant(grammar_c_actions::EnumerationConstant),
    TypedefName(grammar_c_actions::TypedefName),
    FunctionSpecifier(grammar_c_actions::FunctionSpecifier),
    Declaration(grammar_c_actions::Declaration),
    InitDeclaratorListOpt(grammar_c_actions::InitDeclaratorListOpt),
    InitDeclaratorList(grammar_c_actions::InitDeclaratorList),
    InitDeclarator(grammar_c_actions::InitDeclarator),
    CompoundStatement(grammar_c_actions::CompoundStatement),
    BlockItem1(grammar_c_actions::BlockItem1),
    BlockItem0(grammar_c_actions::BlockItem0),
    BlockItem(grammar_c_actions::BlockItem),
    Statement(grammar_c_actions::Statement),
    ExpressionOpt(grammar_c_actions::ExpressionOpt),
    ForInitClause(grammar_c_actions::ForInitClause),
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct GrammarCParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS24)]),
        _ => vec![],
    }
}
fn action_auto_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        _ => vec![],
    }
}
fn action_char_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        _ => vec![],
    }
}
fn action_const_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        _ => vec![],
    }
}
fn action_double_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        _ => vec![],
    }
}
fn action_enum_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::IdentifierOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS39)]),
        _ => vec![],
    }
}
fn action_extern_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        _ => vec![],
    }
}
fn action_float_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        _ => vec![],
    }
}
fn action_inline_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        _ => vec![],
    }
}
fn action_int_s9(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        _ => vec![],
    }
}
fn action_long_s10(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        _ => vec![],
    }
}
fn action_register_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        _ => vec![],
    }
}
fn action_restrict_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        _ => vec![],
    }
}
fn action_short_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        _ => vec![],
    }
}
fn action_signed_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        _ => vec![],
    }
}
fn action_static_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        _ => vec![],
    }
}
fn action_struct_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StructOrUnionP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StructOrUnionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_typedef_s17(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        _ => vec![],
    }
}
fn action_underscorebool_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        _ => vec![],
    }
}
fn action_underscorecomplex_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        _ => vec![],
    }
}
fn action_union_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StructOrUnionP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StructOrUnionP2, 1usize)]),
        _ => vec![],
    }
}
fn action_unsigned_s21(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        _ => vec![],
    }
}
fn action_void_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        _ => vec![],
    }
}
fn action_volatile_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        _ => vec![],
    }
}
fn action_identifier_s24(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        _ => vec![],
    }
}
fn action_translationunit_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS24)]),
        _ => vec![],
    }
}
fn action_externaldeclaration_s26(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        _ => vec![],
    }
}
fn action_functiondefinition_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        _ => vec![],
    }
}
fn action_declarationspecifier1_s28(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorListOptP2, 0usize)]),
        TK::Star => Vec::from(&[Shift(State::StarS42)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => {
            Vec::from(&[Shift(State::IdentifierS24), Reduce(PK::PointerOptP2, 0usize)])
        }
        _ => vec![],
    }
}
fn action_declarationspecifier_s29(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationSpecifier1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_storageclassspecifier_s30(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationSpecifierP1, 1usize)]),
        _ => vec![],
    }
}
fn action_typespecifier_s31(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationSpecifierP2, 1usize)]),
        _ => vec![],
    }
}
fn action_structorunionspecifier_s32(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        _ => vec![],
    }
}
fn action_structorunion_s33(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::IdentifierOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS50)]),
        _ => vec![],
    }
}
fn action_typequalifier_s34(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationSpecifierP3, 1usize)]),
        _ => vec![],
    }
}
fn action_enumspecifier_s35(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        _ => vec![],
    }
}
fn action_typedefname_s36(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        _ => vec![],
    }
}
fn action_functionspecifier_s37(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationSpecifierP4, 1usize)]),
        _ => vec![],
    }
}
fn action_declaration_s38(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        _ => vec![],
    }
}
fn action_identifier_s39(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::IdentifierOptP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        _ => vec![],
    }
}
fn action_identifieropt_s40(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS52)]),
        _ => vec![],
    }
}
fn action_externaldeclaration_s41(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        _ => vec![],
    }
}
fn action_star_s42(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::PointerP1, 1usize), Reduce(PK::TypeQualifier0P2, 0usize)],
            )
        }
        TK::LeftParen => {
            Vec::from(
                &[Reduce(PK::PointerP1, 1usize), Reduce(PK::TypeQualifier0P2, 0usize)],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[Reduce(PK::PointerP1, 1usize), Reduce(PK::TypeQualifier0P2, 0usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::PointerP1, 1usize), Reduce(PK::TypeQualifier0P2, 0usize)],
            )
        }
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => {
            Vec::from(
                &[Reduce(PK::PointerP1, 1usize), Reduce(PK::TypeQualifier0P2, 0usize)],
            )
        }
        _ => vec![],
    }
}
fn action_declarationspecifier_s43(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationSpecifier1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_declarator_s44(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitDeclaratorP1, 1usize)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS56)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::Declaration0P2, 0usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorP1, 1usize)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS24)]),
        _ => vec![],
    }
}
fn action_pointeropt_s45(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS61)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS62)]),
        _ => vec![],
    }
}
fn action_pointer_s46(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_initdeclaratorlistopt_s47(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS64)]),
        _ => vec![],
    }
}
fn action_initdeclaratorlist_s48(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS65)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorListOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_initdeclarator_s49(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitDeclaratorListP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_identifier_s50(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::IdentifierOptP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        _ => vec![],
    }
}
fn action_identifieropt_s51(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS66)]),
        _ => vec![],
    }
}
fn action_leftcurlybracket_s52(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS67)]),
        _ => vec![],
    }
}
fn action_typequalifier_s53(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeQualifier1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_typequalifier1_s54(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        _ => vec![],
    }
}
fn action_typequalifier0_s55(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::PointerP1, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerP1, 2usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerP1, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PointerP1, 2usize)]),
        TK::Star => Vec::from(&[Shift(State::StarS42)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerP1, 2usize)]),
        _ => vec![],
    }
}
fn action_equal_s56(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS76)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_declarationspecifier1_s57(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorListOptP2, 0usize)]),
        TK::Star => Vec::from(&[Shift(State::StarS42)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => {
            Vec::from(&[Shift(State::IdentifierS24), Reduce(PK::PointerOptP2, 0usize)])
        }
        _ => vec![],
    }
}
fn action_declaration1_s58(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::Declaration0P1, 1usize)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS24)]),
        _ => vec![],
    }
}
fn action_declaration0_s59(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        _ => vec![],
    }
}
fn action_declaration_s60(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::Declaration1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_leftparen_s61(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Star => Vec::from(&[Shift(State::StarS42)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_identifier_s62(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        _ => vec![],
    }
}
fn action_directdeclarator_s63(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS100)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS101)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        _ => vec![],
    }
}
fn action_semicolon_s64(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Break => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Case => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Default => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Do => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::For => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::If => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Return => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::While => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        _ => vec![],
    }
}
fn action_comma_s65(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Star => Vec::from(&[Shift(State::StarS42)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_leftcurlybracket_s66(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS24)]),
        _ => vec![],
    }
}
fn action_identifier_s67(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::EnumerationConstantP1, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::EnumerationConstantP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::EnumerationConstantP1, 1usize)]),
        _ => vec![],
    }
}
fn action_enumeratorlist_s68(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS109)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CommaOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_enumerator_s69(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::EnumeratorListP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::EnumeratorListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_enumerationconstant_s70(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::EnumeratorP1, 1usize)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS111)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::EnumeratorP1, 1usize)]),
        _ => vec![],
    }
}
fn action_typequalifier_s71(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeQualifier1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_pointer_s72(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::PointerP2, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerP2, 3usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerP2, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PointerP2, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerP2, 3usize)]),
        _ => vec![],
    }
}
fn action_ampersand_s73(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::LeftParen => {
            Vec::from(&[Shift(State::LeftParenS112), Reduce(PK::TypeCastOptP2, 0usize)])
        }
        TK::Plus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_dash_s74(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::LeftParen => {
            Vec::from(&[Shift(State::LeftParenS112), Reduce(PK::TypeCastOptP2, 0usize)])
        }
        TK::Plus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_exclaim_s75(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::LeftParen => {
            Vec::from(&[Shift(State::LeftParenS112), Reduce(PK::TypeCastOptP2, 0usize)])
        }
        TK::Plus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_leftcurlybracket_s76(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS117)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS118)]),
        TK::Plus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_leftparen_s77(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS124)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_plus_s78(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::LeftParen => {
            Vec::from(&[Shift(State::LeftParenS112), Reduce(PK::TypeCastOptP2, 0usize)])
        }
        TK::Plus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_sizeof_s79(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS130)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_star_s80(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::LeftParen => {
            Vec::from(&[Shift(State::LeftParenS112), Reduce(PK::TypeCastOptP2, 0usize)])
        }
        TK::Plus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_tilde_s81(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::LeftParen => {
            Vec::from(&[Shift(State::LeftParenS112), Reduce(PK::TypeCastOptP2, 0usize)])
        }
        TK::Plus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_doubledash_s82(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_doubleplus_s83(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_num_s84(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)])
        }
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::AmpersandEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::CaretEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)])
        }
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::PercentEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)])
        }
        TK::SlashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::VerticalBarEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleLeftEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleRightEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        _ => vec![],
    }
}
fn action_identifier_s85(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::CaretEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::PercentEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::SlashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        _ => vec![],
    }
}
fn action_stringliteral_s86(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::LeftParen => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::DashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::PlusEqual => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::StarEqual => Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)]),
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionStringLiteral, 1usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s87(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS138)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS148)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s88(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::InitializerP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::InitializerP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitializerP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        _ => vec![],
    }
}
fn action_conditionalexpression_s89(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::AmpersandEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::CaretEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::PercentEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::SlashEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::VerticalBarEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleLeftEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleRightEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_arithmeticexpression_s90(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::Percent => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::AmpersandEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::CaretEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::PercentEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::SlashEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::VerticalBarEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleLeftEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleRightEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_typecast_s91(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS156)]),
        _ => vec![],
    }
}
fn action_unaryexpression_s92(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS157)]),
        TK::Equal => {
            Vec::from(
                &[Shift(State::EqualS158), Reduce(PK::ArithmeticExpressionP1, 1usize)],
            )
        }
        TK::LeftBracket => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS159)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS160)]),
        TK::Percent => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::AmpersandEqual => {
            Vec::from(
                &[
                    Shift(State::AmpersandEqualS161),
                    Reduce(PK::ArithmeticExpressionP1, 1usize),
                ],
            )
        }
        TK::CaretEqual => {
            Vec::from(
                &[
                    Shift(State::CaretEqualS162),
                    Reduce(PK::ArithmeticExpressionP1, 1usize),
                ],
            )
        }
        TK::DashEqual => {
            Vec::from(
                &[
                    Shift(State::DashEqualS163),
                    Reduce(PK::ArithmeticExpressionP1, 1usize),
                ],
            )
        }
        TK::DashRightBracket => Vec::from(&[Shift(State::DashRightBracketS164)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS165)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS166)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::PercentEqual => {
            Vec::from(
                &[
                    Shift(State::PercentEqualS167),
                    Reduce(PK::ArithmeticExpressionP1, 1usize),
                ],
            )
        }
        TK::PlusEqual => {
            Vec::from(
                &[
                    Shift(State::PlusEqualS168),
                    Reduce(PK::ArithmeticExpressionP1, 1usize),
                ],
            )
        }
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::SlashEqual => {
            Vec::from(
                &[
                    Shift(State::SlashEqualS169),
                    Reduce(PK::ArithmeticExpressionP1, 1usize),
                ],
            )
        }
        TK::StarEqual => {
            Vec::from(
                &[
                    Shift(State::StarEqualS170),
                    Reduce(PK::ArithmeticExpressionP1, 1usize),
                ],
            )
        }
        TK::VerticalBarEqual => {
            Vec::from(
                &[
                    Shift(State::VerticalBarEqualS171),
                    Reduce(PK::ArithmeticExpressionP1, 1usize),
                ],
            )
        }
        TK::DoubleLeftEqual => {
            Vec::from(
                &[
                    Shift(State::DoubleLeftEqualS172),
                    Reduce(PK::ArithmeticExpressionP1, 1usize),
                ],
            )
        }
        TK::DoubleRightEqual => {
            Vec::from(
                &[
                    Shift(State::DoubleRightEqualS173),
                    Reduce(PK::ArithmeticExpressionP1, 1usize),
                ],
            )
        }
        _ => vec![],
    }
}
fn action_primaryexpression_s93(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::AmpersandEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::CaretEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::PercentEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::SlashEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::VerticalBarEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleLeftEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleRightEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_initializer_s94(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitDeclaratorP2, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorP2, 3usize)]),
        _ => vec![],
    }
}
fn action_declarator_s95(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitDeclaratorP1, 1usize)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS56)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorP1, 1usize)]),
        _ => vec![],
    }
}
fn action_declaration_s96(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::Declaration1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_leftcurlybracket_s97(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::BlockItem0P2, 0usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Break => Vec::from(&[Shift(State::BreakS175)]),
        TK::Case => Vec::from(&[Shift(State::CaseS176)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS177)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS178)]),
        TK::Do => Vec::from(&[Shift(State::DoS179)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::For => Vec::from(&[Shift(State::ForS180)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS181)]),
        TK::If => Vec::from(&[Shift(State::IfS182)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS183)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS184)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::While => Vec::from(&[Shift(State::WhileS185)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS186)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_compoundstatement_s98(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Char => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Const => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Double => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Float => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Int => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Long => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Register => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Short => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Static => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Union => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Void => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        _ => vec![],
    }
}
fn action_declarator_s99(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS195)]),
        _ => vec![],
    }
}
fn action_leftparen_s100(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::IdentifierListOptP2, 0usize)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS196)]),
        _ => vec![],
    }
}
fn action_leftsquarebracket_s101(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Static => Vec::from(&[Shift(State::StaticS203)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_initdeclarator_s102(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitDeclaratorListP2, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorListP2, 3usize)]),
        _ => vec![],
    }
}
fn action_typespecifier_s103(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::SpecifierQualifierKindP1, 1usize)]),
        _ => vec![],
    }
}
fn action_structdeclaration1_s104(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightCurlyBracket => Vec::from(&[Shift(State::RightCurlyBracketS206)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS24)]),
        _ => vec![],
    }
}
fn action_structdeclaration_s105(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StructDeclaration1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_specifierqualifierkind1_s106(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DeclaratorOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Star => Vec::from(&[Shift(State::StarS42)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => {
            Vec::from(&[Shift(State::IdentifierS24), Reduce(PK::PointerOptP2, 0usize)])
        }
        _ => vec![],
    }
}
fn action_specifierqualifierkind_s107(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_typequalifier_s108(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::SpecifierQualifierKindP2, 1usize)]),
        _ => vec![],
    }
}
fn action_comma_s109(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CommaOptP1, 1usize)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS67)]),
        _ => vec![],
    }
}
fn action_commaopt_s110(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightCurlyBracket => Vec::from(&[Shift(State::RightCurlyBracketS214)]),
        _ => vec![],
    }
}
fn action_equal_s111(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_leftparen_s112(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS24)]),
        _ => vec![],
    }
}
fn action_typecast_s113(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeCastOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_typecastopt_s114(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_typecastopt_s115(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_typecastopt_s116(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_dot_s117(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS221)]),
        _ => vec![],
    }
}
fn action_leftsquarebracket_s118(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_initializerlist_s119(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS223)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CommaOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_designationopt_s120(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS76)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_designation_s121(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_designator1_s122(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Dot => Vec::from(&[Shift(State::DotS117)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS226)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS118)]),
        _ => vec![],
    }
}
fn action_designator_s123(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Dot => Vec::from(&[Reduce(PK::Designator1P2, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::Designator1P2, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::Designator1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_identifier_s124(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftParen => {
            Vec::from(
                &[
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Star => {
            Vec::from(
                &[
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::CaretEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::PercentEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::SlashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Auto => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        _ => vec![],
    }
}
fn action_specifierqualifierkind1_s125(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::TypeNameP1, 1usize),
                    Reduce(PK::AbstractDeclaratorOptP2, 0usize),
                ],
            )
        }
        TK::Star => Vec::from(&[Shift(State::StarS42)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS24)]),
        _ => vec![],
    }
}
fn action_expression_s126(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS138)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightParen => Vec::from(&[Shift(State::RightParenS232)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS148)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s127(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::AmpersandEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::CaretEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::PercentEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::SlashEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::VerticalBarEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleLeftEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleRightEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        _ => vec![],
    }
}
fn action_typename_s128(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS233)]),
        _ => vec![],
    }
}
fn action_typecastopt_s129(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_leftparen_s130(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS124)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_expression_s131(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Dot => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_typecastopt_s132(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_typecastopt_s133(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_unaryexpression_s134(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Dot => Vec::from(&[Shift(State::DotS157)]),
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS159)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS160)]),
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DashRightBracket => Vec::from(&[Shift(State::DashRightBracketS164)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS165)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS166)]),
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_unaryexpression_s135(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Dot => Vec::from(&[Shift(State::DotS157)]),
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS159)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS160)]),
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DashRightBracket => Vec::from(&[Shift(State::DashRightBracketS164)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS165)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS166)]),
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_ampersand_s136(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_caret_s137(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_comma_s138(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_dash_s139(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_leftbracket_s140(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_percent_s141(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_plus_s142(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_question_s143(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_rightbracket_s144(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_slash_s145(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_star_s146(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_verticalbar_s147(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_doubleampersand_s148(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_doubleequal_s149(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_doubleleft_s150(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_doubleright_s151(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_doubleverticalbar_s152(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_exclaimequal_s153(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_leftbracketequal_s154(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_rightbracketequal_s155(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_leftcurlybracket_s156(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS117)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS118)]),
        TK::Plus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_dot_s157(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS259)]),
        _ => vec![],
    }
}
fn action_equal_s158(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::AssignmentOperatorsP1, 1usize)]),
        _ => vec![],
    }
}
fn action_leftparen_s159(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ArgumentExpressionListOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_leftsquarebracket_s160(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_ampersandequal_s161(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::AssignmentOperatorsP9, 1usize)]),
        _ => vec![],
    }
}
fn action_caretequal_s162(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::AssignmentOperatorsP10, 1usize)]),
        _ => vec![],
    }
}
fn action_dashequal_s163(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::AssignmentOperatorsP3, 1usize)]),
        _ => vec![],
    }
}
fn action_dashrightbracket_s164(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS264)]),
        _ => vec![],
    }
}
fn action_doubledash_s165(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::Dot => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostDecrementExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_doubleplus_s166(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::Dot => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPostIncrementExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_percentequal_s167(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::AssignmentOperatorsP6, 1usize)]),
        _ => vec![],
    }
}
fn action_plusequal_s168(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::AssignmentOperatorsP2, 1usize)]),
        _ => vec![],
    }
}
fn action_slashequal_s169(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::AssignmentOperatorsP5, 1usize)]),
        _ => vec![],
    }
}
fn action_starequal_s170(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::AssignmentOperatorsP4, 1usize)]),
        _ => vec![],
    }
}
fn action_verticalbarequal_s171(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::AssignmentOperatorsP11, 1usize)]),
        _ => vec![],
    }
}
fn action_doubleleftequal_s172(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::AssignmentOperatorsP7, 1usize)]),
        _ => vec![],
    }
}
fn action_doublerightequal_s173(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::AssignmentOperatorsP8, 1usize)]),
        _ => vec![],
    }
}
fn action_assignmentoperators_s174(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_break_s175(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS266)]),
        _ => vec![],
    }
}
fn action_case_s176(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_continue_s177(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS268)]),
        _ => vec![],
    }
}
fn action_default_s178(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Shift(State::ColonS269)]),
        _ => vec![],
    }
}
fn action_do_s179(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Break => Vec::from(&[Shift(State::BreakS175)]),
        TK::Case => Vec::from(&[Shift(State::CaseS176)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS177)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS178)]),
        TK::Do => Vec::from(&[Shift(State::DoS179)]),
        TK::For => Vec::from(&[Shift(State::ForS180)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS181)]),
        TK::If => Vec::from(&[Shift(State::IfS182)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS183)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS184)]),
        TK::While => Vec::from(&[Shift(State::WhileS185)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS270)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_for_s180(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS272)]),
        _ => vec![],
    }
}
fn action_goto_s181(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS273)]),
        _ => vec![],
    }
}
fn action_if_s182(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS274)]),
        _ => vec![],
    }
}
fn action_return_s183(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_switch_s184(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS276)]),
        _ => vec![],
    }
}
fn action_while_s185(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS277)]),
        _ => vec![],
    }
}
fn action_identifier_s186(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Colon => Vec::from(&[Shift(State::ColonS278)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftParen => {
            Vec::from(
                &[
                    Reduce(PK::TypedefNameP1, 1usize),
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                ],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Semicolon => {
            Vec::from(
                &[
                    Reduce(PK::TypedefNameP1, 1usize),
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                ],
            )
        }
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Star => {
            Vec::from(
                &[
                    Reduce(PK::TypedefNameP1, 1usize),
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                ],
            )
        }
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::CaretEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::PercentEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::SlashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Auto => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        _ => vec![],
    }
}
fn action_expression_s187(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS138)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ExpressionOptP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP1, 1usize)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS148)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        _ => vec![],
    }
}
fn action_declaration_s188(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        _ => vec![],
    }
}
fn action_compoundstatement_s189(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        _ => vec![],
    }
}
fn action_blockitem1_s190(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::BlockItem0P1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Break => Vec::from(&[Shift(State::BreakS175)]),
        TK::Case => Vec::from(&[Shift(State::CaseS176)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS177)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS178)]),
        TK::Do => Vec::from(&[Shift(State::DoS179)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::For => Vec::from(&[Shift(State::ForS180)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS181)]),
        TK::If => Vec::from(&[Shift(State::IfS182)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS183)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS184)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::While => Vec::from(&[Shift(State::WhileS185)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS186)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_blockitem0_s191(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightCurlyBracket => Vec::from(&[Shift(State::RightCurlyBracketS280)]),
        _ => vec![],
    }
}
fn action_blockitem_s192(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::BlockItem1P2, 1usize)]),
        _ => vec![],
    }
}
fn action_statement_s193(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        _ => vec![],
    }
}
fn action_expressionopt_s194(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS281)]),
        _ => vec![],
    }
}
fn action_rightparen_s195(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        _ => vec![],
    }
}
fn action_identifier_s196(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => {
            Vec::from(
                &[
                    Reduce(PK::IdentifierListP1, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::LeftParen => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::IdentifierListP1, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::Star => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        _ => vec![],
    }
}
fn action_declarationspecifier1_s197(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => {
            Vec::from(
                &[
                    Reduce(PK::ParameterDeclarationP1, 1usize),
                    Reduce(PK::ParameterDeclarationKindP2, 0usize),
                    Reduce(PK::AbstractDeclaratorOptP2, 0usize),
                ],
            )
        }
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::ParameterDeclarationP1, 1usize),
                    Reduce(PK::ParameterDeclarationKindP2, 0usize),
                    Reduce(PK::AbstractDeclaratorOptP2, 0usize),
                ],
            )
        }
        TK::Star => Vec::from(&[Shift(State::StarS42)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => {
            Vec::from(&[Shift(State::IdentifierS24), Reduce(PK::PointerOptP2, 0usize)])
        }
        _ => vec![],
    }
}
fn action_identifierlistopt_s198(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS287)]),
        _ => vec![],
    }
}
fn action_parametertypelist_s199(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS288)]),
        _ => vec![],
    }
}
fn action_parameterlist_s200(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS289)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterTypeListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_parameterdeclaration_s201(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::ParameterListP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_identifierlist_s202(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS290)]),
        TK::RightParen => Vec::from(&[Reduce(PK::IdentifierListOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_static_s203(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_typequalifier1_s204(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Static => Vec::from(&[Shift(State::StaticS292)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        _ => vec![],
    }
}
fn action_typequalifier0_s205(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::AssignmentExpressionOptP2, 0usize)])
        }
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS293)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_rightcurlybracket_s206(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        _ => vec![],
    }
}
fn action_structdeclaration_s207(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StructDeclaration1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_specifierqualifierkind_s208(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::SpecifierQualifierKind1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_structdeclaratorlist_s209(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS296)]),
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS297)]),
        _ => vec![],
    }
}
fn action_structdeclarator_s210(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::StructDeclaratorListP2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StructDeclaratorListP2, 1usize)]),
        _ => vec![],
    }
}
fn action_declaratoropt_s211(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Shift(State::ColonS298)]),
        _ => vec![],
    }
}
fn action_declarator_s212(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DeclaratorOptP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::StructDeclaratorP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StructDeclaratorP1, 1usize)]),
        _ => vec![],
    }
}
fn action_enumerator_s213(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::EnumeratorListP2, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::EnumeratorListP2, 3usize)]),
        _ => vec![],
    }
}
fn action_rightcurlybracket_s214(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Star => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Char => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Const => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Double => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Float => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Int => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Long => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Register => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Short => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Static => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Union => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Void => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        _ => vec![],
    }
}
fn action_conditionalexpression_s215(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ConstantExpressionP1, 1usize)]),
        TK::Comma => {
            Vec::from(
                &[
                    Reduce(PK::ConstantExpressionP1, 1usize),
                    Reduce(PK::AssignmentExpressionP1, 1usize),
                ],
            )
        }
        TK::Dash => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::ConstantExpressionP1, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::ConstantExpressionP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ConstantExpressionP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_unaryexpression_s216(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS157)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS158)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS159)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS160)]),
        TK::Percent => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::AmpersandEqual => Vec::from(&[Shift(State::AmpersandEqualS161)]),
        TK::CaretEqual => Vec::from(&[Shift(State::CaretEqualS162)]),
        TK::DashEqual => Vec::from(&[Shift(State::DashEqualS163)]),
        TK::DashRightBracket => Vec::from(&[Shift(State::DashRightBracketS164)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS165)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS166)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::PercentEqual => Vec::from(&[Shift(State::PercentEqualS167)]),
        TK::PlusEqual => Vec::from(&[Shift(State::PlusEqualS168)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 1usize)]),
        TK::SlashEqual => Vec::from(&[Shift(State::SlashEqualS169)]),
        TK::StarEqual => Vec::from(&[Shift(State::StarEqualS170)]),
        TK::VerticalBarEqual => Vec::from(&[Shift(State::VerticalBarEqualS171)]),
        TK::DoubleLeftEqual => Vec::from(&[Shift(State::DoubleLeftEqualS172)]),
        TK::DoubleRightEqual => Vec::from(&[Shift(State::DoubleRightEqualS173)]),
        _ => vec![],
    }
}
fn action_constantexpression_s217(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::EnumeratorP2, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::EnumeratorP2, 3usize)]),
        _ => vec![],
    }
}
fn action_unaryexpression_s218(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS157)]),
        TK::Equal => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)]),
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS159)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS160)]),
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)]),
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::Slash => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::DashRightBracket => Vec::from(&[Shift(State::DashRightBracketS164)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS165)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS166)]),
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_unaryexpression_s219(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS157)]),
        TK::Equal => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS159)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS160)]),
        TK::Percent => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::Question => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::DashEqual => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::DashRightBracket => Vec::from(&[Shift(State::DashRightBracketS164)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS165)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS166)]),
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::PlusEqual => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::StarEqual => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)]),
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_unaryexpression_s220(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS157)]),
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS159)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS160)]),
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)]),
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::DashRightBracket => Vec::from(&[Shift(State::DashRightBracketS164)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS165)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS166)]),
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_identifier_s221(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Dot => Vec::from(&[Reduce(PK::DesignatorP2, 2usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::DesignatorP2, 2usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DesignatorP2, 2usize)]),
        _ => vec![],
    }
}
fn action_constantexpression_s222(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS299)]),
        _ => vec![],
    }
}
fn action_comma_s223(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS117)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS118)]),
        TK::Plus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CommaOptP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_commaopt_s224(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightCurlyBracket => Vec::from(&[Shift(State::RightCurlyBracketS301)]),
        _ => vec![],
    }
}
fn action_initializer_s225(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitializerListP1, 2usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::InitializerListP1, 2usize)]),
        _ => vec![],
    }
}
fn action_equal_s226(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        _ => vec![],
    }
}
fn action_designator_s227(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Dot => Vec::from(&[Reduce(PK::Designator1P1, 2usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::Designator1P1, 2usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::Designator1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_pointeropt_s228(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => {
            Vec::from(
                &[
                    Shift(State::LeftParenS302),
                    Reduce(PK::DirectAbstractDeclaratorOptP2, 0usize),
                ],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorOptP2, 0usize)])
        }
        _ => vec![],
    }
}
fn action_pointer_s229(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::AbstractDeclaratorP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_abstractdeclaratoropt_s230(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::TypeNameP1, 2usize)]),
        _ => vec![],
    }
}
fn action_abstractdeclarator_s231(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::AbstractDeclaratorOptP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::AbstractDeclaratorOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s232(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::AmpersandEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::CaretEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::PercentEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::SlashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::VerticalBarEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleLeftEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleRightEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s233(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        _ => vec![],
    }
}
fn action_unaryexpression_s234(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS157)]),
        TK::Equal => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS159)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS160)]),
        TK::Percent => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::Question => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::CaretEqual => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::DashRightBracket => Vec::from(&[Shift(State::DashRightBracketS164)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::DoubleLeft => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS165)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS166)]),
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::PlusEqual => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::SlashEqual => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)]),
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_typename_s235(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS305)]),
        _ => vec![],
    }
}
fn action_unaryexpression_s236(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::Dot => Vec::from(&[Shift(State::DotS157)]),
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS159)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS160)]),
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::DashRightBracket => Vec::from(&[Shift(State::DashRightBracketS164)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS165)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS166)]),
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_unaryexpression_s237(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS157)]),
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS159)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS160)]),
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)]),
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::DashRightBracket => Vec::from(&[Shift(State::DashRightBracketS164)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS165)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS166)]),
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s238(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(
                &[
                    Shift(State::AmpersandS136),
                    Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize),
                ],
            )
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s239(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => {
            Vec::from(
                &[
                    Shift(State::CaretS137),
                    Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize),
                ],
            )
        }
        TK::Colon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::Equal => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::LeftParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightCurlyBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::RightSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::AmpersandEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::CaretEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::DashEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::DashRightBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::DoublePlus => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::PercentEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::PlusEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        TK::SlashEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::StarEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::VerticalBarEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::DoubleLeftEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::DoubleRightEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_expression_s240(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Colon => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)])
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::AmpersandEqual => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::CaretEqual => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)])
        }
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS148)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::PercentEqual => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        TK::SlashEqual => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s241(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Dash => {
            Vec::from(
                &[
                    Shift(State::DashS139),
                    Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize),
                ],
            )
        }
        TK::Dot => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => {
            Vec::from(
                &[
                    Shift(State::PlusS142),
                    Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize),
                ],
            )
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s242(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(
                &[
                    Shift(State::LeftBracketS140),
                    Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize),
                ],
            )
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => {
            Vec::from(
                &[
                    Shift(State::RightBracketS144),
                    Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize),
                ],
            )
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(
                &[
                    Shift(State::LeftBracketEqualS154),
                    Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize),
                ],
            )
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(
                &[
                    Shift(State::RightBracketEqualS155),
                    Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize),
                ],
            )
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s243(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Dot => Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)]),
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Percent => {
            Vec::from(
                &[
                    Shift(State::PercentS141),
                    Reduce(PK::ArithmeticExpressionModuloExpression, 3usize),
                ],
            )
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Slash => {
            Vec::from(
                &[
                    Shift(State::SlashS145),
                    Reduce(PK::ArithmeticExpressionModuloExpression, 3usize),
                ],
            )
        }
        TK::Star => {
            Vec::from(
                &[
                    Shift(State::StarS146),
                    Reduce(PK::ArithmeticExpressionModuloExpression, 3usize),
                ],
            )
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s244(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Dash => {
            Vec::from(
                &[
                    Shift(State::DashS139),
                    Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize),
                ],
            )
        }
        TK::Dot => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => {
            Vec::from(
                &[
                    Shift(State::PlusS142),
                    Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize),
                ],
            )
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s245(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Colon => Vec::from(&[Shift(State::ColonS306)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS138)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS148)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        _ => vec![],
    }
}
fn action_expression_s246(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(
                &[
                    Shift(State::LeftBracketS140),
                    Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize),
                ],
            )
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => {
            Vec::from(
                &[
                    Shift(State::RightBracketS144),
                    Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize),
                ],
            )
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(
                &[
                    Shift(State::LeftBracketEqualS154),
                    Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize),
                ],
            )
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(
                &[
                    Shift(State::RightBracketEqualS155),
                    Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize),
                ],
            )
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s247(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Dot => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Percent => {
            Vec::from(
                &[
                    Shift(State::PercentS141),
                    Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize),
                ],
            )
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Slash => {
            Vec::from(
                &[
                    Shift(State::SlashS145),
                    Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize),
                ],
            )
        }
        TK::Star => {
            Vec::from(
                &[
                    Shift(State::StarS146),
                    Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize),
                ],
            )
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s248(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Dot => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Percent => {
            Vec::from(
                &[
                    Shift(State::PercentS141),
                    Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize),
                ],
            )
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Slash => {
            Vec::from(
                &[
                    Shift(State::SlashS145),
                    Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize),
                ],
            )
        }
        TK::Star => {
            Vec::from(
                &[
                    Shift(State::StarS146),
                    Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize),
                ],
            )
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s249(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(
                &[
                    Shift(State::VerticalBarS147),
                    Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize),
                ],
            )
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s250(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[
                    Shift(State::DoubleAmpersandS148),
                    Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize),
                ],
            )
        }
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s251(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(
                &[
                    Shift(State::DoubleEqualS149),
                    Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize),
                ],
            )
        }
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(
                &[
                    Shift(State::ExclaimEqualS153),
                    Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize),
                ],
            )
        }
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s252(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Caret => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Colon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Equal => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::LeftBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::LeftParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => {
            Vec::from(
                &[
                    Shift(State::QuestionS143),
                    Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize),
                ],
            )
        }
        TK::RightBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::RightCurlyBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::RightSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::AmpersandEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::CaretEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DashEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DashRightBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DoubleEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DoubleLeft => {
            Vec::from(
                &[
                    Shift(State::DoubleLeftS150),
                    Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize),
                ],
            )
        }
        TK::DoubleDash => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DoublePlus => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DoubleRight => {
            Vec::from(
                &[
                    Shift(State::DoubleRightS151),
                    Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize),
                ],
            )
        }
        TK::DoubleVerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::ExclaimEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::LeftBracketEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::PercentEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::PlusEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::RightBracketEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::SlashEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::StarEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::VerticalBarEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DoubleLeftEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DoubleRightEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_expression_s253(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Caret => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Colon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Equal => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::LeftBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::LeftParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => {
            Vec::from(
                &[
                    Shift(State::QuestionS143),
                    Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize),
                ],
            )
        }
        TK::RightBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::RightCurlyBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::RightSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::AmpersandEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::CaretEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DashEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DashRightBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DoubleEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DoubleLeft => {
            Vec::from(
                &[
                    Shift(State::DoubleLeftS150),
                    Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize),
                ],
            )
        }
        TK::DoubleDash => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DoublePlus => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DoubleRight => {
            Vec::from(
                &[
                    Shift(State::DoubleRightS151),
                    Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize),
                ],
            )
        }
        TK::DoubleVerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::ExclaimEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::LeftBracketEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::PercentEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::PlusEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::RightBracketEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::SlashEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::StarEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::VerticalBarEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DoubleLeftEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DoubleRightEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_expression_s254(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS148)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => {
            Vec::from(
                &[
                    Shift(State::DoubleVerticalBarS152),
                    Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize),
                ],
            )
        }
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s255(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Caret => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Colon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Equal => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::LeftParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightCurlyBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::RightSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::AmpersandEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::CaretEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::DashEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::DashRightBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::DoubleEqual => {
            Vec::from(
                &[
                    Shift(State::DoubleEqualS149),
                    Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize),
                ],
            )
        }
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::DoublePlus => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::ExclaimEqual => {
            Vec::from(
                &[
                    Shift(State::ExclaimEqualS153),
                    Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize),
                ],
            )
        }
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::PercentEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::PlusEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        TK::SlashEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::StarEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::VerticalBarEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::DoubleLeftEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::DoubleRightEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_expression_s256(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Caret => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Colon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Equal => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::LeftBracket => {
            Vec::from(
                &[
                    Shift(State::LeftBracketS140),
                    Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize),
                ],
            )
        }
        TK::LeftParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => {
            Vec::from(
                &[
                    Shift(State::RightBracketS144),
                    Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize),
                ],
            )
        }
        TK::RightCurlyBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::AmpersandEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::CaretEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::DashEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::DashRightBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoublePlus => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::ExclaimEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::LeftBracketEqual => {
            Vec::from(
                &[
                    Shift(State::LeftBracketEqualS154),
                    Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize),
                ],
            )
        }
        TK::PercentEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::PlusEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightBracketEqual => {
            Vec::from(
                &[
                    Shift(State::RightBracketEqualS155),
                    Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize),
                ],
            )
        }
        TK::SlashEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::StarEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::VerticalBarEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleLeftEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleRightEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_expression_s257(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Caret => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Colon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Equal => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::LeftBracket => {
            Vec::from(
                &[
                    Shift(State::LeftBracketS140),
                    Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize),
                ],
            )
        }
        TK::LeftParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => {
            Vec::from(
                &[
                    Shift(State::RightBracketS144),
                    Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize),
                ],
            )
        }
        TK::RightCurlyBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::AmpersandEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::CaretEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::DashEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::DashRightBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoublePlus => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::ExclaimEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::LeftBracketEqual => {
            Vec::from(
                &[
                    Shift(State::LeftBracketEqualS154),
                    Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize),
                ],
            )
        }
        TK::PercentEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::PlusEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightBracketEqual => {
            Vec::from(
                &[
                    Shift(State::RightBracketEqualS155),
                    Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize),
                ],
            )
        }
        TK::SlashEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::StarEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::VerticalBarEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleLeftEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleRightEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_initializerlist_s258(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS223)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CommaOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_identifier_s259(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)]),
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::Percent => Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)]),
        TK::Question => Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)]),
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::Slash => Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionAccessExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_assignmentexpression_s260(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ArgumentExpressionListP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ArgumentExpressionListP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        _ => vec![],
    }
}
fn action_argumentexpressionlistopt_s261(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS308)]),
        _ => vec![],
    }
}
fn action_argumentexpressionlist_s262(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS309)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ArgumentExpressionListOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_expression_s263(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS138)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS310)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS148)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        _ => vec![],
    }
}
fn action_identifier_s264(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::Dot => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPointerAccessExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s265(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::AmpersandEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::CaretEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::PercentEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::SlashEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::VerticalBarEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::DoubleLeftEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        TK::DoubleRightEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP2, 3usize)]),
        _ => vec![],
    }
}
fn action_semicolon_s266(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementBreakStatement, 2usize)]),
        _ => vec![],
    }
}
fn action_constantexpression_s267(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Shift(State::ColonS311)]),
        _ => vec![],
    }
}
fn action_semicolon_s268(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::LeftCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)])
        }
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::UnderscoreBool => {
            Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)])
        }
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementContinueStatement, 2usize)]),
        _ => vec![],
    }
}
fn action_colon_s269(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Break => Vec::from(&[Shift(State::BreakS175)]),
        TK::Case => Vec::from(&[Shift(State::CaseS176)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS177)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS178)]),
        TK::Do => Vec::from(&[Shift(State::DoS179)]),
        TK::For => Vec::from(&[Shift(State::ForS180)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS181)]),
        TK::If => Vec::from(&[Shift(State::IfS182)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS183)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS184)]),
        TK::While => Vec::from(&[Shift(State::WhileS185)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS270)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_identifier_s270(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Colon => Vec::from(&[Shift(State::ColonS278)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::CaretEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::PercentEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::SlashEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        _ => vec![],
    }
}
fn action_statement_s271(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::While => Vec::from(&[Shift(State::WhileS313)]),
        _ => vec![],
    }
}
fn action_leftparen_s272(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS314)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS124)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_identifier_s273(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS318)]),
        _ => vec![],
    }
}
fn action_leftparen_s274(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_expressionopt_s275(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS320)]),
        _ => vec![],
    }
}
fn action_leftparen_s276(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_leftparen_s277(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_colon_s278(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Break => Vec::from(&[Shift(State::BreakS175)]),
        TK::Case => Vec::from(&[Shift(State::CaseS176)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS177)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS178)]),
        TK::Do => Vec::from(&[Shift(State::DoS179)]),
        TK::For => Vec::from(&[Shift(State::ForS180)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS181)]),
        TK::If => Vec::from(&[Shift(State::IfS182)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS183)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS184)]),
        TK::While => Vec::from(&[Shift(State::WhileS185)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS270)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_blockitem_s279(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Break => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Case => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Default => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Do => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::For => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::If => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Return => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::While => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Num => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::BlockItem1P1, 2usize)]),
        _ => vec![],
    }
}
fn action_rightcurlybracket_s280(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Break => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Case => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Default => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Do => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::For => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::If => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Return => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::While => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        _ => vec![],
    }
}
fn action_semicolon_s281(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::LeftCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)])
        }
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::UnderscoreBool => {
            Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)])
        }
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)]),
        TK::StringLiteral => {
            Vec::from(&[Reduce(PK::StatementExpressionStatement, 2usize)])
        }
        _ => vec![],
    }
}
fn action_declarator_s282(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::ParameterDeclarationKindP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterDeclarationKindP1, 1usize)]),
        _ => vec![],
    }
}
fn action_pointeropt_s283(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => {
            Vec::from(
                &[
                    Shift(State::LeftParenS324),
                    Reduce(PK::DirectAbstractDeclaratorOptP2, 0usize),
                ],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorOptP2, 0usize)])
        }
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS62)]),
        _ => vec![],
    }
}
fn action_pointer_s284(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::AbstractDeclaratorP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::AbstractDeclaratorP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_abstractdeclaratoropt_s285(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::ParameterDeclarationKindP2, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterDeclarationKindP2, 1usize)]),
        _ => vec![],
    }
}
fn action_parameterdeclarationkind_s286(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::ParameterDeclarationP1, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterDeclarationP1, 2usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s287(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s288(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        _ => vec![],
    }
}
fn action_comma_s289(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ellipsis => Vec::from(&[Shift(State::EllipsisS325)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS24)]),
        _ => vec![],
    }
}
fn action_comma_s290(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS327)]),
        _ => vec![],
    }
}
fn action_typequalifier0_s291(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_static_s292(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_star_s293(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::LeftParen => {
            Vec::from(&[Shift(State::LeftParenS112), Reduce(PK::TypeCastOptP2, 0usize)])
        }
        TK::Plus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS330)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeCastOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_assignmentexpressionopt_s294(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS331)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s295(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::AssignmentExpressionOptP1, 1usize)])
        }
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        _ => vec![],
    }
}
fn action_comma_s296(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DeclaratorOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Star => Vec::from(&[Shift(State::StarS42)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_semicolon_s297(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        _ => vec![],
    }
}
fn action_colon_s298(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s299(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Dot => Vec::from(&[Reduce(PK::DesignatorP1, 3usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::DesignatorP1, 3usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DesignatorP1, 3usize)]),
        _ => vec![],
    }
}
fn action_designationopt_s300(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS76)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_rightcurlybracket_s301(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitializerP2, 4usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::InitializerP2, 4usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitializerP2, 4usize)]),
        _ => vec![],
    }
}
fn action_leftparen_s302(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Star => Vec::from(&[Shift(State::StarS42)]),
        _ => vec![],
    }
}
fn action_directabstractdeclarator_s303(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::AbstractDeclaratorP2, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorOptP1, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorOptP1, 1usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::AbstractDeclaratorP2, 2usize)]),
        _ => vec![],
    }
}
fn action_directabstractdeclaratoropt_s304(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS336)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS337)]),
        _ => vec![],
    }
}
fn action_rightparen_s305(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Dot => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::TypeCastP1, 3usize)]),
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        _ => vec![],
    }
}
fn action_colon_s306(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_commaopt_s307(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightCurlyBracket => Vec::from(&[Shift(State::RightCurlyBracketS339)]),
        _ => vec![],
    }
}
fn action_rightparen_s308(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::Dot => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionFunctionCallExpression, 4usize)])
        }
        _ => vec![],
    }
}
fn action_comma_s309(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s310(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::Dot => Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)]),
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionArrayAccessExpression, 4usize)])
        }
        _ => vec![],
    }
}
fn action_colon_s311(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Break => Vec::from(&[Shift(State::BreakS175)]),
        TK::Case => Vec::from(&[Shift(State::CaseS176)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS177)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS178)]),
        TK::Do => Vec::from(&[Shift(State::DoS179)]),
        TK::For => Vec::from(&[Shift(State::ForS180)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS181)]),
        TK::If => Vec::from(&[Shift(State::IfS182)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS183)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS184)]),
        TK::While => Vec::from(&[Shift(State::WhileS185)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS270)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_statement_s312(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementDefaultClause, 3usize)]),
        _ => vec![],
    }
}
fn action_while_s313(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS342)]),
        _ => vec![],
    }
}
fn action_semicolon_s314(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::ForInitClauseNone, 1usize)]),
        _ => vec![],
    }
}
fn action_expression_s315(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS138)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS343)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS148)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        _ => vec![],
    }
}
fn action_declaration_s316(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)])
        }
        TK::Dash => Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)]),
        TK::Exclaim => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)])
        }
        TK::Plus => Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)]),
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)])
        }
        TK::Sizeof => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)])
        }
        TK::Star => Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)]),
        TK::Tilde => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)])
        }
        TK::Num => Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)]),
        TK::Identifier => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)])
        }
        TK::StringLiteral => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithDeclaration, 1usize)])
        }
        _ => vec![],
    }
}
fn action_forinitclause_s317(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_semicolon_s318(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementGotoStatement, 3usize)]),
        _ => vec![],
    }
}
fn action_expression_s319(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS138)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightParen => Vec::from(&[Shift(State::RightParenS345)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS148)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        _ => vec![],
    }
}
fn action_semicolon_s320(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::LeftCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)])
        }
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementReturnStatement, 3usize)]),
        _ => vec![],
    }
}
fn action_expression_s321(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS138)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightParen => Vec::from(&[Shift(State::RightParenS346)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS148)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        _ => vec![],
    }
}
fn action_expression_s322(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS138)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightParen => Vec::from(&[Shift(State::RightParenS347)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS148)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        _ => vec![],
    }
}
fn action_statement_s323(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementLabelStatement, 3usize)]),
        _ => vec![],
    }
}
fn action_leftparen_s324(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Star => Vec::from(&[Shift(State::StarS42)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_ellipsis_s325(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterTypeListP2, 3usize)]),
        _ => vec![],
    }
}
fn action_parameterdeclaration_s326(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::ParameterListP2, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterListP2, 3usize)]),
        _ => vec![],
    }
}
fn action_identifier_s327(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::IdentifierListP2, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::IdentifierListP2, 3usize)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s328(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS348)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s329(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS349)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s330(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s331(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        _ => vec![],
    }
}
fn action_structdeclarator_s332(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::StructDeclaratorListP1, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StructDeclaratorListP1, 3usize)]),
        _ => vec![],
    }
}
fn action_constantexpression_s333(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::StructDeclaratorP2, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StructDeclaratorP2, 3usize)]),
        _ => vec![],
    }
}
fn action_initializer_s334(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitializerListP2, 4usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::InitializerListP2, 4usize)]),
        _ => vec![],
    }
}
fn action_abstractdeclarator_s335(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS350)]),
        _ => vec![],
    }
}
fn action_leftparen_s336(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterTypeListOptP2, 0usize)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS1)]),
        TK::Char => Vec::from(&[Shift(State::CharS2)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS4)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS5)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS7)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS9)]),
        TK::Long => Vec::from(&[Shift(State::LongS10)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Short => Vec::from(&[Shift(State::ShortS13)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS14)]),
        TK::Static => Vec::from(&[Shift(State::StaticS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS16)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS18)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS19)]),
        TK::Union => Vec::from(&[Shift(State::UnionS20)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS21)]),
        TK::Void => Vec::from(&[Shift(State::VoidS22)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS24)]),
        _ => vec![],
    }
}
fn action_leftsquarebracket_s337(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Star => {
            Vec::from(&[Shift(State::StarS353), Reduce(PK::TypeQualifier0P2, 0usize)])
        }
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Static => Vec::from(&[Shift(State::StaticS354)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_expression_s338(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::Dot => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)])
        }
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::AmpersandEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::CaretEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::DashEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)])
        }
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::PercentEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::PlusEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)])
        }
        TK::SlashEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::StarEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::VerticalBarEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::DoubleLeftEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::DoubleRightEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        _ => vec![],
    }
}
fn action_rightcurlybracket_s339(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::Dot => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::AmpersandEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::CaretEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::DashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::PercentEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::PlusEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::SlashEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::StarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::VerticalBarEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::DoubleLeftEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        TK::DoubleRightEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionCompoundLiteralExpression, 5usize)])
        }
        _ => vec![],
    }
}
fn action_assignmentexpression_s340(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ArgumentExpressionListP2, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ArgumentExpressionListP2, 3usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        _ => vec![],
    }
}
fn action_statement_s341(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementCaseClause, 4usize)]),
        _ => vec![],
    }
}
fn action_leftparen_s342(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_semicolon_s343(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)])
        }
        TK::Dash => Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)]),
        TK::Exclaim => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)])
        }
        TK::LeftParen => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)])
        }
        TK::Plus => Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)]),
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)])
        }
        TK::Sizeof => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)])
        }
        TK::Star => Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)]),
        TK::DoubleDash => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)])
        }
        TK::DoublePlus => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)])
        }
        TK::Num => Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)]),
        TK::Identifier => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)])
        }
        TK::StringLiteral => {
            Vec::from(&[Reduce(PK::ForInitClauseForInitWithExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_expressionopt_s344(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS358)]),
        _ => vec![],
    }
}
fn action_rightparen_s345(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Break => Vec::from(&[Shift(State::BreakS175)]),
        TK::Case => Vec::from(&[Shift(State::CaseS176)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS177)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS178)]),
        TK::Do => Vec::from(&[Shift(State::DoS179)]),
        TK::For => Vec::from(&[Shift(State::ForS180)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS181)]),
        TK::If => Vec::from(&[Shift(State::IfS182)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS183)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS184)]),
        TK::While => Vec::from(&[Shift(State::WhileS185)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS270)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_rightparen_s346(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Break => Vec::from(&[Shift(State::BreakS175)]),
        TK::Case => Vec::from(&[Shift(State::CaseS176)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS177)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS178)]),
        TK::Do => Vec::from(&[Shift(State::DoS179)]),
        TK::For => Vec::from(&[Shift(State::ForS180)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS181)]),
        TK::If => Vec::from(&[Shift(State::IfS182)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS183)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS184)]),
        TK::While => Vec::from(&[Shift(State::WhileS185)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS270)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_rightparen_s347(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Break => Vec::from(&[Shift(State::BreakS175)]),
        TK::Case => Vec::from(&[Shift(State::CaseS176)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS177)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS178)]),
        TK::Do => Vec::from(&[Shift(State::DoS179)]),
        TK::For => Vec::from(&[Shift(State::ForS180)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS181)]),
        TK::If => Vec::from(&[Shift(State::IfS182)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS183)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS184)]),
        TK::While => Vec::from(&[Shift(State::WhileS185)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS270)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s348(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s349(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s350(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP1, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP1, 3usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP1, 3usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP1, 3usize)]),
        _ => vec![],
    }
}
fn action_parametertypelistopt_s351(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS362)]),
        _ => vec![],
    }
}
fn action_parametertypelist_s352(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterTypeListOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_star_s353(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS363)]),
        _ => vec![],
    }
}
fn action_static_s354(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeQualifier0P2, 0usize)]),
        _ => vec![],
    }
}
fn action_typequalifier1_s355(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS3)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS12)]),
        TK::Static => Vec::from(&[Shift(State::StaticS365)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS23)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::TypeQualifier0P1, 1usize)]),
        _ => vec![],
    }
}
fn action_typequalifier0_s356(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::AssignmentExpressionOptP2, 0usize)])
        }
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_expression_s357(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS136)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS137)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS138)]),
        TK::Dash => Vec::from(&[Shift(State::DashS139)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS140)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS141)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS142)]),
        TK::Question => Vec::from(&[Shift(State::QuestionS143)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS144)]),
        TK::RightParen => Vec::from(&[Shift(State::RightParenS367)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS147)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS148)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS149)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS150)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS151)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS154)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS155)]),
        _ => vec![],
    }
}
fn action_semicolon_s358(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_statement_s359(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Else => {
            Vec::from(
                &[Shift(State::ElseS369), Reduce(PK::StatementIfStatement, 5usize)],
            )
        }
        TK::Enum => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementIfStatement, 5usize)]),
        _ => vec![],
    }
}
fn action_statement_s360(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::LeftCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)])
        }
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementSwitchStatement, 5usize)]),
        _ => vec![],
    }
}
fn action_statement_s361(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementWhileStatement, 5usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s362(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP6, 4usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP6, 4usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP6, 4usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP6, 4usize)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s363(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP5, 4usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP5, 4usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP5, 4usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP5, 4usize)]),
        _ => vec![],
    }
}
fn action_typequalifier0_s364(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_static_s365(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS85)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_assignmentexpressionopt_s366(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS372)]),
        _ => vec![],
    }
}
fn action_rightparen_s367(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS373)]),
        _ => vec![],
    }
}
fn action_expressionopt_s368(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS374)]),
        _ => vec![],
    }
}
fn action_else_s369(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Break => Vec::from(&[Shift(State::BreakS175)]),
        TK::Case => Vec::from(&[Shift(State::CaseS176)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS177)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS178)]),
        TK::Do => Vec::from(&[Shift(State::DoS179)]),
        TK::For => Vec::from(&[Shift(State::ForS180)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS181)]),
        TK::If => Vec::from(&[Shift(State::IfS182)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS183)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS184)]),
        TK::While => Vec::from(&[Shift(State::WhileS185)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS270)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s370(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS376)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s371(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS377)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ExpressionP2, 1usize)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s372(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP2, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP2, 5usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP2, 5usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP2, 5usize)]),
        _ => vec![],
    }
}
fn action_semicolon_s373(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::LeftCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)])
        }
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementDoWhileStatement, 7usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s374(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS73)]),
        TK::Dash => Vec::from(&[Shift(State::DashS74)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS75)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS77)]),
        TK::Plus => Vec::from(&[Shift(State::PlusS78)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS79)]),
        TK::Star => Vec::from(&[Shift(State::StarS80)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS81)]),
        TK::DoubleDash => Vec::from(&[Shift(State::DoubleDashS82)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS83)]),
        TK::Break => Vec::from(&[Shift(State::BreakS175)]),
        TK::Case => Vec::from(&[Shift(State::CaseS176)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS177)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS178)]),
        TK::Do => Vec::from(&[Shift(State::DoS179)]),
        TK::For => Vec::from(&[Shift(State::ForS180)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS181)]),
        TK::If => Vec::from(&[Shift(State::IfS182)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS183)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS184)]),
        TK::While => Vec::from(&[Shift(State::WhileS185)]),
        TK::Num => Vec::from(&[Shift(State::NumS84)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS270)]),
        TK::StringLiteral => Vec::from(&[Shift(State::StringLiteralS86)]),
        _ => vec![],
    }
}
fn action_statement_s375(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::LeftCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)])
        }
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementIfElseStatement, 7usize)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s376(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP3, 6usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP3, 6usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP3, 6usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP3, 6usize)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s377(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP4, 6usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP4, 6usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP4, 6usize)])
        }
        TK::RightParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP4, 6usize)]),
        _ => vec![],
    }
}
fn action_statement_s378(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::DoubleDash => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        TK::StringLiteral => Vec::from(&[Reduce(PK::StatementForStatement, 8usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TranslationUnit => State::TranslationUnitS25,
        NonTermKind::ExternalDeclaration => State::ExternalDeclarationS26,
        NonTermKind::FunctionDefinition => State::FunctionDefinitionS27,
        NonTermKind::DeclarationSpecifier1 => State::DeclarationSpecifier1S28,
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS29,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        NonTermKind::Declaration => State::DeclarationS38,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_enum_s5(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::IdentifierOpt => State::IdentifierOptS40,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::EnumS5
            )
        }
    }
}
fn goto_translationunit_s25(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::ExternalDeclaration => State::ExternalDeclarationS41,
        NonTermKind::FunctionDefinition => State::FunctionDefinitionS27,
        NonTermKind::DeclarationSpecifier1 => State::DeclarationSpecifier1S28,
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS29,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        NonTermKind::Declaration => State::DeclarationS38,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TranslationUnitS25
            )
        }
    }
}
fn goto_declarationspecifier1_s28(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS43,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::Declarator => State::DeclaratorS44,
        NonTermKind::PointerOpt => State::PointerOptS45,
        NonTermKind::Pointer => State::PointerS46,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        NonTermKind::InitDeclaratorListOpt => State::InitDeclaratorListOptS47,
        NonTermKind::InitDeclaratorList => State::InitDeclaratorListS48,
        NonTermKind::InitDeclarator => State::InitDeclaratorS49,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DeclarationSpecifier1S28
            )
        }
    }
}
fn goto_structorunion_s33(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::IdentifierOpt => State::IdentifierOptS51,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StructOrUnionS33
            )
        }
    }
}
fn goto_star_s42(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS53,
        NonTermKind::TypeQualifier1 => State::TypeQualifier1S54,
        NonTermKind::TypeQualifier0 => State::TypeQualifier0S55,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StarS42
            )
        }
    }
}
fn goto_declarator_s44(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifier1 => State::DeclarationSpecifier1S57,
        NonTermKind::Declaration1 => State::Declaration1S58,
        NonTermKind::Declaration0 => State::Declaration0S59,
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS29,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        NonTermKind::Declaration => State::DeclarationS60,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DeclaratorS44
            )
        }
    }
}
fn goto_pointeropt_s45(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DirectDeclarator => State::DirectDeclaratorS63,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PointerOptS45
            )
        }
    }
}
fn goto_leftcurlybracket_s52(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::EnumeratorList => State::EnumeratorListS68,
        NonTermKind::Enumerator => State::EnumeratorS69,
        NonTermKind::EnumerationConstant => State::EnumerationConstantS70,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftCurlyBracketS52
            )
        }
    }
}
fn goto_typequalifier1_s54(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS71,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifier1S54
            )
        }
    }
}
fn goto_typequalifier0_s55(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Pointer => State::PointerS72,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifier0S55
            )
        }
    }
}
fn goto_equal_s56(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS88,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::Initializer => State::InitializerS94,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::EqualS56
            )
        }
    }
}
fn goto_declarationspecifier1_s57(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS43,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::Declarator => State::DeclaratorS95,
        NonTermKind::PointerOpt => State::PointerOptS45,
        NonTermKind::Pointer => State::PointerS46,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        NonTermKind::InitDeclaratorListOpt => State::InitDeclaratorListOptS47,
        NonTermKind::InitDeclaratorList => State::InitDeclaratorListS48,
        NonTermKind::InitDeclarator => State::InitDeclaratorS49,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DeclarationSpecifier1S57
            )
        }
    }
}
fn goto_declaration1_s58(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifier1 => State::DeclarationSpecifier1S57,
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS29,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        NonTermKind::Declaration => State::DeclarationS96,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Declaration1S58
            )
        }
    }
}
fn goto_declaration0_s59(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CompoundStatement => State::CompoundStatementS98,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Declaration0S59
            )
        }
    }
}
fn goto_leftparen_s61(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Declarator => State::DeclaratorS99,
        NonTermKind::PointerOpt => State::PointerOptS45,
        NonTermKind::Pointer => State::PointerS46,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS61
            )
        }
    }
}
fn goto_comma_s65(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Declarator => State::DeclaratorS95,
        NonTermKind::PointerOpt => State::PointerOptS45,
        NonTermKind::Pointer => State::PointerS46,
        NonTermKind::InitDeclarator => State::InitDeclaratorS102,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS65
            )
        }
    }
}
fn goto_leftcurlybracket_s66(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS103,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructDeclaration1 => State::StructDeclaration1S104,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::StructDeclaration => State::StructDeclarationS105,
        NonTermKind::SpecifierQualifierKind1 => State::SpecifierQualifierKind1S106,
        NonTermKind::SpecifierQualifierKind => State::SpecifierQualifierKindS107,
        NonTermKind::TypeQualifier => State::TypeQualifierS108,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftCurlyBracketS66
            )
        }
    }
}
fn goto_enumeratorlist_s68(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CommaOpt => State::CommaOptS110,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::EnumeratorListS68
            )
        }
    }
}
fn goto_ampersand_s73(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS113,
        NonTermKind::TypeCastOpt => State::TypeCastOptS114,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AmpersandS73
            )
        }
    }
}
fn goto_dash_s74(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS113,
        NonTermKind::TypeCastOpt => State::TypeCastOptS115,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DashS74
            )
        }
    }
}
fn goto_exclaim_s75(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS113,
        NonTermKind::TypeCastOpt => State::TypeCastOptS116,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ExclaimS75
            )
        }
    }
}
fn goto_leftcurlybracket_s76(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::InitializerList => State::InitializerListS119,
        NonTermKind::DesignationOpt => State::DesignationOptS120,
        NonTermKind::Designation => State::DesignationS121,
        NonTermKind::Designator1 => State::Designator1S122,
        NonTermKind::Designator => State::DesignatorS123,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftCurlyBracketS76
            )
        }
    }
}
fn goto_leftparen_s77(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS103,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::SpecifierQualifierKind1 => State::SpecifierQualifierKind1S125,
        NonTermKind::SpecifierQualifierKind => State::SpecifierQualifierKindS107,
        NonTermKind::TypeQualifier => State::TypeQualifierS108,
        NonTermKind::Expression => State::ExpressionS126,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::TypeName => State::TypeNameS128,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS77
            )
        }
    }
}
fn goto_plus_s78(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS113,
        NonTermKind::TypeCastOpt => State::TypeCastOptS129,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PlusS78
            )
        }
    }
}
fn goto_sizeof_s79(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS131,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SizeofS79
            )
        }
    }
}
fn goto_star_s80(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS113,
        NonTermKind::TypeCastOpt => State::TypeCastOptS132,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StarS80
            )
        }
    }
}
fn goto_tilde_s81(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS113,
        NonTermKind::TypeCastOpt => State::TypeCastOptS133,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TildeS81
            )
        }
    }
}
fn goto_doubledash_s82(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS134,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoubleDashS82
            )
        }
    }
}
fn goto_doubleplus_s83(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS135,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoublePlusS83
            )
        }
    }
}
fn goto_unaryexpression_s92(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentOperators => State::AssignmentOperatorsS174,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::UnaryExpressionS92
            )
        }
    }
}
fn goto_leftcurlybracket_s97(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifier1 => State::DeclarationSpecifier1S57,
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS29,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        NonTermKind::Declaration => State::DeclarationS188,
        NonTermKind::CompoundStatement => State::CompoundStatementS189,
        NonTermKind::BlockItem1 => State::BlockItem1S190,
        NonTermKind::BlockItem0 => State::BlockItem0S191,
        NonTermKind::BlockItem => State::BlockItemS192,
        NonTermKind::Statement => State::StatementS193,
        NonTermKind::ExpressionOpt => State::ExpressionOptS194,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftCurlyBracketS97
            )
        }
    }
}
fn goto_leftparen_s100(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifier1 => State::DeclarationSpecifier1S197,
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS29,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::IdentifierListOpt => State::IdentifierListOptS198,
        NonTermKind::ParameterTypeList => State::ParameterTypeListS199,
        NonTermKind::ParameterList => State::ParameterListS200,
        NonTermKind::ParameterDeclaration => State::ParameterDeclarationS201,
        NonTermKind::IdentifierList => State::IdentifierListS202,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS100
            )
        }
    }
}
fn goto_leftsquarebracket_s101(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS53,
        NonTermKind::TypeQualifier1 => State::TypeQualifier1S204,
        NonTermKind::TypeQualifier0 => State::TypeQualifier0S205,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftSquareBracketS101
            )
        }
    }
}
fn goto_structdeclaration1_s104(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS103,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::StructDeclaration => State::StructDeclarationS207,
        NonTermKind::SpecifierQualifierKind1 => State::SpecifierQualifierKind1S106,
        NonTermKind::SpecifierQualifierKind => State::SpecifierQualifierKindS107,
        NonTermKind::TypeQualifier => State::TypeQualifierS108,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StructDeclaration1S104
            )
        }
    }
}
fn goto_specifierqualifierkind1_s106(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS103,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::SpecifierQualifierKind => State::SpecifierQualifierKindS208,
        NonTermKind::TypeQualifier => State::TypeQualifierS108,
        NonTermKind::StructDeclaratorList => State::StructDeclaratorListS209,
        NonTermKind::StructDeclarator => State::StructDeclaratorS210,
        NonTermKind::DeclaratorOpt => State::DeclaratorOptS211,
        NonTermKind::Declarator => State::DeclaratorS212,
        NonTermKind::PointerOpt => State::PointerOptS45,
        NonTermKind::Pointer => State::PointerS46,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SpecifierQualifierKind1S106
            )
        }
    }
}
fn goto_comma_s109(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Enumerator => State::EnumeratorS213,
        NonTermKind::EnumerationConstant => State::EnumerationConstantS70,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS109
            )
        }
    }
}
fn goto_equal_s111(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS215,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS216,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::ConstantExpression => State::ConstantExpressionS217,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::EqualS111
            )
        }
    }
}
fn goto_leftparen_s112(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS103,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::SpecifierQualifierKind1 => State::SpecifierQualifierKind1S125,
        NonTermKind::SpecifierQualifierKind => State::SpecifierQualifierKindS107,
        NonTermKind::TypeQualifier => State::TypeQualifierS108,
        NonTermKind::TypeName => State::TypeNameS128,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS112
            )
        }
    }
}
fn goto_typecastopt_s114(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS218,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeCastOptS114
            )
        }
    }
}
fn goto_typecastopt_s115(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS219,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeCastOptS115
            )
        }
    }
}
fn goto_typecastopt_s116(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS220,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeCastOptS116
            )
        }
    }
}
fn goto_leftsquarebracket_s118(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS215,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS216,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::ConstantExpression => State::ConstantExpressionS222,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftSquareBracketS118
            )
        }
    }
}
fn goto_initializerlist_s119(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CommaOpt => State::CommaOptS224,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::InitializerListS119
            )
        }
    }
}
fn goto_designationopt_s120(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS88,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::Initializer => State::InitializerS225,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DesignationOptS120
            )
        }
    }
}
fn goto_designator1_s122(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Designator => State::DesignatorS227,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::Designator1S122
            )
        }
    }
}
fn goto_specifierqualifierkind1_s125(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS103,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::SpecifierQualifierKind => State::SpecifierQualifierKindS208,
        NonTermKind::TypeQualifier => State::TypeQualifierS108,
        NonTermKind::PointerOpt => State::PointerOptS228,
        NonTermKind::Pointer => State::PointerS229,
        NonTermKind::AbstractDeclaratorOpt => State::AbstractDeclaratorOptS230,
        NonTermKind::AbstractDeclarator => State::AbstractDeclaratorS231,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SpecifierQualifierKind1S125
            )
        }
    }
}
fn goto_typecastopt_s129(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS234,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeCastOptS129
            )
        }
    }
}
fn goto_leftparen_s130(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS103,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::SpecifierQualifierKind1 => State::SpecifierQualifierKind1S125,
        NonTermKind::SpecifierQualifierKind => State::SpecifierQualifierKindS107,
        NonTermKind::TypeQualifier => State::TypeQualifierS108,
        NonTermKind::Expression => State::ExpressionS126,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::TypeName => State::TypeNameS235,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS130
            )
        }
    }
}
fn goto_typecastopt_s132(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS236,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeCastOptS132
            )
        }
    }
}
fn goto_typecastopt_s133(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS237,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeCastOptS133
            )
        }
    }
}
fn goto_ampersand_s136(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS238,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AmpersandS136
            )
        }
    }
}
fn goto_caret_s137(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS239,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CaretS137
            )
        }
    }
}
fn goto_comma_s138(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS240,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS138
            )
        }
    }
}
fn goto_dash_s139(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS241,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DashS139
            )
        }
    }
}
fn goto_leftbracket_s140(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS242,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftBracketS140
            )
        }
    }
}
fn goto_percent_s141(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS243,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PercentS141
            )
        }
    }
}
fn goto_plus_s142(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS244,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PlusS142
            )
        }
    }
}
fn goto_question_s143(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS245,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::QuestionS143
            )
        }
    }
}
fn goto_rightbracket_s144(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS246,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightBracketS144
            )
        }
    }
}
fn goto_slash_s145(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS247,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SlashS145
            )
        }
    }
}
fn goto_star_s146(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS248,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StarS146
            )
        }
    }
}
fn goto_verticalbar_s147(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS249,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::VerticalBarS147
            )
        }
    }
}
fn goto_doubleampersand_s148(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS250,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoubleAmpersandS148
            )
        }
    }
}
fn goto_doubleequal_s149(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS251,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoubleEqualS149
            )
        }
    }
}
fn goto_doubleleft_s150(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS252,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoubleLeftS150
            )
        }
    }
}
fn goto_doubleright_s151(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS253,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoubleRightS151
            )
        }
    }
}
fn goto_doubleverticalbar_s152(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS254,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoubleVerticalBarS152
            )
        }
    }
}
fn goto_exclaimequal_s153(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS255,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ExclaimEqualS153
            )
        }
    }
}
fn goto_leftbracketequal_s154(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS256,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftBracketEqualS154
            )
        }
    }
}
fn goto_rightbracketequal_s155(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS257,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightBracketEqualS155
            )
        }
    }
}
fn goto_leftcurlybracket_s156(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::InitializerList => State::InitializerListS258,
        NonTermKind::DesignationOpt => State::DesignationOptS120,
        NonTermKind::Designation => State::DesignationS121,
        NonTermKind::Designator1 => State::Designator1S122,
        NonTermKind::Designator => State::DesignatorS123,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftCurlyBracketS156
            )
        }
    }
}
fn goto_leftparen_s159(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS260,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::ArgumentExpressionListOpt => State::ArgumentExpressionListOptS261,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::ArgumentExpressionList => State::ArgumentExpressionListS262,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS159
            )
        }
    }
}
fn goto_leftsquarebracket_s160(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS263,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftSquareBracketS160
            )
        }
    }
}
fn goto_assignmentoperators_s174(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS265,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AssignmentOperatorsS174
            )
        }
    }
}
fn goto_case_s176(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS215,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS216,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::ConstantExpression => State::ConstantExpressionS267,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CaseS176
            )
        }
    }
}
fn goto_do_s179(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::CompoundStatement => State::CompoundStatementS189,
        NonTermKind::Statement => State::StatementS271,
        NonTermKind::ExpressionOpt => State::ExpressionOptS194,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoS179
            )
        }
    }
}
fn goto_return_s183(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::ExpressionOpt => State::ExpressionOptS275,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ReturnS183
            )
        }
    }
}
fn goto_blockitem1_s190(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifier1 => State::DeclarationSpecifier1S57,
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS29,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        NonTermKind::Declaration => State::DeclarationS188,
        NonTermKind::CompoundStatement => State::CompoundStatementS189,
        NonTermKind::BlockItem => State::BlockItemS279,
        NonTermKind::Statement => State::StatementS193,
        NonTermKind::ExpressionOpt => State::ExpressionOptS194,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::BlockItem1S190
            )
        }
    }
}
fn goto_declarationspecifier1_s197(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS43,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::Declarator => State::DeclaratorS282,
        NonTermKind::PointerOpt => State::PointerOptS283,
        NonTermKind::Pointer => State::PointerS284,
        NonTermKind::AbstractDeclaratorOpt => State::AbstractDeclaratorOptS285,
        NonTermKind::AbstractDeclarator => State::AbstractDeclaratorS231,
        NonTermKind::ParameterDeclarationKind => State::ParameterDeclarationKindS286,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DeclarationSpecifier1S197
            )
        }
    }
}
fn goto_static_s203(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS53,
        NonTermKind::TypeQualifier1 => State::TypeQualifier1S54,
        NonTermKind::TypeQualifier0 => State::TypeQualifier0S291,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StaticS203
            )
        }
    }
}
fn goto_typequalifier1_s204(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS71,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifier1S204
            )
        }
    }
}
fn goto_typequalifier0_s205(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpressionOpt => State::AssignmentExpressionOptS294,
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS295,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifier0S205
            )
        }
    }
}
fn goto_unaryexpression_s216(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentOperators => State::AssignmentOperatorsS174,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::UnaryExpressionS216
            )
        }
    }
}
fn goto_comma_s223(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DesignationOpt => State::DesignationOptS300,
        NonTermKind::Designation => State::DesignationS121,
        NonTermKind::Designator1 => State::Designator1S122,
        NonTermKind::Designator => State::DesignatorS123,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS223
            )
        }
    }
}
fn goto_pointeropt_s228(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DirectAbstractDeclarator => State::DirectAbstractDeclaratorS303,
        NonTermKind::DirectAbstractDeclaratorOpt => {
            State::DirectAbstractDeclaratorOptS304
        }
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PointerOptS228
            )
        }
    }
}
fn goto_initializerlist_s258(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CommaOpt => State::CommaOptS307,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::InitializerListS258
            )
        }
    }
}
fn goto_colon_s269(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::CompoundStatement => State::CompoundStatementS189,
        NonTermKind::Statement => State::StatementS312,
        NonTermKind::ExpressionOpt => State::ExpressionOptS194,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ColonS269
            )
        }
    }
}
fn goto_leftparen_s272(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifier1 => State::DeclarationSpecifier1S57,
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS29,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::Expression => State::ExpressionS315,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        NonTermKind::Declaration => State::DeclarationS316,
        NonTermKind::ForInitClause => State::ForInitClauseS317,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS272
            )
        }
    }
}
fn goto_leftparen_s274(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS319,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS274
            )
        }
    }
}
fn goto_leftparen_s276(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS321,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS276
            )
        }
    }
}
fn goto_leftparen_s277(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS322,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS277
            )
        }
    }
}
fn goto_colon_s278(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::CompoundStatement => State::CompoundStatementS189,
        NonTermKind::Statement => State::StatementS323,
        NonTermKind::ExpressionOpt => State::ExpressionOptS194,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ColonS278
            )
        }
    }
}
fn goto_pointeropt_s283(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DirectDeclarator => State::DirectDeclaratorS63,
        NonTermKind::DirectAbstractDeclarator => State::DirectAbstractDeclaratorS303,
        NonTermKind::DirectAbstractDeclaratorOpt => {
            State::DirectAbstractDeclaratorOptS304
        }
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PointerOptS283
            )
        }
    }
}
fn goto_comma_s289(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifier1 => State::DeclarationSpecifier1S197,
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS29,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::ParameterDeclaration => State::ParameterDeclarationS326,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS289
            )
        }
    }
}
fn goto_typequalifier0_s291(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS328,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifier0S291
            )
        }
    }
}
fn goto_static_s292(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS329,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StaticS292
            )
        }
    }
}
fn goto_star_s293(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeCast => State::TypeCastS113,
        NonTermKind::TypeCastOpt => State::TypeCastOptS132,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StarS293
            )
        }
    }
}
fn goto_comma_s296(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::StructDeclarator => State::StructDeclaratorS332,
        NonTermKind::DeclaratorOpt => State::DeclaratorOptS211,
        NonTermKind::Declarator => State::DeclaratorS212,
        NonTermKind::PointerOpt => State::PointerOptS45,
        NonTermKind::Pointer => State::PointerS46,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS296
            )
        }
    }
}
fn goto_colon_s298(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS215,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS216,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::ConstantExpression => State::ConstantExpressionS333,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ColonS298
            )
        }
    }
}
fn goto_designationopt_s300(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS88,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::Initializer => State::InitializerS334,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DesignationOptS300
            )
        }
    }
}
fn goto_leftparen_s302(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::PointerOpt => State::PointerOptS228,
        NonTermKind::Pointer => State::PointerS229,
        NonTermKind::AbstractDeclarator => State::AbstractDeclaratorS335,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS302
            )
        }
    }
}
fn goto_colon_s306(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS338,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ColonS306
            )
        }
    }
}
fn goto_comma_s309(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS340,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS309
            )
        }
    }
}
fn goto_colon_s311(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::CompoundStatement => State::CompoundStatementS189,
        NonTermKind::Statement => State::StatementS341,
        NonTermKind::ExpressionOpt => State::ExpressionOptS194,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ColonS311
            )
        }
    }
}
fn goto_forinitclause_s317(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::ExpressionOpt => State::ExpressionOptS344,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ForInitClauseS317
            )
        }
    }
}
fn goto_leftparen_s324(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Declarator => State::DeclaratorS99,
        NonTermKind::PointerOpt => State::PointerOptS283,
        NonTermKind::Pointer => State::PointerS229,
        NonTermKind::AbstractDeclarator => State::AbstractDeclaratorS335,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS324
            )
        }
    }
}
fn goto_leftparen_s336(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifier1 => State::DeclarationSpecifier1S197,
        NonTermKind::DeclarationSpecifier => State::DeclarationSpecifierS29,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS30,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS31,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS32,
        NonTermKind::StructOrUnion => State::StructOrUnionS33,
        NonTermKind::TypeQualifier => State::TypeQualifierS34,
        NonTermKind::ParameterTypeListOpt => State::ParameterTypeListOptS351,
        NonTermKind::ParameterTypeList => State::ParameterTypeListS352,
        NonTermKind::ParameterList => State::ParameterListS200,
        NonTermKind::ParameterDeclaration => State::ParameterDeclarationS201,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS35,
        NonTermKind::TypedefName => State::TypedefNameS36,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS37,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS336
            )
        }
    }
}
fn goto_leftsquarebracket_s337(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS53,
        NonTermKind::TypeQualifier1 => State::TypeQualifier1S355,
        NonTermKind::TypeQualifier0 => State::TypeQualifier0S356,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftSquareBracketS337
            )
        }
    }
}
fn goto_leftparen_s342(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS357,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS342
            )
        }
    }
}
fn goto_rightparen_s345(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::CompoundStatement => State::CompoundStatementS189,
        NonTermKind::Statement => State::StatementS359,
        NonTermKind::ExpressionOpt => State::ExpressionOptS194,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightParenS345
            )
        }
    }
}
fn goto_rightparen_s346(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::CompoundStatement => State::CompoundStatementS189,
        NonTermKind::Statement => State::StatementS360,
        NonTermKind::ExpressionOpt => State::ExpressionOptS194,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightParenS346
            )
        }
    }
}
fn goto_rightparen_s347(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::CompoundStatement => State::CompoundStatementS189,
        NonTermKind::Statement => State::StatementS361,
        NonTermKind::ExpressionOpt => State::ExpressionOptS194,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightParenS347
            )
        }
    }
}
fn goto_static_s354(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS53,
        NonTermKind::TypeQualifier1 => State::TypeQualifier1S54,
        NonTermKind::TypeQualifier0 => State::TypeQualifier0S364,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StaticS354
            )
        }
    }
}
fn goto_typequalifier1_s355(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS71,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifier1S355
            )
        }
    }
}
fn goto_typequalifier0_s356(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpressionOpt => State::AssignmentExpressionOptS366,
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS295,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifier0S356
            )
        }
    }
}
fn goto_semicolon_s358(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::ExpressionOpt => State::ExpressionOptS368,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SemicolonS358
            )
        }
    }
}
fn goto_typequalifier0_s364(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS370,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifier0S364
            )
        }
    }
}
fn goto_static_s365(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS87,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS371,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StaticS365
            )
        }
    }
}
fn goto_else_s369(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::CompoundStatement => State::CompoundStatementS189,
        NonTermKind::Statement => State::StatementS375,
        NonTermKind::ExpressionOpt => State::ExpressionOptS194,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ElseS369
            )
        }
    }
}
fn goto_rightparen_s374(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS187,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS127,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS89,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS90,
        NonTermKind::TypeCast => State::TypeCastS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS93,
        NonTermKind::CompoundStatement => State::CompoundStatementS189,
        NonTermKind::Statement => State::StatementS378,
        NonTermKind::ExpressionOpt => State::ExpressionOptS194,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightParenS374
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: GrammarCParserDefinition = GrammarCParserDefinition {
    actions: [
        action_aug_s0,
        action_auto_s1,
        action_char_s2,
        action_const_s3,
        action_double_s4,
        action_enum_s5,
        action_extern_s6,
        action_float_s7,
        action_inline_s8,
        action_int_s9,
        action_long_s10,
        action_register_s11,
        action_restrict_s12,
        action_short_s13,
        action_signed_s14,
        action_static_s15,
        action_struct_s16,
        action_typedef_s17,
        action_underscorebool_s18,
        action_underscorecomplex_s19,
        action_union_s20,
        action_unsigned_s21,
        action_void_s22,
        action_volatile_s23,
        action_identifier_s24,
        action_translationunit_s25,
        action_externaldeclaration_s26,
        action_functiondefinition_s27,
        action_declarationspecifier1_s28,
        action_declarationspecifier_s29,
        action_storageclassspecifier_s30,
        action_typespecifier_s31,
        action_structorunionspecifier_s32,
        action_structorunion_s33,
        action_typequalifier_s34,
        action_enumspecifier_s35,
        action_typedefname_s36,
        action_functionspecifier_s37,
        action_declaration_s38,
        action_identifier_s39,
        action_identifieropt_s40,
        action_externaldeclaration_s41,
        action_star_s42,
        action_declarationspecifier_s43,
        action_declarator_s44,
        action_pointeropt_s45,
        action_pointer_s46,
        action_initdeclaratorlistopt_s47,
        action_initdeclaratorlist_s48,
        action_initdeclarator_s49,
        action_identifier_s50,
        action_identifieropt_s51,
        action_leftcurlybracket_s52,
        action_typequalifier_s53,
        action_typequalifier1_s54,
        action_typequalifier0_s55,
        action_equal_s56,
        action_declarationspecifier1_s57,
        action_declaration1_s58,
        action_declaration0_s59,
        action_declaration_s60,
        action_leftparen_s61,
        action_identifier_s62,
        action_directdeclarator_s63,
        action_semicolon_s64,
        action_comma_s65,
        action_leftcurlybracket_s66,
        action_identifier_s67,
        action_enumeratorlist_s68,
        action_enumerator_s69,
        action_enumerationconstant_s70,
        action_typequalifier_s71,
        action_pointer_s72,
        action_ampersand_s73,
        action_dash_s74,
        action_exclaim_s75,
        action_leftcurlybracket_s76,
        action_leftparen_s77,
        action_plus_s78,
        action_sizeof_s79,
        action_star_s80,
        action_tilde_s81,
        action_doubledash_s82,
        action_doubleplus_s83,
        action_num_s84,
        action_identifier_s85,
        action_stringliteral_s86,
        action_expression_s87,
        action_assignmentexpression_s88,
        action_conditionalexpression_s89,
        action_arithmeticexpression_s90,
        action_typecast_s91,
        action_unaryexpression_s92,
        action_primaryexpression_s93,
        action_initializer_s94,
        action_declarator_s95,
        action_declaration_s96,
        action_leftcurlybracket_s97,
        action_compoundstatement_s98,
        action_declarator_s99,
        action_leftparen_s100,
        action_leftsquarebracket_s101,
        action_initdeclarator_s102,
        action_typespecifier_s103,
        action_structdeclaration1_s104,
        action_structdeclaration_s105,
        action_specifierqualifierkind1_s106,
        action_specifierqualifierkind_s107,
        action_typequalifier_s108,
        action_comma_s109,
        action_commaopt_s110,
        action_equal_s111,
        action_leftparen_s112,
        action_typecast_s113,
        action_typecastopt_s114,
        action_typecastopt_s115,
        action_typecastopt_s116,
        action_dot_s117,
        action_leftsquarebracket_s118,
        action_initializerlist_s119,
        action_designationopt_s120,
        action_designation_s121,
        action_designator1_s122,
        action_designator_s123,
        action_identifier_s124,
        action_specifierqualifierkind1_s125,
        action_expression_s126,
        action_assignmentexpression_s127,
        action_typename_s128,
        action_typecastopt_s129,
        action_leftparen_s130,
        action_expression_s131,
        action_typecastopt_s132,
        action_typecastopt_s133,
        action_unaryexpression_s134,
        action_unaryexpression_s135,
        action_ampersand_s136,
        action_caret_s137,
        action_comma_s138,
        action_dash_s139,
        action_leftbracket_s140,
        action_percent_s141,
        action_plus_s142,
        action_question_s143,
        action_rightbracket_s144,
        action_slash_s145,
        action_star_s146,
        action_verticalbar_s147,
        action_doubleampersand_s148,
        action_doubleequal_s149,
        action_doubleleft_s150,
        action_doubleright_s151,
        action_doubleverticalbar_s152,
        action_exclaimequal_s153,
        action_leftbracketequal_s154,
        action_rightbracketequal_s155,
        action_leftcurlybracket_s156,
        action_dot_s157,
        action_equal_s158,
        action_leftparen_s159,
        action_leftsquarebracket_s160,
        action_ampersandequal_s161,
        action_caretequal_s162,
        action_dashequal_s163,
        action_dashrightbracket_s164,
        action_doubledash_s165,
        action_doubleplus_s166,
        action_percentequal_s167,
        action_plusequal_s168,
        action_slashequal_s169,
        action_starequal_s170,
        action_verticalbarequal_s171,
        action_doubleleftequal_s172,
        action_doublerightequal_s173,
        action_assignmentoperators_s174,
        action_break_s175,
        action_case_s176,
        action_continue_s177,
        action_default_s178,
        action_do_s179,
        action_for_s180,
        action_goto_s181,
        action_if_s182,
        action_return_s183,
        action_switch_s184,
        action_while_s185,
        action_identifier_s186,
        action_expression_s187,
        action_declaration_s188,
        action_compoundstatement_s189,
        action_blockitem1_s190,
        action_blockitem0_s191,
        action_blockitem_s192,
        action_statement_s193,
        action_expressionopt_s194,
        action_rightparen_s195,
        action_identifier_s196,
        action_declarationspecifier1_s197,
        action_identifierlistopt_s198,
        action_parametertypelist_s199,
        action_parameterlist_s200,
        action_parameterdeclaration_s201,
        action_identifierlist_s202,
        action_static_s203,
        action_typequalifier1_s204,
        action_typequalifier0_s205,
        action_rightcurlybracket_s206,
        action_structdeclaration_s207,
        action_specifierqualifierkind_s208,
        action_structdeclaratorlist_s209,
        action_structdeclarator_s210,
        action_declaratoropt_s211,
        action_declarator_s212,
        action_enumerator_s213,
        action_rightcurlybracket_s214,
        action_conditionalexpression_s215,
        action_unaryexpression_s216,
        action_constantexpression_s217,
        action_unaryexpression_s218,
        action_unaryexpression_s219,
        action_unaryexpression_s220,
        action_identifier_s221,
        action_constantexpression_s222,
        action_comma_s223,
        action_commaopt_s224,
        action_initializer_s225,
        action_equal_s226,
        action_designator_s227,
        action_pointeropt_s228,
        action_pointer_s229,
        action_abstractdeclaratoropt_s230,
        action_abstractdeclarator_s231,
        action_rightparen_s232,
        action_rightparen_s233,
        action_unaryexpression_s234,
        action_typename_s235,
        action_unaryexpression_s236,
        action_unaryexpression_s237,
        action_expression_s238,
        action_expression_s239,
        action_expression_s240,
        action_expression_s241,
        action_expression_s242,
        action_expression_s243,
        action_expression_s244,
        action_expression_s245,
        action_expression_s246,
        action_expression_s247,
        action_expression_s248,
        action_expression_s249,
        action_expression_s250,
        action_expression_s251,
        action_expression_s252,
        action_expression_s253,
        action_expression_s254,
        action_expression_s255,
        action_expression_s256,
        action_expression_s257,
        action_initializerlist_s258,
        action_identifier_s259,
        action_assignmentexpression_s260,
        action_argumentexpressionlistopt_s261,
        action_argumentexpressionlist_s262,
        action_expression_s263,
        action_identifier_s264,
        action_expression_s265,
        action_semicolon_s266,
        action_constantexpression_s267,
        action_semicolon_s268,
        action_colon_s269,
        action_identifier_s270,
        action_statement_s271,
        action_leftparen_s272,
        action_identifier_s273,
        action_leftparen_s274,
        action_expressionopt_s275,
        action_leftparen_s276,
        action_leftparen_s277,
        action_colon_s278,
        action_blockitem_s279,
        action_rightcurlybracket_s280,
        action_semicolon_s281,
        action_declarator_s282,
        action_pointeropt_s283,
        action_pointer_s284,
        action_abstractdeclaratoropt_s285,
        action_parameterdeclarationkind_s286,
        action_rightparen_s287,
        action_rightparen_s288,
        action_comma_s289,
        action_comma_s290,
        action_typequalifier0_s291,
        action_static_s292,
        action_star_s293,
        action_assignmentexpressionopt_s294,
        action_assignmentexpression_s295,
        action_comma_s296,
        action_semicolon_s297,
        action_colon_s298,
        action_rightsquarebracket_s299,
        action_designationopt_s300,
        action_rightcurlybracket_s301,
        action_leftparen_s302,
        action_directabstractdeclarator_s303,
        action_directabstractdeclaratoropt_s304,
        action_rightparen_s305,
        action_colon_s306,
        action_commaopt_s307,
        action_rightparen_s308,
        action_comma_s309,
        action_rightsquarebracket_s310,
        action_colon_s311,
        action_statement_s312,
        action_while_s313,
        action_semicolon_s314,
        action_expression_s315,
        action_declaration_s316,
        action_forinitclause_s317,
        action_semicolon_s318,
        action_expression_s319,
        action_semicolon_s320,
        action_expression_s321,
        action_expression_s322,
        action_statement_s323,
        action_leftparen_s324,
        action_ellipsis_s325,
        action_parameterdeclaration_s326,
        action_identifier_s327,
        action_assignmentexpression_s328,
        action_assignmentexpression_s329,
        action_rightsquarebracket_s330,
        action_rightsquarebracket_s331,
        action_structdeclarator_s332,
        action_constantexpression_s333,
        action_initializer_s334,
        action_abstractdeclarator_s335,
        action_leftparen_s336,
        action_leftsquarebracket_s337,
        action_expression_s338,
        action_rightcurlybracket_s339,
        action_assignmentexpression_s340,
        action_statement_s341,
        action_leftparen_s342,
        action_semicolon_s343,
        action_expressionopt_s344,
        action_rightparen_s345,
        action_rightparen_s346,
        action_rightparen_s347,
        action_rightsquarebracket_s348,
        action_rightsquarebracket_s349,
        action_rightparen_s350,
        action_parametertypelistopt_s351,
        action_parametertypelist_s352,
        action_star_s353,
        action_static_s354,
        action_typequalifier1_s355,
        action_typequalifier0_s356,
        action_expression_s357,
        action_semicolon_s358,
        action_statement_s359,
        action_statement_s360,
        action_statement_s361,
        action_rightparen_s362,
        action_rightsquarebracket_s363,
        action_typequalifier0_s364,
        action_static_s365,
        action_assignmentexpressionopt_s366,
        action_rightparen_s367,
        action_expressionopt_s368,
        action_else_s369,
        action_assignmentexpression_s370,
        action_assignmentexpression_s371,
        action_rightsquarebracket_s372,
        action_semicolon_s373,
        action_rightparen_s374,
        action_statement_s375,
        action_rightsquarebracket_s376,
        action_rightsquarebracket_s377,
        action_statement_s378,
    ],
    gotos: [
        goto_aug_s0,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_enum_s5,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_translationunit_s25,
        goto_invalid,
        goto_invalid,
        goto_declarationspecifier1_s28,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_structorunion_s33,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_star_s42,
        goto_invalid,
        goto_declarator_s44,
        goto_pointeropt_s45,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_leftcurlybracket_s52,
        goto_invalid,
        goto_typequalifier1_s54,
        goto_typequalifier0_s55,
        goto_equal_s56,
        goto_declarationspecifier1_s57,
        goto_declaration1_s58,
        goto_declaration0_s59,
        goto_invalid,
        goto_leftparen_s61,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s65,
        goto_leftcurlybracket_s66,
        goto_invalid,
        goto_enumeratorlist_s68,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_ampersand_s73,
        goto_dash_s74,
        goto_exclaim_s75,
        goto_leftcurlybracket_s76,
        goto_leftparen_s77,
        goto_plus_s78,
        goto_sizeof_s79,
        goto_star_s80,
        goto_tilde_s81,
        goto_doubledash_s82,
        goto_doubleplus_s83,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_unaryexpression_s92,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_leftcurlybracket_s97,
        goto_invalid,
        goto_invalid,
        goto_leftparen_s100,
        goto_leftsquarebracket_s101,
        goto_invalid,
        goto_invalid,
        goto_structdeclaration1_s104,
        goto_invalid,
        goto_specifierqualifierkind1_s106,
        goto_invalid,
        goto_invalid,
        goto_comma_s109,
        goto_invalid,
        goto_equal_s111,
        goto_leftparen_s112,
        goto_invalid,
        goto_typecastopt_s114,
        goto_typecastopt_s115,
        goto_typecastopt_s116,
        goto_invalid,
        goto_leftsquarebracket_s118,
        goto_initializerlist_s119,
        goto_designationopt_s120,
        goto_invalid,
        goto_designator1_s122,
        goto_invalid,
        goto_invalid,
        goto_specifierqualifierkind1_s125,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_typecastopt_s129,
        goto_leftparen_s130,
        goto_invalid,
        goto_typecastopt_s132,
        goto_typecastopt_s133,
        goto_invalid,
        goto_invalid,
        goto_ampersand_s136,
        goto_caret_s137,
        goto_comma_s138,
        goto_dash_s139,
        goto_leftbracket_s140,
        goto_percent_s141,
        goto_plus_s142,
        goto_question_s143,
        goto_rightbracket_s144,
        goto_slash_s145,
        goto_star_s146,
        goto_verticalbar_s147,
        goto_doubleampersand_s148,
        goto_doubleequal_s149,
        goto_doubleleft_s150,
        goto_doubleright_s151,
        goto_doubleverticalbar_s152,
        goto_exclaimequal_s153,
        goto_leftbracketequal_s154,
        goto_rightbracketequal_s155,
        goto_leftcurlybracket_s156,
        goto_invalid,
        goto_invalid,
        goto_leftparen_s159,
        goto_leftsquarebracket_s160,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_assignmentoperators_s174,
        goto_invalid,
        goto_case_s176,
        goto_invalid,
        goto_invalid,
        goto_do_s179,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_return_s183,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_blockitem1_s190,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_declarationspecifier1_s197,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_static_s203,
        goto_typequalifier1_s204,
        goto_typequalifier0_s205,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_unaryexpression_s216,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s223,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_pointeropt_s228,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_initializerlist_s258,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_colon_s269,
        goto_invalid,
        goto_invalid,
        goto_leftparen_s272,
        goto_invalid,
        goto_leftparen_s274,
        goto_invalid,
        goto_leftparen_s276,
        goto_leftparen_s277,
        goto_colon_s278,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_pointeropt_s283,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s289,
        goto_invalid,
        goto_typequalifier0_s291,
        goto_static_s292,
        goto_star_s293,
        goto_invalid,
        goto_invalid,
        goto_comma_s296,
        goto_invalid,
        goto_colon_s298,
        goto_invalid,
        goto_designationopt_s300,
        goto_invalid,
        goto_leftparen_s302,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_colon_s306,
        goto_invalid,
        goto_invalid,
        goto_comma_s309,
        goto_invalid,
        goto_colon_s311,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_forinitclause_s317,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_leftparen_s324,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_leftparen_s336,
        goto_leftsquarebracket_s337,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_leftparen_s342,
        goto_invalid,
        goto_invalid,
        goto_rightparen_s345,
        goto_rightparen_s346,
        goto_rightparen_s347,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_static_s354,
        goto_typequalifier1_s355,
        goto_typequalifier0_s356,
        goto_invalid,
        goto_semicolon_s358,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_typequalifier0_s364,
        goto_static_s365,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_else_s369,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_rightparen_s374,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
    ],
    token_kinds: [
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Const, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Static, true)),
            Some((TK::Const, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Const, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::RightParen, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Static, true)),
            Some((TK::Const, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::RightParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Static, true)),
            Some((TK::Const, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::Int, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Identifier, false)),
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightParen, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Colon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::Int, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Identifier, false)),
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Const, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Static, true)),
            Some((TK::Const, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Colon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Colon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::While, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Ellipsis, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Colon, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Star, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Star, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::RightParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Static, true)),
            Some((TK::Const, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeftEqual, true)),
            Some((TK::DoubleRightEqual, true)),
            Some((TK::AmpersandEqual, true)),
            Some((TK::CaretEqual, true)),
            Some((TK::DashEqual, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::PercentEqual, true)),
            Some((TK::PlusEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::SlashEqual, true)),
            Some((TK::StarEqual, true)),
            Some((TK::VerticalBarEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::Dot, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Const, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Static, true)),
            Some((TK::Const, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightParen, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightParen, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::Dash, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::Percent, true)),
            Some((TK::Plus, true)),
            Some((TK::Question, true)),
            Some((TK::RightBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Slash, true)),
            Some((TK::Star, true)),
            Some((TK::VerticalBar, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleDash, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Ampersand, true)),
            Some((TK::Dash, true)),
            Some((TK::Exclaim, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Plus, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Star, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            Some((TK::StringLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind>
for GrammarCParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize].iter().map_while(|t| *t).collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        false
    }
}
pub(crate) type Context<'i, I> = GssHead<'i, I, State, TokenKind>;
pub struct GrammarCParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    GlrParser<
        'i,
        State,
        L,
        ProdKind,
        TokenKind,
        NonTermKind,
        GrammarCParserDefinition,
        I,
        B,
    >,
);
#[allow(dead_code)]
impl<
    'i,
> GrammarCParser<
    'i,
    Input,
    StringLexer<Context<'i, Input>, State, TokenKind, TokenRecognizer, TERMINAL_COUNT>,
    DefaultBuilder,
> {
    pub fn new() -> Self {
        Self(
            GlrParser::new(
                &PARSER_DEFINITION,
                false,
                false,
                StringLexer::new(true, &RECOGNIZERS),
            ),
        )
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind>
for GrammarCParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = Forest<'i, I, ProdKind, TokenKind>;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(
        &'a mut self,
        file: F,
    ) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
#[allow(dead_code)]
#[derive(Debug)]
pub enum Recognizer {
    Stop,
    StrMatch(&'static str),
    RegexMatch(Lazy<Regex>),
}
#[allow(dead_code)]
#[derive(Debug)]
pub struct TokenRecognizer(TokenKind, Recognizer);
impl<'i> TokenRecognizerT<'i> for TokenRecognizer {
    fn recognize(&self, input: &'i str) -> Option<&'i str> {
        match &self {
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::StrMatch(s)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                if input.starts_with(s) {
                    log!("{}", "recognized".bold().green());
                    Some(s)
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::RegexMatch(r)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                let match_str = r.find(input);
                match match_str {
                    Some(x) => {
                        let x_str = x.as_str();
                        log!("{} '{}'", "recognized".bold().green(), x_str);
                        Some(x_str)
                    }
                    None => {
                        log!("{}", "not recognized".red());
                        None
                    }
                }
            }
            TokenRecognizer(_, Recognizer::Stop) => {
                logn!("{} STOP -- ", "    Recognizing".green());
                if input.is_empty() {
                    log!("{}", "recognized".bold().green());
                    Some("")
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
        }
    }
}
pub(crate) static RECOGNIZERS: [TokenRecognizer; TERMINAL_COUNT] = [
    TokenRecognizer(TokenKind::STOP, Recognizer::Stop),
    TokenRecognizer(TokenKind::Ampersand, Recognizer::StrMatch("&")),
    TokenRecognizer(TokenKind::Caret, Recognizer::StrMatch("^")),
    TokenRecognizer(TokenKind::Colon, Recognizer::StrMatch(":")),
    TokenRecognizer(TokenKind::Comma, Recognizer::StrMatch(",")),
    TokenRecognizer(TokenKind::Dash, Recognizer::StrMatch("-")),
    TokenRecognizer(TokenKind::Dot, Recognizer::StrMatch(".")),
    TokenRecognizer(TokenKind::Equal, Recognizer::StrMatch("=")),
    TokenRecognizer(TokenKind::Exclaim, Recognizer::StrMatch("!")),
    TokenRecognizer(TokenKind::LeftBracket, Recognizer::StrMatch("<")),
    TokenRecognizer(TokenKind::LeftCurlyBracket, Recognizer::StrMatch("{")),
    TokenRecognizer(TokenKind::LeftParen, Recognizer::StrMatch("(")),
    TokenRecognizer(TokenKind::LeftSquareBracket, Recognizer::StrMatch("[")),
    TokenRecognizer(TokenKind::Percent, Recognizer::StrMatch("%")),
    TokenRecognizer(TokenKind::Plus, Recognizer::StrMatch("+")),
    TokenRecognizer(TokenKind::Question, Recognizer::StrMatch("?")),
    TokenRecognizer(TokenKind::RightBracket, Recognizer::StrMatch(">")),
    TokenRecognizer(TokenKind::RightCurlyBracket, Recognizer::StrMatch("}")),
    TokenRecognizer(TokenKind::RightParen, Recognizer::StrMatch(")")),
    TokenRecognizer(TokenKind::RightSquareBracket, Recognizer::StrMatch("]")),
    TokenRecognizer(TokenKind::Semicolon, Recognizer::StrMatch(";")),
    TokenRecognizer(TokenKind::Sizeof, Recognizer::StrMatch("sizeof")),
    TokenRecognizer(TokenKind::Slash, Recognizer::StrMatch("/")),
    TokenRecognizer(TokenKind::Star, Recognizer::StrMatch("*")),
    TokenRecognizer(TokenKind::Tilde, Recognizer::StrMatch("~")),
    TokenRecognizer(TokenKind::VerticalBar, Recognizer::StrMatch("|")),
    TokenRecognizer(TokenKind::AmpersandEqual, Recognizer::StrMatch("&=")),
    TokenRecognizer(TokenKind::CaretEqual, Recognizer::StrMatch("^=")),
    TokenRecognizer(TokenKind::DashEqual, Recognizer::StrMatch("-=")),
    TokenRecognizer(TokenKind::DashRightBracket, Recognizer::StrMatch("->")),
    TokenRecognizer(TokenKind::DoubleAmpersand, Recognizer::StrMatch("&&")),
    TokenRecognizer(TokenKind::DoubleEqual, Recognizer::StrMatch("==")),
    TokenRecognizer(TokenKind::DoubleLeft, Recognizer::StrMatch("<<")),
    TokenRecognizer(TokenKind::DoubleDash, Recognizer::StrMatch("--")),
    TokenRecognizer(TokenKind::DoublePlus, Recognizer::StrMatch("++")),
    TokenRecognizer(TokenKind::DoubleRight, Recognizer::StrMatch(">>")),
    TokenRecognizer(TokenKind::DoubleVerticalBar, Recognizer::StrMatch("||")),
    TokenRecognizer(TokenKind::ExclaimEqual, Recognizer::StrMatch("!=")),
    TokenRecognizer(TokenKind::LeftBracketEqual, Recognizer::StrMatch("<=")),
    TokenRecognizer(TokenKind::PercentEqual, Recognizer::StrMatch("%=")),
    TokenRecognizer(TokenKind::PlusEqual, Recognizer::StrMatch("+=")),
    TokenRecognizer(TokenKind::RightBracketEqual, Recognizer::StrMatch(">=")),
    TokenRecognizer(TokenKind::SlashEqual, Recognizer::StrMatch("/=")),
    TokenRecognizer(TokenKind::StarEqual, Recognizer::StrMatch("*=")),
    TokenRecognizer(TokenKind::VerticalBarEqual, Recognizer::StrMatch("|=")),
    TokenRecognizer(TokenKind::Ellipsis, Recognizer::StrMatch("...")),
    TokenRecognizer(TokenKind::DoubleLeftEqual, Recognizer::StrMatch("<<=")),
    TokenRecognizer(TokenKind::DoubleRightEqual, Recognizer::StrMatch(">>=")),
    TokenRecognizer(TokenKind::Auto, Recognizer::StrMatch("auto")),
    TokenRecognizer(TokenKind::Break, Recognizer::StrMatch("break")),
    TokenRecognizer(TokenKind::Case, Recognizer::StrMatch("case")),
    TokenRecognizer(TokenKind::Char, Recognizer::StrMatch("char")),
    TokenRecognizer(TokenKind::Const, Recognizer::StrMatch("const")),
    TokenRecognizer(TokenKind::Continue, Recognizer::StrMatch("continue")),
    TokenRecognizer(TokenKind::Default, Recognizer::StrMatch("default")),
    TokenRecognizer(TokenKind::Do, Recognizer::StrMatch("do")),
    TokenRecognizer(TokenKind::Double, Recognizer::StrMatch("double")),
    TokenRecognizer(TokenKind::Else, Recognizer::StrMatch("else")),
    TokenRecognizer(TokenKind::Enum, Recognizer::StrMatch("enum")),
    TokenRecognizer(TokenKind::Extern, Recognizer::StrMatch("extern")),
    TokenRecognizer(TokenKind::Float, Recognizer::StrMatch("float")),
    TokenRecognizer(TokenKind::For, Recognizer::StrMatch("for")),
    TokenRecognizer(TokenKind::Goto, Recognizer::StrMatch("goto")),
    TokenRecognizer(TokenKind::If, Recognizer::StrMatch("if")),
    TokenRecognizer(TokenKind::Inline, Recognizer::StrMatch("inline")),
    TokenRecognizer(TokenKind::Int, Recognizer::StrMatch("int")),
    TokenRecognizer(TokenKind::Long, Recognizer::StrMatch("long")),
    TokenRecognizer(TokenKind::Register, Recognizer::StrMatch("register")),
    TokenRecognizer(TokenKind::Restrict, Recognizer::StrMatch("restrict")),
    TokenRecognizer(TokenKind::Return, Recognizer::StrMatch("return")),
    TokenRecognizer(TokenKind::Short, Recognizer::StrMatch("short")),
    TokenRecognizer(TokenKind::Signed, Recognizer::StrMatch("signed")),
    TokenRecognizer(TokenKind::Static, Recognizer::StrMatch("static")),
    TokenRecognizer(TokenKind::Struct, Recognizer::StrMatch("struct")),
    TokenRecognizer(TokenKind::Switch, Recognizer::StrMatch("switch")),
    TokenRecognizer(TokenKind::Typedef, Recognizer::StrMatch("typedef")),
    TokenRecognizer(TokenKind::UnderscoreBool, Recognizer::StrMatch("_Bool")),
    TokenRecognizer(TokenKind::UnderscoreComplex, Recognizer::StrMatch("_Complex")),
    TokenRecognizer(TokenKind::Union, Recognizer::StrMatch("union")),
    TokenRecognizer(TokenKind::Unsigned, Recognizer::StrMatch("unsigned")),
    TokenRecognizer(TokenKind::Void, Recognizer::StrMatch("void")),
    TokenRecognizer(TokenKind::Volatile, Recognizer::StrMatch("volatile")),
    TokenRecognizer(TokenKind::While, Recognizer::StrMatch("while")),
    TokenRecognizer(
        TokenKind::Num,
        Recognizer::RegexMatch(
            Lazy::new(|| {
                Regex::new(
                        concat!(
                            "^(",
                            "[+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+\\-]?\\d+)?", ")"
                        ),
                    )
                    .unwrap()
            }),
        ),
    ),
    TokenRecognizer(
        TokenKind::Identifier,
        Recognizer::RegexMatch(
            Lazy::new(|| {
                Regex::new(concat!("^(", "\\p{XID_Start}\\p{XID_Continue}*", ")"))
                    .unwrap()
            }),
        ),
    ),
    TokenRecognizer(
        TokenKind::StringLiteral,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^(", "\"[^\"]*\"", ")")).unwrap() }),
        ),
    ),
];
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl DefaultBuilder {
    #[allow(dead_code)]
    pub fn new() -> Self {
        Self { res_stack: vec![] }
    }
}
impl Builder for DefaultBuilder {
    type Output = grammar_c_actions::TranslationUnit;
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::TranslationUnit(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind>
for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &mut Context<'i, Input>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::Ampersand => Terminal::Ampersand,
            TokenKind::Caret => Terminal::Caret,
            TokenKind::Colon => Terminal::Colon,
            TokenKind::Comma => Terminal::Comma,
            TokenKind::Dash => Terminal::Dash,
            TokenKind::Dot => Terminal::Dot,
            TokenKind::Equal => Terminal::Equal,
            TokenKind::Exclaim => Terminal::Exclaim,
            TokenKind::LeftBracket => Terminal::LeftBracket,
            TokenKind::LeftCurlyBracket => Terminal::LeftCurlyBracket,
            TokenKind::LeftParen => Terminal::LeftParen,
            TokenKind::LeftSquareBracket => Terminal::LeftSquareBracket,
            TokenKind::Percent => Terminal::Percent,
            TokenKind::Plus => Terminal::Plus,
            TokenKind::Question => Terminal::Question,
            TokenKind::RightBracket => Terminal::RightBracket,
            TokenKind::RightCurlyBracket => Terminal::RightCurlyBracket,
            TokenKind::RightParen => Terminal::RightParen,
            TokenKind::RightSquareBracket => Terminal::RightSquareBracket,
            TokenKind::Semicolon => Terminal::Semicolon,
            TokenKind::Sizeof => Terminal::Sizeof,
            TokenKind::Slash => Terminal::Slash,
            TokenKind::Star => Terminal::Star,
            TokenKind::Tilde => Terminal::Tilde,
            TokenKind::VerticalBar => Terminal::VerticalBar,
            TokenKind::AmpersandEqual => Terminal::AmpersandEqual,
            TokenKind::CaretEqual => Terminal::CaretEqual,
            TokenKind::DashEqual => Terminal::DashEqual,
            TokenKind::DashRightBracket => Terminal::DashRightBracket,
            TokenKind::DoubleAmpersand => Terminal::DoubleAmpersand,
            TokenKind::DoubleEqual => Terminal::DoubleEqual,
            TokenKind::DoubleLeft => Terminal::DoubleLeft,
            TokenKind::DoubleDash => Terminal::DoubleDash,
            TokenKind::DoublePlus => Terminal::DoublePlus,
            TokenKind::DoubleRight => Terminal::DoubleRight,
            TokenKind::DoubleVerticalBar => Terminal::DoubleVerticalBar,
            TokenKind::ExclaimEqual => Terminal::ExclaimEqual,
            TokenKind::LeftBracketEqual => Terminal::LeftBracketEqual,
            TokenKind::PercentEqual => Terminal::PercentEqual,
            TokenKind::PlusEqual => Terminal::PlusEqual,
            TokenKind::RightBracketEqual => Terminal::RightBracketEqual,
            TokenKind::SlashEqual => Terminal::SlashEqual,
            TokenKind::StarEqual => Terminal::StarEqual,
            TokenKind::VerticalBarEqual => Terminal::VerticalBarEqual,
            TokenKind::Ellipsis => Terminal::Ellipsis,
            TokenKind::DoubleLeftEqual => Terminal::DoubleLeftEqual,
            TokenKind::DoubleRightEqual => Terminal::DoubleRightEqual,
            TokenKind::Auto => Terminal::Auto,
            TokenKind::Break => Terminal::Break,
            TokenKind::Case => Terminal::Case,
            TokenKind::Char => Terminal::Char,
            TokenKind::Const => Terminal::Const,
            TokenKind::Continue => Terminal::Continue,
            TokenKind::Default => Terminal::Default,
            TokenKind::Do => Terminal::Do,
            TokenKind::Double => Terminal::Double,
            TokenKind::Else => Terminal::Else,
            TokenKind::Enum => Terminal::Enum,
            TokenKind::Extern => Terminal::Extern,
            TokenKind::Float => Terminal::Float,
            TokenKind::For => Terminal::For,
            TokenKind::Goto => Terminal::Goto,
            TokenKind::If => Terminal::If,
            TokenKind::Inline => Terminal::Inline,
            TokenKind::Int => Terminal::Int,
            TokenKind::Long => Terminal::Long,
            TokenKind::Register => Terminal::Register,
            TokenKind::Restrict => Terminal::Restrict,
            TokenKind::Return => Terminal::Return,
            TokenKind::Short => Terminal::Short,
            TokenKind::Signed => Terminal::Signed,
            TokenKind::Static => Terminal::Static,
            TokenKind::Struct => Terminal::Struct,
            TokenKind::Switch => Terminal::Switch,
            TokenKind::Typedef => Terminal::Typedef,
            TokenKind::UnderscoreBool => Terminal::UnderscoreBool,
            TokenKind::UnderscoreComplex => Terminal::UnderscoreComplex,
            TokenKind::Union => Terminal::Union,
            TokenKind::Unsigned => Terminal::Unsigned,
            TokenKind::Void => Terminal::Void,
            TokenKind::Volatile => Terminal::Volatile,
            TokenKind::While => Terminal::While,
            TokenKind::Num => Terminal::Num(grammar_c_actions::num(&*context, token)),
            TokenKind::Identifier => {
                Terminal::Identifier(grammar_c_actions::identifier(&*context, token))
            }
            TokenKind::StringLiteral => {
                Terminal::StringLiteral(
                    grammar_c_actions::string_literal(&*context, token),
                )
            }
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &mut Context<'i, Input>,
        prod: ProdKind,
        _prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::TranslationUnitP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ExternalDeclaration(p0)) => {
                        NonTerminal::TranslationUnit(
                            grammar_c_actions::translation_unit_external_declaration(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TranslationUnitP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::TranslationUnit(p0)),
                        Symbol::NonTerminal(NonTerminal::ExternalDeclaration(p1)),
                    ) => {
                        NonTerminal::TranslationUnit(
                            grammar_c_actions::translation_unit_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExternalDeclarationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::FunctionDefinition(p0)) => {
                        NonTerminal::ExternalDeclaration(
                            grammar_c_actions::external_declaration_function_definition(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExternalDeclarationP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declaration(p0)) => {
                        NonTerminal::ExternalDeclaration(
                            grammar_c_actions::external_declaration_declaration(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FunctionDefinitionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifier1(p0)),
                        Symbol::NonTerminal(NonTerminal::Declarator(p1)),
                        Symbol::NonTerminal(NonTerminal::Declaration0(p2)),
                        Symbol::NonTerminal(NonTerminal::CompoundStatement(p3)),
                    ) => {
                        NonTerminal::FunctionDefinition(
                            grammar_c_actions::function_definition_c1(
                                &*context,
                                p0,
                                p1,
                                p2,
                                p3,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationSpecifier1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifier1(p0)),
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifier(p1)),
                    ) => {
                        NonTerminal::DeclarationSpecifier1(
                            grammar_c_actions::declaration_specifier1_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationSpecifier1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::DeclarationSpecifier(p0)) => {
                        NonTerminal::DeclarationSpecifier1(
                            grammar_c_actions::declaration_specifier1_declaration_specifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Declaration1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Declaration1(p0)),
                        Symbol::NonTerminal(NonTerminal::Declaration(p1)),
                    ) => {
                        NonTerminal::Declaration1(
                            grammar_c_actions::declaration1_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Declaration1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declaration(p0)) => {
                        NonTerminal::Declaration1(
                            grammar_c_actions::declaration1_declaration(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Declaration0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declaration1(p0)) => {
                        NonTerminal::Declaration0(
                            grammar_c_actions::declaration0_declaration1(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Declaration0P2 => {
                NonTerminal::Declaration0(grammar_c_actions::declaration0_empty(context))
            }
            ProdKind::DeclarationSpecifierP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::StorageClassSpecifier(p0)) => {
                        NonTerminal::DeclarationSpecifier(
                            grammar_c_actions::declaration_specifier_storage_class_specifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationSpecifierP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TypeSpecifier(p0)) => {
                        NonTerminal::DeclarationSpecifier(
                            grammar_c_actions::declaration_specifier_type_specifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationSpecifierP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TypeQualifier(p0)) => {
                        NonTerminal::DeclarationSpecifier(
                            grammar_c_actions::declaration_specifier_type_qualifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationSpecifierP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::FunctionSpecifier(p0)) => {
                        NonTerminal::DeclarationSpecifier(
                            grammar_c_actions::declaration_specifier_function_specifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StorageClassSpecifierP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StorageClassSpecifier(
                    grammar_c_actions::storage_class_specifier_typedef(context),
                )
            }
            ProdKind::StorageClassSpecifierP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StorageClassSpecifier(
                    grammar_c_actions::storage_class_specifier_extern(context),
                )
            }
            ProdKind::StorageClassSpecifierP3 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StorageClassSpecifier(
                    grammar_c_actions::storage_class_specifier_static(context),
                )
            }
            ProdKind::StorageClassSpecifierP4 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StorageClassSpecifier(
                    grammar_c_actions::storage_class_specifier_auto(context),
                )
            }
            ProdKind::StorageClassSpecifierP5 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StorageClassSpecifier(
                    grammar_c_actions::storage_class_specifier_register(context),
                )
            }
            ProdKind::TypeSpecifierP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_void(context),
                )
            }
            ProdKind::TypeSpecifierP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_char(context),
                )
            }
            ProdKind::TypeSpecifierP3 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_short(context),
                )
            }
            ProdKind::TypeSpecifierP4 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_int(context),
                )
            }
            ProdKind::TypeSpecifierP5 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_long(context),
                )
            }
            ProdKind::TypeSpecifierP6 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_float(context),
                )
            }
            ProdKind::TypeSpecifierP7 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_double(context),
                )
            }
            ProdKind::TypeSpecifierP8 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_signed(context),
                )
            }
            ProdKind::TypeSpecifierP9 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_unsigned(context),
                )
            }
            ProdKind::TypeSpecifierP10 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_underscore_bool(context),
                )
            }
            ProdKind::TypeSpecifierP11 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_underscore_complex(context),
                )
            }
            ProdKind::TypeSpecifierP12 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::StructOrUnionSpecifier(p0)) => {
                        NonTerminal::TypeSpecifier(
                            grammar_c_actions::type_specifier_struct_or_union_specifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeSpecifierP13 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::EnumSpecifier(p0)) => {
                        NonTerminal::TypeSpecifier(
                            grammar_c_actions::type_specifier_enum_specifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeSpecifierP14 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TypedefName(p0)) => {
                        NonTerminal::TypeSpecifier(
                            grammar_c_actions::type_specifier_typedef_name(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructOrUnionSpecifierP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::StructOrUnion(p0)),
                        Symbol::NonTerminal(NonTerminal::IdentifierOpt(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::StructDeclaration1(p2)),
                        _,
                    ) => {
                        NonTerminal::StructOrUnionSpecifier(
                            grammar_c_actions::struct_or_union_specifier_c1(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdentifierOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Identifier(p0)) => {
                        NonTerminal::IdentifierOpt(
                            grammar_c_actions::identifier_opt_identifier(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdentifierOptP2 => {
                NonTerminal::IdentifierOpt(
                    grammar_c_actions::identifier_opt_empty(context),
                )
            }
            ProdKind::StructDeclaration1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::StructDeclaration1(p0)),
                        Symbol::NonTerminal(NonTerminal::StructDeclaration(p1)),
                    ) => {
                        NonTerminal::StructDeclaration1(
                            grammar_c_actions::struct_declaration1_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructDeclaration1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::StructDeclaration(p0)) => {
                        NonTerminal::StructDeclaration1(
                            grammar_c_actions::struct_declaration1_struct_declaration(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructOrUnionSpecifierP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::StructOrUnion(p0)),
                        Symbol::Terminal(Terminal::Identifier(p1)),
                    ) => {
                        NonTerminal::StructOrUnionSpecifier(
                            grammar_c_actions::struct_or_union_specifier_c2(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructOrUnionP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StructOrUnion(
                    grammar_c_actions::struct_or_union_struct(context),
                )
            }
            ProdKind::StructOrUnionP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StructOrUnion(
                    grammar_c_actions::struct_or_union_union(context),
                )
            }
            ProdKind::StructDeclarationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::SpecifierQualifierKind1(p0)),
                        Symbol::NonTerminal(NonTerminal::StructDeclaratorList(p1)),
                        _,
                    ) => {
                        NonTerminal::StructDeclaration(
                            grammar_c_actions::struct_declaration_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SpecifierQualifierKind1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::SpecifierQualifierKind1(p0)),
                        Symbol::NonTerminal(NonTerminal::SpecifierQualifierKind(p1)),
                    ) => {
                        NonTerminal::SpecifierQualifierKind1(
                            grammar_c_actions::specifier_qualifier_kind1_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SpecifierQualifierKind1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SpecifierQualifierKind(p0)) => {
                        NonTerminal::SpecifierQualifierKind1(
                            grammar_c_actions::specifier_qualifier_kind1_specifier_qualifier_kind(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SpecifierQualifierKindP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TypeSpecifier(p0)) => {
                        NonTerminal::SpecifierQualifierKind(
                            grammar_c_actions::specifier_qualifier_kind_type_specifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SpecifierQualifierKindP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TypeQualifier(p0)) => {
                        NonTerminal::SpecifierQualifierKind(
                            grammar_c_actions::specifier_qualifier_kind_type_qualifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeQualifierP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeQualifier(
                    grammar_c_actions::type_qualifier_const(context),
                )
            }
            ProdKind::TypeQualifierP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeQualifier(
                    grammar_c_actions::type_qualifier_restrict(context),
                )
            }
            ProdKind::TypeQualifierP3 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeQualifier(
                    grammar_c_actions::type_qualifier_volatile(context),
                )
            }
            ProdKind::StructDeclaratorListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::StructDeclaratorList(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::StructDeclarator(p1)),
                    ) => {
                        NonTerminal::StructDeclaratorList(
                            grammar_c_actions::struct_declarator_list_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructDeclaratorListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::StructDeclarator(p0)) => {
                        NonTerminal::StructDeclaratorList(
                            grammar_c_actions::struct_declarator_list_struct_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructDeclaratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declarator(p0)) => {
                        NonTerminal::StructDeclarator(
                            grammar_c_actions::struct_declarator_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructDeclaratorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::DeclaratorOpt(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ConstantExpression(p1)),
                    ) => {
                        NonTerminal::StructDeclarator(
                            grammar_c_actions::struct_declarator_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclaratorOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declarator(p0)) => {
                        NonTerminal::DeclaratorOpt(
                            grammar_c_actions::declarator_opt_declarator(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclaratorOptP2 => {
                NonTerminal::DeclaratorOpt(
                    grammar_c_actions::declarator_opt_empty(context),
                )
            }
            ProdKind::DeclaratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::PointerOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p1)),
                    ) => {
                        NonTerminal::Declarator(
                            grammar_c_actions::declarator_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PointerOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Pointer(p0)) => {
                        NonTerminal::PointerOpt(
                            grammar_c_actions::pointer_opt_pointer(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PointerOptP2 => {
                NonTerminal::PointerOpt(grammar_c_actions::pointer_opt_empty(context))
            }
            ProdKind::PointerP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::TypeQualifier0(p0))) => {
                        NonTerminal::Pointer(
                            grammar_c_actions::pointer_type_qualifier0(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeQualifier1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::TypeQualifier1(p0)),
                        Symbol::NonTerminal(NonTerminal::TypeQualifier(p1)),
                    ) => {
                        NonTerminal::TypeQualifier1(
                            grammar_c_actions::type_qualifier1_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeQualifier1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TypeQualifier(p0)) => {
                        NonTerminal::TypeQualifier1(
                            grammar_c_actions::type_qualifier1_type_qualifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeQualifier0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TypeQualifier1(p0)) => {
                        NonTerminal::TypeQualifier0(
                            grammar_c_actions::type_qualifier0_type_qualifier1(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeQualifier0P2 => {
                NonTerminal::TypeQualifier0(
                    grammar_c_actions::type_qualifier0_empty(context),
                )
            }
            ProdKind::PointerP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifier0(p0)),
                        Symbol::NonTerminal(NonTerminal::Pointer(p1)),
                    ) => {
                        NonTerminal::Pointer(
                            grammar_c_actions::pointer_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Identifier(p0)) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_identifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Declarator(p0)), _) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifier0(p1)),
                        Symbol::NonTerminal(NonTerminal::AssignmentExpressionOpt(p2)),
                        _,
                    ) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_c3(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AssignmentExpressionOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::AssignmentExpression(p0)) => {
                        NonTerminal::AssignmentExpressionOpt(
                            grammar_c_actions::assignment_expression_opt_assignment_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AssignmentExpressionOptP2 => {
                NonTerminal::AssignmentExpressionOpt(
                    grammar_c_actions::assignment_expression_opt_empty(context),
                )
            }
            ProdKind::DirectDeclaratorP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p0)),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifier0(p1)),
                        Symbol::NonTerminal(NonTerminal::AssignmentExpression(p2)),
                        _,
                    ) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_c4(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP5 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifier1(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::AssignmentExpression(p2)),
                        _,
                    ) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_c5(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP6 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifier0(p1)),
                        _,
                        _,
                    ) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_c6(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP7 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ParameterTypeList(p1)),
                        _,
                    ) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_c7(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP8 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::IdentifierListOpt(p1)),
                        _,
                    ) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_c8(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdentifierListOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::IdentifierList(p0)) => {
                        NonTerminal::IdentifierListOpt(
                            grammar_c_actions::identifier_list_opt_identifier_list(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdentifierListOptP2 => {
                NonTerminal::IdentifierListOpt(
                    grammar_c_actions::identifier_list_opt_empty(context),
                )
            }
            ProdKind::ExpressionCommaExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::Expression(
                            grammar_c_actions::expression_comma_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::AssignmentExpression(p0)) => {
                        NonTerminal::Expression(
                            grammar_c_actions::expression_assignment_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AssignmentOperatorsP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::AssignmentOperators(
                    grammar_c_actions::assignment_operators_equal(context),
                )
            }
            ProdKind::AssignmentOperatorsP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::AssignmentOperators(
                    grammar_c_actions::assignment_operators_plus_equal(context),
                )
            }
            ProdKind::AssignmentOperatorsP3 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::AssignmentOperators(
                    grammar_c_actions::assignment_operators_dash_equal(context),
                )
            }
            ProdKind::AssignmentOperatorsP4 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::AssignmentOperators(
                    grammar_c_actions::assignment_operators_star_equal(context),
                )
            }
            ProdKind::AssignmentOperatorsP5 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::AssignmentOperators(
                    grammar_c_actions::assignment_operators_slash_equal(context),
                )
            }
            ProdKind::AssignmentOperatorsP6 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::AssignmentOperators(
                    grammar_c_actions::assignment_operators_percent_equal(context),
                )
            }
            ProdKind::AssignmentOperatorsP7 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::AssignmentOperators(
                    grammar_c_actions::assignment_operators_double_left_equal(context),
                )
            }
            ProdKind::AssignmentOperatorsP8 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::AssignmentOperators(
                    grammar_c_actions::assignment_operators_double_right_equal(context),
                )
            }
            ProdKind::AssignmentOperatorsP9 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::AssignmentOperators(
                    grammar_c_actions::assignment_operators_ampersand_equal(context),
                )
            }
            ProdKind::AssignmentOperatorsP10 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::AssignmentOperators(
                    grammar_c_actions::assignment_operators_caret_equal(context),
                )
            }
            ProdKind::AssignmentOperatorsP11 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::AssignmentOperators(
                    grammar_c_actions::assignment_operators_vertical_bar_equal(context),
                )
            }
            ProdKind::AssignmentExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ConditionalExpression(p0)) => {
                        NonTerminal::AssignmentExpression(
                            grammar_c_actions::assignment_expression_conditional_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AssignmentExpressionP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::UnaryExpression(p0)),
                        Symbol::NonTerminal(NonTerminal::AssignmentOperators(p1)),
                        Symbol::NonTerminal(NonTerminal::Expression(p2)),
                    ) => {
                        NonTerminal::AssignmentExpression(
                            grammar_c_actions::assignment_expression_c2(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConditionalExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p0)) => {
                        NonTerminal::ConditionalExpression(
                            grammar_c_actions::conditional_expression_arithmetic_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConditionalExpressionP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p2)),
                    ) => {
                        NonTerminal::ConditionalExpression(
                            grammar_c_actions::conditional_expression_c2(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::UnaryExpression(p0)) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_unary_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionLogicalOrExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_logical_or_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionLogicalAndExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_logical_and_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionBitwiseOrExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_bitwise_or_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionBitwiseExclusiveOrExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_bitwise_exclusive_or_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionBitwiseAndExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_bitwise_and_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionLogicalEqualExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_logical_equal_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionLogicalNotEqualExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_logical_not_equal_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionLessThanExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_less_than_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionLessThanOrEqualExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_less_than_or_equal_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionGreaterThanExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_greater_than_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionGreaterThanOrEqualExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_greater_than_or_equal_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionBitwiseLeftShiftExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_bitwise_left_shift_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionBitwiseRightShiftExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_bitwise_right_shift_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionAdditionExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_addition_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionSubtractionExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_subtraction_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionMultiplyExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_multiply_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionDivisionExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_division_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionModuloExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_modulo_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeCastP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::TypeName(p0)), _) => {
                        NonTerminal::TypeCast(
                            grammar_c_actions::type_cast_type_name(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::PrimaryExpression(p0)) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_primary_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionPreIncrementExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::UnaryExpression(p0))) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_pre_increment_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionPreDecrementExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::UnaryExpression(p0))) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_pre_decrement_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionLogicalNotExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeCastOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::UnaryExpression(p1)),
                    ) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_logical_not_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeCastOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TypeCast(p0)) => {
                        NonTerminal::TypeCastOpt(
                            grammar_c_actions::type_cast_opt_type_cast(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeCastOptP2 => {
                NonTerminal::TypeCastOpt(grammar_c_actions::type_cast_opt_empty(context))
            }
            ProdKind::UnaryExpressionBitwiseNotExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeCastOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::UnaryExpression(p1)),
                    ) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_bitwise_not_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionPlusExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeCastOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::UnaryExpression(p1)),
                    ) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_plus_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionMinusExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeCastOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::UnaryExpression(p1)),
                    ) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_minus_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionDereferenceExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeCastOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::UnaryExpression(p1)),
                    ) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_dereference_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionReferenceExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeCastOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::UnaryExpression(p1)),
                    ) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_reference_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionSizeOfExpressionExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Expression(p0))) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_size_of_expression_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionSizeOfTypenameExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (_, _, Symbol::NonTerminal(NonTerminal::TypeName(p0)), _) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_size_of_typename_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionArrayAccessExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::UnaryExpression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                        _,
                    ) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_array_access_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionFunctionCallExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::UnaryExpression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ArgumentExpressionListOpt(p1)),
                        _,
                    ) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_function_call_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArgumentExpressionListOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ArgumentExpressionList(p0)) => {
                        NonTerminal::ArgumentExpressionListOpt(
                            grammar_c_actions::argument_expression_list_opt_argument_expression_list(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArgumentExpressionListOptP2 => {
                NonTerminal::ArgumentExpressionListOpt(
                    grammar_c_actions::argument_expression_list_opt_empty(context),
                )
            }
            ProdKind::UnaryExpressionAccessExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::UnaryExpression(p0)),
                        _,
                        Symbol::Terminal(Terminal::Identifier(p1)),
                    ) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_access_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionPointerAccessExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::UnaryExpression(p0)),
                        _,
                        Symbol::Terminal(Terminal::Identifier(p1)),
                    ) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_pointer_access_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionPostIncrementExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::UnaryExpression(p0)), _) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_post_increment_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionPostDecrementExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::UnaryExpression(p0)), _) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_post_decrement_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionCompoundLiteralExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::TypeCast(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::InitializerList(p1)),
                        Symbol::NonTerminal(NonTerminal::CommaOpt(p2)),
                        _,
                    ) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_compound_literal_expression(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CommaOptP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::CommaOpt(grammar_c_actions::comma_opt_comma(context))
            }
            ProdKind::CommaOptP2 => {
                NonTerminal::CommaOpt(grammar_c_actions::comma_opt_empty(context))
            }
            ProdKind::PrimaryExpressionNumber => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Num(p0)) => {
                        NonTerminal::PrimaryExpression(
                            grammar_c_actions::primary_expression_number(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PrimaryExpressionIdentifier => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Identifier(p0)) => {
                        NonTerminal::PrimaryExpression(
                            grammar_c_actions::primary_expression_identifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PrimaryExpressionStringLiteral => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::StringLiteral(p0)) => {
                        NonTerminal::PrimaryExpression(
                            grammar_c_actions::primary_expression_string_literal(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PrimaryExpressionParen => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Expression(p0)), _) => {
                        NonTerminal::PrimaryExpression(
                            grammar_c_actions::primary_expression_paren(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArgumentExpressionListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::AssignmentExpression(p0)) => {
                        NonTerminal::ArgumentExpressionList(
                            grammar_c_actions::argument_expression_list_assignment_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArgumentExpressionListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ArgumentExpressionList(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::AssignmentExpression(p1)),
                    ) => {
                        NonTerminal::ArgumentExpressionList(
                            grammar_c_actions::argument_expression_list_c2(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeNameP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::SpecifierQualifierKind1(p0)),
                        Symbol::NonTerminal(NonTerminal::AbstractDeclaratorOpt(p1)),
                    ) => {
                        NonTerminal::TypeName(
                            grammar_c_actions::type_name_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AbstractDeclaratorOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::AbstractDeclarator(p0)) => {
                        NonTerminal::AbstractDeclaratorOpt(
                            grammar_c_actions::abstract_declarator_opt_abstract_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AbstractDeclaratorOptP2 => {
                NonTerminal::AbstractDeclaratorOpt(
                    grammar_c_actions::abstract_declarator_opt_empty(context),
                )
            }
            ProdKind::AbstractDeclaratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Pointer(p0)) => {
                        NonTerminal::AbstractDeclarator(
                            grammar_c_actions::abstract_declarator_pointer(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AbstractDeclaratorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::PointerOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::DirectAbstractDeclarator(p1)),
                    ) => {
                        NonTerminal::AbstractDeclarator(
                            grammar_c_actions::abstract_declarator_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::AbstractDeclarator(p0)), _) => {
                        NonTerminal::DirectAbstractDeclarator(
                            grammar_c_actions::direct_abstract_declarator_abstract_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(
                            NonTerminal::DirectAbstractDeclaratorOpt(p0),
                        ),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifier0(p1)),
                        Symbol::NonTerminal(NonTerminal::AssignmentExpressionOpt(p2)),
                        _,
                    ) => {
                        NonTerminal::DirectAbstractDeclarator(
                            grammar_c_actions::direct_abstract_declarator_c2(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::DirectAbstractDeclarator(p0)) => {
                        NonTerminal::DirectAbstractDeclaratorOpt(
                            grammar_c_actions::direct_abstract_declarator_opt_direct_abstract_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorOptP2 => {
                NonTerminal::DirectAbstractDeclaratorOpt(
                    grammar_c_actions::direct_abstract_declarator_opt_empty(context),
                )
            }
            ProdKind::DirectAbstractDeclaratorP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(
                            NonTerminal::DirectAbstractDeclaratorOpt(p0),
                        ),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifier0(p1)),
                        Symbol::NonTerminal(NonTerminal::AssignmentExpression(p2)),
                        _,
                    ) => {
                        NonTerminal::DirectAbstractDeclarator(
                            grammar_c_actions::direct_abstract_declarator_c3(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(
                            NonTerminal::DirectAbstractDeclaratorOpt(p0),
                        ),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifier1(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::AssignmentExpression(p2)),
                        _,
                    ) => {
                        NonTerminal::DirectAbstractDeclarator(
                            grammar_c_actions::direct_abstract_declarator_c4(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorP5 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(
                            NonTerminal::DirectAbstractDeclaratorOpt(p0),
                        ),
                        _,
                        _,
                        _,
                    ) => {
                        NonTerminal::DirectAbstractDeclarator(
                            grammar_c_actions::direct_abstract_declarator_direct_abstract_declarator_opt(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorP6 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(
                            NonTerminal::DirectAbstractDeclaratorOpt(p0),
                        ),
                        _,
                        Symbol::NonTerminal(NonTerminal::ParameterTypeListOpt(p1)),
                        _,
                    ) => {
                        NonTerminal::DirectAbstractDeclarator(
                            grammar_c_actions::direct_abstract_declarator_c6(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterTypeListOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ParameterTypeList(p0)) => {
                        NonTerminal::ParameterTypeListOpt(
                            grammar_c_actions::parameter_type_list_opt_parameter_type_list(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterTypeListOptP2 => {
                NonTerminal::ParameterTypeListOpt(
                    grammar_c_actions::parameter_type_list_opt_empty(context),
                )
            }
            ProdKind::ParameterTypeListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ParameterList(p0)) => {
                        NonTerminal::ParameterTypeList(
                            grammar_c_actions::parameter_type_list_parameter_list1(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterTypeListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::ParameterList(p0)), _, _) => {
                        NonTerminal::ParameterTypeList(
                            grammar_c_actions::parameter_type_list_parameter_list2(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ParameterDeclaration(p0)) => {
                        NonTerminal::ParameterList(
                            grammar_c_actions::parameter_list_parameter_declaration(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ParameterList(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ParameterDeclaration(p1)),
                    ) => {
                        NonTerminal::ParameterList(
                            grammar_c_actions::parameter_list_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterDeclarationKindP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declarator(p0)) => {
                        NonTerminal::ParameterDeclarationKind(
                            grammar_c_actions::parameter_declaration_kind_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterDeclarationKindP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::AbstractDeclaratorOpt(p0)) => {
                        NonTerminal::ParameterDeclarationKind(
                            grammar_c_actions::parameter_declaration_kind_abstract_declarator_opt(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterDeclarationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifier1(p0)),
                        Symbol::NonTerminal(NonTerminal::ParameterDeclarationKind(p1)),
                    ) => {
                        NonTerminal::ParameterDeclaration(
                            grammar_c_actions::parameter_declaration_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitializerListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::DesignationOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::Initializer(p1)),
                    ) => {
                        NonTerminal::InitializerList(
                            grammar_c_actions::initializer_list_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DesignationOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Designation(p0)) => {
                        NonTerminal::DesignationOpt(
                            grammar_c_actions::designation_opt_designation(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DesignationOptP2 => {
                NonTerminal::DesignationOpt(
                    grammar_c_actions::designation_opt_empty(context),
                )
            }
            ProdKind::InitializerListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::InitializerList(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::DesignationOpt(p1)),
                        Symbol::NonTerminal(NonTerminal::Initializer(p2)),
                    ) => {
                        NonTerminal::InitializerList(
                            grammar_c_actions::initializer_list_c2(&*context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DesignationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::Designator1(p0)), _) => {
                        NonTerminal::Designation(
                            grammar_c_actions::designation_designator1(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Designator1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Designator1(p0)),
                        Symbol::NonTerminal(NonTerminal::Designator(p1)),
                    ) => {
                        NonTerminal::Designator1(
                            grammar_c_actions::designator1_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::Designator1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Designator(p0)) => {
                        NonTerminal::Designator1(
                            grammar_c_actions::designator1_designator(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DesignatorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::ConstantExpression(p0)), _) => {
                        NonTerminal::Designator(
                            grammar_c_actions::designator_constant_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DesignatorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::Terminal(Terminal::Identifier(p0))) => {
                        NonTerminal::Designator(
                            grammar_c_actions::designator_identifier(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConstantExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ConditionalExpression(p0)) => {
                        NonTerminal::ConstantExpression(
                            grammar_c_actions::constant_expression_conditional_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitializerP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::AssignmentExpression(p0)) => {
                        NonTerminal::Initializer(
                            grammar_c_actions::initializer_assignment_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitializerP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::InitializerList(p0)),
                        Symbol::NonTerminal(NonTerminal::CommaOpt(p1)),
                        _,
                    ) => {
                        NonTerminal::Initializer(
                            grammar_c_actions::initializer_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdentifierListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Identifier(p0)) => {
                        NonTerminal::IdentifierList(
                            grammar_c_actions::identifier_list_identifier(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdentifierListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::IdentifierList(p0)),
                        _,
                        Symbol::Terminal(Terminal::Identifier(p1)),
                    ) => {
                        NonTerminal::IdentifierList(
                            grammar_c_actions::identifier_list_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumSpecifierP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::IdentifierOpt(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::EnumeratorList(p1)),
                        Symbol::NonTerminal(NonTerminal::CommaOpt(p2)),
                        _,
                    ) => {
                        NonTerminal::EnumSpecifier(
                            grammar_c_actions::enum_specifier_c1(&*context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumSpecifierP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::Terminal(Terminal::Identifier(p0))) => {
                        NonTerminal::EnumSpecifier(
                            grammar_c_actions::enum_specifier_identifier(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumeratorListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Enumerator(p0)) => {
                        NonTerminal::EnumeratorList(
                            grammar_c_actions::enumerator_list_enumerator(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumeratorListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::EnumeratorList(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Enumerator(p1)),
                    ) => {
                        NonTerminal::EnumeratorList(
                            grammar_c_actions::enumerator_list_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumeratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::EnumerationConstant(p0)) => {
                        NonTerminal::Enumerator(
                            grammar_c_actions::enumerator_enumeration_constant(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumeratorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::EnumerationConstant(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ConstantExpression(p1)),
                    ) => {
                        NonTerminal::Enumerator(
                            grammar_c_actions::enumerator_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumerationConstantP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Identifier(p0)) => {
                        NonTerminal::EnumerationConstant(
                            grammar_c_actions::enumeration_constant_identifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypedefNameP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Identifier(p0)) => {
                        NonTerminal::TypedefName(
                            grammar_c_actions::typedef_name_identifier(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FunctionSpecifierP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::FunctionSpecifier(
                    grammar_c_actions::function_specifier_inline(context),
                )
            }
            ProdKind::DeclarationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifier1(p0)),
                        Symbol::NonTerminal(NonTerminal::InitDeclaratorListOpt(p1)),
                        _,
                    ) => {
                        NonTerminal::Declaration(
                            grammar_c_actions::declaration_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitDeclaratorListOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::InitDeclaratorList(p0)) => {
                        NonTerminal::InitDeclaratorListOpt(
                            grammar_c_actions::init_declarator_list_opt_init_declarator_list(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitDeclaratorListOptP2 => {
                NonTerminal::InitDeclaratorListOpt(
                    grammar_c_actions::init_declarator_list_opt_empty(context),
                )
            }
            ProdKind::InitDeclaratorListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::InitDeclarator(p0)) => {
                        NonTerminal::InitDeclaratorList(
                            grammar_c_actions::init_declarator_list_init_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitDeclaratorListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::InitDeclaratorList(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::InitDeclarator(p1)),
                    ) => {
                        NonTerminal::InitDeclaratorList(
                            grammar_c_actions::init_declarator_list_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitDeclaratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declarator(p0)) => {
                        NonTerminal::InitDeclarator(
                            grammar_c_actions::init_declarator_declarator(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitDeclaratorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Declarator(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Initializer(p1)),
                    ) => {
                        NonTerminal::InitDeclarator(
                            grammar_c_actions::init_declarator_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CompoundStatementP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::BlockItem0(p0)), _) => {
                        NonTerminal::CompoundStatement(
                            grammar_c_actions::compound_statement_c1(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockItem1P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BlockItem1(p0)),
                        Symbol::NonTerminal(NonTerminal::BlockItem(p1)),
                    ) => {
                        NonTerminal::BlockItem1(
                            grammar_c_actions::block_item1_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockItem1P2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::BlockItem(p0)) => {
                        NonTerminal::BlockItem1(
                            grammar_c_actions::block_item1_block_item(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockItem0P1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::BlockItem1(p0)) => {
                        NonTerminal::BlockItem0(
                            grammar_c_actions::block_item0_block_item1(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockItem0P2 => {
                NonTerminal::BlockItem0(grammar_c_actions::block_item0_empty(context))
            }
            ProdKind::BlockItemP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declaration(p0)) => {
                        NonTerminal::BlockItem(
                            grammar_c_actions::block_item_declaration(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockItemP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Statement(p0)) => {
                        NonTerminal::BlockItem(
                            grammar_c_actions::block_item_statement(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementLabelStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::Identifier(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p1)),
                    ) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_label_statement(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementCaseClause => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::ConstantExpression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p1)),
                    ) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_case_clause(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementDefaultClause => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, _, Symbol::NonTerminal(NonTerminal::Statement(p0))) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_default_clause(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::CompoundStatement(p0)) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_compound_statement(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementExpressionStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::ExpressionOpt(p0)), _) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_expression_statement(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Expression(p0)) => {
                        NonTerminal::ExpressionOpt(
                            grammar_c_actions::expression_opt_expression(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionOptP2 => {
                NonTerminal::ExpressionOpt(
                    grammar_c_actions::expression_opt_empty(context),
                )
            }
            ProdKind::StatementIfStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p1)),
                    ) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_if_statement(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementIfElseStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 7usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p2)),
                    ) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_if_else_statement(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementSwitchStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p1)),
                    ) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_switch_statement(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementWhileStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p1)),
                    ) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_while_statement(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementDoWhileStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 7usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p0)),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                        _,
                        _,
                    ) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_do_while_statement(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementForStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 8usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::ForInitClause(p0)),
                        Symbol::NonTerminal(NonTerminal::ExpressionOpt(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ExpressionOpt(p2)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p3)),
                    ) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_for_statement(
                                &*context,
                                p0,
                                p1,
                                p2,
                                p3,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementGotoStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::Terminal(Terminal::Identifier(p0)), _) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_goto_statement(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementContinueStatement => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                NonTerminal::Statement(
                    grammar_c_actions::statement_continue_statement(context),
                )
            }
            ProdKind::StatementBreakStatement => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                NonTerminal::Statement(
                    grammar_c_actions::statement_break_statement(context),
                )
            }
            ProdKind::StatementReturnStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::ExpressionOpt(p0)), _) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_return_statement(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ForInitClauseNone => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::ForInitClause(
                    grammar_c_actions::for_init_clause_none(context),
                )
            }
            ProdKind::ForInitClauseForInitWithExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::Expression(p0)), _) => {
                        NonTerminal::ForInitClause(
                            grammar_c_actions::for_init_clause_for_init_with_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ForInitClauseForInitWithDeclaration => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declaration(p0)) => {
                        NonTerminal::ForInitClause(
                            grammar_c_actions::for_init_clause_for_init_with_declaration(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
