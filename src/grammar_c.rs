/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
use rustemo::{
    Result, Input as InputT, Lexer, Token, TokenRecognizer as TokenRecognizerT, Parser,
    ParserDefinition, State as StateT, Builder,
};
use regex::Regex;
use once_cell::sync::Lazy;
use rustemo::StringLexer;
use rustemo::LRBuilder;
use super::grammar_c_actions;
use rustemo::{GlrParser, Forest, GssHead};
use rustemo::Action::{self, Shift, Reduce, Accept};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use colored::*;
pub type Input = str;
const STATE_COUNT: usize = 378usize;
const MAX_RECOGNIZERS: usize = 52usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 75usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    Plus,
    Dash,
    Star,
    Slash,
    Percent,
    DoubleLeft,
    DoubleRight,
    Equal,
    DoubleEqual,
    ExclaimEqual,
    Ampersand,
    DoubleAmpersand,
    LeftBracket,
    RightBracket,
    VerticalBar,
    DoubleVerticalBar,
    Caret,
    LeftParen,
    RightParen,
    Question,
    Colon,
    Comma,
    LeftBracketEqual,
    RightBracketEqual,
    Exclaim,
    Tilde,
    Num,
    Identifier,
    Sizeof,
    LeftCurlyBracket,
    RightCurlyBracket,
    LeftSquareBracket,
    RightSquareBracket,
    DoublePlus,
    DoubleMinus,
    Ellipsis,
    Dot,
    DashRightBracket,
    Semicolon,
    Auto,
    Break,
    Case,
    Char,
    Const,
    Continue,
    Default,
    Do,
    Double,
    Else,
    Enum,
    Extern,
    Float,
    For,
    Goto,
    If,
    Inline,
    Int,
    Long,
    Register,
    Restrict,
    Return,
    Short,
    Signed,
    Static,
    Struct,
    Switch,
    Typedef,
    UnderscoreBool,
    UnderscoreComplex,
    Union,
    Unsigned,
    Void,
    Volatile,
    While,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    TranslationUnitP1,
    TranslationUnitP2,
    ExternalDeclarationP1,
    ExternalDeclarationP2,
    FunctionDefinitionP1,
    DeclarationListOptP1,
    DeclarationListOptP2,
    DeclarationSpecifiersP1,
    DeclarationSpecifiersOptP1,
    DeclarationSpecifiersOptP2,
    DeclarationSpecifiersP2,
    DeclarationSpecifiersP3,
    DeclarationSpecifiersP4,
    StorageClassSpecifierP1,
    StorageClassSpecifierP2,
    StorageClassSpecifierP3,
    StorageClassSpecifierP4,
    StorageClassSpecifierP5,
    TypeSpecifierP1,
    TypeSpecifierP2,
    TypeSpecifierP3,
    TypeSpecifierP4,
    TypeSpecifierP5,
    TypeSpecifierP6,
    TypeSpecifierP7,
    TypeSpecifierP8,
    TypeSpecifierP9,
    TypeSpecifierP10,
    TypeSpecifierP11,
    TypeSpecifierP12,
    TypeSpecifierP13,
    TypeSpecifierP14,
    StructOrUnionSpecifierP1,
    IdentifierOptP1,
    IdentifierOptP2,
    StructOrUnionSpecifierP2,
    StructOrUnionP1,
    StructOrUnionP2,
    StructDeclarationListP1,
    StructDeclarationListP2,
    StructDeclarationP1,
    SpecifierQualifierListP1,
    SpecifierQualifierListOptP1,
    SpecifierQualifierListOptP2,
    SpecifierQualifierListP2,
    TypeQualifierP1,
    TypeQualifierP2,
    TypeQualifierP3,
    StructDeclaratorListP1,
    StructDeclaratorListP2,
    StructDeclaratorP1,
    StructDeclaratorP2,
    DeclaratorOptP1,
    DeclaratorOptP2,
    DeclaratorP1,
    PointerOptP1,
    PointerOptP2,
    PointerP1,
    TypeQualifierListOptP1,
    TypeQualifierListOptP2,
    PointerP2,
    TypeQualifierListP1,
    TypeQualifierListP2,
    DirectDeclaratorP1,
    DirectDeclaratorP2,
    DirectDeclaratorP3,
    AssignmentExpressionOptP1,
    AssignmentExpressionOptP2,
    DirectDeclaratorP4,
    DirectDeclaratorP5,
    DirectDeclaratorP6,
    DirectDeclaratorP7,
    DirectDeclaratorP8,
    IdentifierListOptP1,
    IdentifierListOptP2,
    AssignmentExpressionP1,
    ConditionalExpressionP1,
    ConditionalExpressionP2,
    ArithmeticExpressionLogicalOrExpression,
    ArithmeticExpressionLogicalAndExpression,
    ArithmeticExpressionBitwiseOrExpression,
    ArithmeticExpressionBitwiseExclusiveOrExpression,
    ArithmeticExpressionBitwiseAndExpression,
    ArithmeticExpressionLogicalEqualExpression,
    ArithmeticExpressionLogicalNotEqualExpression,
    ArithmeticExpressionLessThanExpression,
    ArithmeticExpressionLessThanOrEqualExpression,
    ArithmeticExpressionGreaterThanExpression,
    ArithmeticExpressionGreaterThanOrEqualExpression,
    ArithmeticExpressionBitwiseLeftShiftExpression,
    ArithmeticExpressionBitwiseRightShiftExpression,
    ArithmeticExpressionAdditionExpression,
    ArithmeticExpressionSubtractionExpression,
    ArithmeticExpressionMultiplyExpression,
    ArithmeticExpressionDivisionExpression,
    ArithmeticExpressionModuloExpression,
    CastExpressionP1,
    CastExpressionP2,
    UnaryExpressionP1,
    UnaryExpressionPreIncrementExpression,
    UnaryExpressionPreDecrementExpression,
    UnaryExpressionLogicalNotExpression,
    UnaryExpressionBitwiseNotExpression,
    UnaryExpressionPlusExpression,
    UnaryExpressionMinusExpression,
    UnaryExpressionDereferenceExpression,
    UnaryExpressionReferenceExpression,
    UnaryExpressionSizeOfExpressionExpression,
    UnaryExpressionSizeOfTypenameExpression,
    PostfixExpressionP1,
    PostfixExpressionP2,
    PostfixExpressionP3,
    ArgumentExpressionListOptP1,
    ArgumentExpressionListOptP2,
    PostfixExpressionP4,
    PostfixExpressionP5,
    PostfixExpressionP6,
    PostfixExpressionP7,
    PostfixExpressionP8,
    PostfixExpressionP9,
    PrimaryExpressionNumber,
    PrimaryExpressionIdentifier,
    PrimaryExpressionParen,
    ExpressionCommaExpression,
    ExpressionAssignmentExpression,
    ExpressionP3,
    ExpressionP4,
    ExpressionP5,
    ArgumentExpressionListP1,
    ArgumentExpressionListP2,
    TypeNameP1,
    AbstractDeclaratorOptP1,
    AbstractDeclaratorOptP2,
    AbstractDeclaratorP1,
    AbstractDeclaratorP2,
    DirectAbstractDeclaratorP1,
    DirectAbstractDeclaratorP2,
    DirectAbstractDeclaratorOptP1,
    DirectAbstractDeclaratorOptP2,
    DirectAbstractDeclaratorP3,
    DirectAbstractDeclaratorP4,
    DirectAbstractDeclaratorP5,
    DirectAbstractDeclaratorP6,
    ParameterTypeListOptP1,
    ParameterTypeListOptP2,
    ParameterTypeListP1,
    ParameterTypeListP2,
    ParameterListP1,
    ParameterListP2,
    ParameterDeclarationP1,
    ParameterDeclarationP2,
    InitializerListP1,
    DesignationOptP1,
    DesignationOptP2,
    InitializerListP2,
    DesignationP1,
    DesignatorListP1,
    DesignatorListP2,
    DesignatorP1,
    DesignatorP2,
    ConstantExpressionP1,
    InitializerP1,
    InitializerP2,
    CommaOptP1,
    CommaOptP2,
    IdentifierListP1,
    IdentifierListP2,
    EnumSpecifierP1,
    EnumSpecifierP2,
    EnumeratorListP1,
    EnumeratorListP2,
    EnumeratorP1,
    EnumeratorP2,
    EnumerationConstantP1,
    TypedefNameP1,
    FunctionSpecifierP1,
    DeclarationListP1,
    DeclarationListP2,
    DeclarationP1,
    InitDeclaratorListOptP1,
    InitDeclaratorListOptP2,
    InitDeclaratorListP1,
    InitDeclaratorListP2,
    InitDeclaratorP1,
    InitDeclaratorP2,
    CompoundStatementP1,
    BlockItemListOptP1,
    BlockItemListOptP2,
    BlockItemListP1,
    BlockItemListP2,
    BlockItemP1,
    BlockItemP2,
    StatementP1,
    StatementP2,
    StatementP3,
    StatementP4,
    StatementP5,
    StatementP6,
    LabeledStatementP1,
    LabeledStatementP2,
    LabeledStatementP3,
    ExpressionStatementP1,
    ExpressionOptP1,
    ExpressionOptP2,
    SelectionStatementP1,
    SelectionStatementP2,
    SelectionStatementP3,
    IterationStatementP1,
    IterationStatementP2,
    IterationStatementP3,
    IterationStatementP4,
    JumpStatementP1,
    JumpStatementP2,
    JumpStatementP3,
    JumpStatementP4,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::TranslationUnitP1 => "TranslationUnit: ExternalDeclaration",
            ProdKind::TranslationUnitP2 => {
                "TranslationUnit: TranslationUnit ExternalDeclaration"
            }
            ProdKind::ExternalDeclarationP1 => "ExternalDeclaration: FunctionDefinition",
            ProdKind::ExternalDeclarationP2 => "ExternalDeclaration: Declaration",
            ProdKind::FunctionDefinitionP1 => {
                "FunctionDefinition: DeclarationSpecifiers Declarator DeclarationListOpt CompoundStatement"
            }
            ProdKind::DeclarationListOptP1 => "DeclarationListOpt: DeclarationList",
            ProdKind::DeclarationListOptP2 => "DeclarationListOpt: ",
            ProdKind::DeclarationSpecifiersP1 => {
                "DeclarationSpecifiers: StorageClassSpecifier DeclarationSpecifiersOpt"
            }
            ProdKind::DeclarationSpecifiersOptP1 => {
                "DeclarationSpecifiersOpt: DeclarationSpecifiers"
            }
            ProdKind::DeclarationSpecifiersOptP2 => "DeclarationSpecifiersOpt: ",
            ProdKind::DeclarationSpecifiersP2 => {
                "DeclarationSpecifiers: TypeSpecifier DeclarationSpecifiersOpt"
            }
            ProdKind::DeclarationSpecifiersP3 => {
                "DeclarationSpecifiers: TypeQualifier DeclarationSpecifiersOpt"
            }
            ProdKind::DeclarationSpecifiersP4 => {
                "DeclarationSpecifiers: FunctionSpecifier DeclarationSpecifiersOpt"
            }
            ProdKind::StorageClassSpecifierP1 => "StorageClassSpecifier: Typedef",
            ProdKind::StorageClassSpecifierP2 => "StorageClassSpecifier: Extern",
            ProdKind::StorageClassSpecifierP3 => "StorageClassSpecifier: Static",
            ProdKind::StorageClassSpecifierP4 => "StorageClassSpecifier: Auto",
            ProdKind::StorageClassSpecifierP5 => "StorageClassSpecifier: Register",
            ProdKind::TypeSpecifierP1 => "TypeSpecifier: Void",
            ProdKind::TypeSpecifierP2 => "TypeSpecifier: Char",
            ProdKind::TypeSpecifierP3 => "TypeSpecifier: Short",
            ProdKind::TypeSpecifierP4 => "TypeSpecifier: Int",
            ProdKind::TypeSpecifierP5 => "TypeSpecifier: Long",
            ProdKind::TypeSpecifierP6 => "TypeSpecifier: Float",
            ProdKind::TypeSpecifierP7 => "TypeSpecifier: Double",
            ProdKind::TypeSpecifierP8 => "TypeSpecifier: Signed",
            ProdKind::TypeSpecifierP9 => "TypeSpecifier: Unsigned",
            ProdKind::TypeSpecifierP10 => "TypeSpecifier: UnderscoreBool",
            ProdKind::TypeSpecifierP11 => "TypeSpecifier: UnderscoreComplex",
            ProdKind::TypeSpecifierP12 => "TypeSpecifier: StructOrUnionSpecifier",
            ProdKind::TypeSpecifierP13 => "TypeSpecifier: EnumSpecifier",
            ProdKind::TypeSpecifierP14 => "TypeSpecifier: TypedefName",
            ProdKind::StructOrUnionSpecifierP1 => {
                "StructOrUnionSpecifier: StructOrUnion IdentifierOpt LeftCurlyBracket StructDeclarationList RightCurlyBracket"
            }
            ProdKind::IdentifierOptP1 => "IdentifierOpt: Identifier",
            ProdKind::IdentifierOptP2 => "IdentifierOpt: ",
            ProdKind::StructOrUnionSpecifierP2 => {
                "StructOrUnionSpecifier: StructOrUnion Identifier"
            }
            ProdKind::StructOrUnionP1 => "StructOrUnion: Struct",
            ProdKind::StructOrUnionP2 => "StructOrUnion: Union",
            ProdKind::StructDeclarationListP1 => {
                "StructDeclarationList: StructDeclaration"
            }
            ProdKind::StructDeclarationListP2 => {
                "StructDeclarationList: StructDeclarationList StructDeclaration"
            }
            ProdKind::StructDeclarationP1 => {
                "StructDeclaration: SpecifierQualifierList StructDeclaratorList Semicolon"
            }
            ProdKind::SpecifierQualifierListP1 => {
                "SpecifierQualifierList: TypeSpecifier SpecifierQualifierListOpt"
            }
            ProdKind::SpecifierQualifierListOptP1 => {
                "SpecifierQualifierListOpt: SpecifierQualifierList"
            }
            ProdKind::SpecifierQualifierListOptP2 => "SpecifierQualifierListOpt: ",
            ProdKind::SpecifierQualifierListP2 => {
                "SpecifierQualifierList: TypeQualifier SpecifierQualifierListOpt"
            }
            ProdKind::TypeQualifierP1 => "TypeQualifier: Const",
            ProdKind::TypeQualifierP2 => "TypeQualifier: Restrict",
            ProdKind::TypeQualifierP3 => "TypeQualifier: Volatile",
            ProdKind::StructDeclaratorListP1 => "StructDeclaratorList: StructDeclarator",
            ProdKind::StructDeclaratorListP2 => {
                "StructDeclaratorList: StructDeclaratorList Comma StructDeclarator"
            }
            ProdKind::StructDeclaratorP1 => "StructDeclarator: Declarator",
            ProdKind::StructDeclaratorP2 => {
                "StructDeclarator: DeclaratorOpt Colon ConstantExpression"
            }
            ProdKind::DeclaratorOptP1 => "DeclaratorOpt: Declarator",
            ProdKind::DeclaratorOptP2 => "DeclaratorOpt: ",
            ProdKind::DeclaratorP1 => "Declarator: PointerOpt DirectDeclarator",
            ProdKind::PointerOptP1 => "PointerOpt: Pointer",
            ProdKind::PointerOptP2 => "PointerOpt: ",
            ProdKind::PointerP1 => "Pointer: Star TypeQualifierListOpt",
            ProdKind::TypeQualifierListOptP1 => "TypeQualifierListOpt: TypeQualifierList",
            ProdKind::TypeQualifierListOptP2 => "TypeQualifierListOpt: ",
            ProdKind::PointerP2 => "Pointer: Star TypeQualifierListOpt Pointer",
            ProdKind::TypeQualifierListP1 => "TypeQualifierList: TypeQualifier",
            ProdKind::TypeQualifierListP2 => {
                "TypeQualifierList: TypeQualifierList TypeQualifier"
            }
            ProdKind::DirectDeclaratorP1 => "DirectDeclarator: Identifier",
            ProdKind::DirectDeclaratorP2 => {
                "DirectDeclarator: LeftParen Declarator RightParen"
            }
            ProdKind::DirectDeclaratorP3 => {
                "DirectDeclarator: DirectDeclarator LeftSquareBracket TypeQualifierListOpt AssignmentExpressionOpt RightSquareBracket"
            }
            ProdKind::AssignmentExpressionOptP1 => {
                "AssignmentExpressionOpt: AssignmentExpression"
            }
            ProdKind::AssignmentExpressionOptP2 => "AssignmentExpressionOpt: ",
            ProdKind::DirectDeclaratorP4 => {
                "DirectDeclarator: DirectDeclarator LeftSquareBracket Static TypeQualifierListOpt AssignmentExpression RightSquareBracket"
            }
            ProdKind::DirectDeclaratorP5 => {
                "DirectDeclarator: DirectDeclarator LeftSquareBracket TypeQualifierList Static AssignmentExpression RightSquareBracket"
            }
            ProdKind::DirectDeclaratorP6 => {
                "DirectDeclarator: DirectDeclarator LeftSquareBracket TypeQualifierListOpt Star RightSquareBracket"
            }
            ProdKind::DirectDeclaratorP7 => {
                "DirectDeclarator: DirectDeclarator LeftParen ParameterTypeList RightParen"
            }
            ProdKind::DirectDeclaratorP8 => {
                "DirectDeclarator: DirectDeclarator LeftParen IdentifierListOpt RightParen"
            }
            ProdKind::IdentifierListOptP1 => "IdentifierListOpt: IdentifierList",
            ProdKind::IdentifierListOptP2 => "IdentifierListOpt: ",
            ProdKind::AssignmentExpressionP1 => {
                "AssignmentExpression: Expression Equal Expression"
            }
            ProdKind::ConditionalExpressionP1 => {
                "ConditionalExpression: ArithmeticExpression"
            }
            ProdKind::ConditionalExpressionP2 => {
                "ConditionalExpression: ArithmeticExpression Question Expression Colon ConditionalExpression"
            }
            ProdKind::ArithmeticExpressionLogicalOrExpression => {
                "ArithmeticExpression: Expression DoubleVerticalBar Expression"
            }
            ProdKind::ArithmeticExpressionLogicalAndExpression => {
                "ArithmeticExpression: Expression DoubleAmpersand Expression"
            }
            ProdKind::ArithmeticExpressionBitwiseOrExpression => {
                "ArithmeticExpression: Expression VerticalBar Expression"
            }
            ProdKind::ArithmeticExpressionBitwiseExclusiveOrExpression => {
                "ArithmeticExpression: Expression Caret Expression"
            }
            ProdKind::ArithmeticExpressionBitwiseAndExpression => {
                "ArithmeticExpression: Expression Ampersand Expression"
            }
            ProdKind::ArithmeticExpressionLogicalEqualExpression => {
                "ArithmeticExpression: Expression DoubleEqual Expression"
            }
            ProdKind::ArithmeticExpressionLogicalNotEqualExpression => {
                "ArithmeticExpression: Expression ExclaimEqual Expression"
            }
            ProdKind::ArithmeticExpressionLessThanExpression => {
                "ArithmeticExpression: Expression LeftBracket Expression"
            }
            ProdKind::ArithmeticExpressionLessThanOrEqualExpression => {
                "ArithmeticExpression: Expression LeftBracketEqual Expression"
            }
            ProdKind::ArithmeticExpressionGreaterThanExpression => {
                "ArithmeticExpression: Expression RightBracket Expression"
            }
            ProdKind::ArithmeticExpressionGreaterThanOrEqualExpression => {
                "ArithmeticExpression: Expression RightBracketEqual Expression"
            }
            ProdKind::ArithmeticExpressionBitwiseLeftShiftExpression => {
                "ArithmeticExpression: Expression DoubleLeft Expression"
            }
            ProdKind::ArithmeticExpressionBitwiseRightShiftExpression => {
                "ArithmeticExpression: Expression DoubleRight Expression"
            }
            ProdKind::ArithmeticExpressionAdditionExpression => {
                "ArithmeticExpression: Expression Plus Expression"
            }
            ProdKind::ArithmeticExpressionSubtractionExpression => {
                "ArithmeticExpression: Expression Dash Expression"
            }
            ProdKind::ArithmeticExpressionMultiplyExpression => {
                "ArithmeticExpression: Expression Star Expression"
            }
            ProdKind::ArithmeticExpressionDivisionExpression => {
                "ArithmeticExpression: Expression Slash Expression"
            }
            ProdKind::ArithmeticExpressionModuloExpression => {
                "ArithmeticExpression: Expression Percent Expression"
            }
            ProdKind::CastExpressionP1 => "CastExpression: UnaryExpression",
            ProdKind::CastExpressionP2 => {
                "CastExpression: LeftParen TypeName RightParen CastExpression"
            }
            ProdKind::UnaryExpressionP1 => "UnaryExpression: PostfixExpression",
            ProdKind::UnaryExpressionPreIncrementExpression => {
                "UnaryExpression: DoublePlus UnaryExpression"
            }
            ProdKind::UnaryExpressionPreDecrementExpression => {
                "UnaryExpression: DoubleMinus UnaryExpression"
            }
            ProdKind::UnaryExpressionLogicalNotExpression => {
                "UnaryExpression: Exclaim CastExpression"
            }
            ProdKind::UnaryExpressionBitwiseNotExpression => {
                "UnaryExpression: Tilde CastExpression"
            }
            ProdKind::UnaryExpressionPlusExpression => {
                "UnaryExpression: Plus CastExpression"
            }
            ProdKind::UnaryExpressionMinusExpression => {
                "UnaryExpression: Dash CastExpression"
            }
            ProdKind::UnaryExpressionDereferenceExpression => {
                "UnaryExpression: Star CastExpression"
            }
            ProdKind::UnaryExpressionReferenceExpression => {
                "UnaryExpression: Ampersand CastExpression"
            }
            ProdKind::UnaryExpressionSizeOfExpressionExpression => {
                "UnaryExpression: Sizeof Expression"
            }
            ProdKind::UnaryExpressionSizeOfTypenameExpression => {
                "UnaryExpression: Sizeof LeftParen TypeName RightParen"
            }
            ProdKind::PostfixExpressionP1 => "PostfixExpression: PrimaryExpression",
            ProdKind::PostfixExpressionP2 => {
                "PostfixExpression: PostfixExpression LeftSquareBracket Expression RightSquareBracket"
            }
            ProdKind::PostfixExpressionP3 => {
                "PostfixExpression: PostfixExpression LeftParen ArgumentExpressionListOpt RightParen"
            }
            ProdKind::ArgumentExpressionListOptP1 => {
                "ArgumentExpressionListOpt: ArgumentExpressionList"
            }
            ProdKind::ArgumentExpressionListOptP2 => "ArgumentExpressionListOpt: ",
            ProdKind::PostfixExpressionP4 => {
                "PostfixExpression: PostfixExpression Dot Identifier"
            }
            ProdKind::PostfixExpressionP5 => {
                "PostfixExpression: PostfixExpression DashRightBracket Identifier"
            }
            ProdKind::PostfixExpressionP6 => {
                "PostfixExpression: PostfixExpression DoublePlus"
            }
            ProdKind::PostfixExpressionP7 => {
                "PostfixExpression: PostfixExpression DoubleMinus"
            }
            ProdKind::PostfixExpressionP8 => {
                "PostfixExpression: LeftParen TypeName RightParen LeftCurlyBracket InitializerList RightCurlyBracket"
            }
            ProdKind::PostfixExpressionP9 => {
                "PostfixExpression: LeftParen TypeName RightParen LeftCurlyBracket InitializerList Comma RightCurlyBracket"
            }
            ProdKind::PrimaryExpressionNumber => "PrimaryExpression: Num",
            ProdKind::PrimaryExpressionIdentifier => "PrimaryExpression: Identifier",
            ProdKind::PrimaryExpressionParen => {
                "PrimaryExpression: LeftParen Expression RightParen"
            }
            ProdKind::ExpressionCommaExpression => {
                "Expression: Expression Comma Expression"
            }
            ProdKind::ExpressionAssignmentExpression => {
                "Expression: AssignmentExpression"
            }
            ProdKind::ExpressionP3 => "Expression: ConditionalExpression",
            ProdKind::ExpressionP4 => "Expression: ArithmeticExpression",
            ProdKind::ExpressionP5 => "Expression: UnaryExpression",
            ProdKind::ArgumentExpressionListP1 => {
                "ArgumentExpressionList: AssignmentExpression"
            }
            ProdKind::ArgumentExpressionListP2 => {
                "ArgumentExpressionList: ArgumentExpressionList Comma AssignmentExpression"
            }
            ProdKind::TypeNameP1 => {
                "TypeName: SpecifierQualifierList AbstractDeclaratorOpt"
            }
            ProdKind::AbstractDeclaratorOptP1 => {
                "AbstractDeclaratorOpt: AbstractDeclarator"
            }
            ProdKind::AbstractDeclaratorOptP2 => "AbstractDeclaratorOpt: ",
            ProdKind::AbstractDeclaratorP1 => "AbstractDeclarator: Pointer",
            ProdKind::AbstractDeclaratorP2 => {
                "AbstractDeclarator: PointerOpt DirectAbstractDeclarator"
            }
            ProdKind::DirectAbstractDeclaratorP1 => {
                "DirectAbstractDeclarator: LeftParen AbstractDeclarator RightParen"
            }
            ProdKind::DirectAbstractDeclaratorP2 => {
                "DirectAbstractDeclarator: DirectAbstractDeclaratorOpt LeftSquareBracket TypeQualifierListOpt AssignmentExpressionOpt RightSquareBracket"
            }
            ProdKind::DirectAbstractDeclaratorOptP1 => {
                "DirectAbstractDeclaratorOpt: DirectAbstractDeclarator"
            }
            ProdKind::DirectAbstractDeclaratorOptP2 => "DirectAbstractDeclaratorOpt: ",
            ProdKind::DirectAbstractDeclaratorP3 => {
                "DirectAbstractDeclarator: DirectAbstractDeclaratorOpt LeftSquareBracket Static TypeQualifierListOpt AssignmentExpression RightSquareBracket"
            }
            ProdKind::DirectAbstractDeclaratorP4 => {
                "DirectAbstractDeclarator: DirectAbstractDeclaratorOpt LeftSquareBracket TypeQualifierList Static AssignmentExpression RightSquareBracket"
            }
            ProdKind::DirectAbstractDeclaratorP5 => {
                "DirectAbstractDeclarator: DirectAbstractDeclaratorOpt LeftSquareBracket Star RightSquareBracket"
            }
            ProdKind::DirectAbstractDeclaratorP6 => {
                "DirectAbstractDeclarator: DirectAbstractDeclaratorOpt LeftParen ParameterTypeListOpt RightParen"
            }
            ProdKind::ParameterTypeListOptP1 => "ParameterTypeListOpt: ParameterTypeList",
            ProdKind::ParameterTypeListOptP2 => "ParameterTypeListOpt: ",
            ProdKind::ParameterTypeListP1 => "ParameterTypeList: ParameterList",
            ProdKind::ParameterTypeListP2 => {
                "ParameterTypeList: ParameterList Comma Ellipsis"
            }
            ProdKind::ParameterListP1 => "ParameterList: ParameterDeclaration",
            ProdKind::ParameterListP2 => {
                "ParameterList: ParameterList Comma ParameterDeclaration"
            }
            ProdKind::ParameterDeclarationP1 => {
                "ParameterDeclaration: DeclarationSpecifiers Declarator"
            }
            ProdKind::ParameterDeclarationP2 => {
                "ParameterDeclaration: DeclarationSpecifiers AbstractDeclaratorOpt"
            }
            ProdKind::InitializerListP1 => "InitializerList: DesignationOpt Initializer",
            ProdKind::DesignationOptP1 => "DesignationOpt: Designation",
            ProdKind::DesignationOptP2 => "DesignationOpt: ",
            ProdKind::InitializerListP2 => {
                "InitializerList: InitializerList Comma DesignationOpt Initializer"
            }
            ProdKind::DesignationP1 => "Designation: DesignatorList Equal",
            ProdKind::DesignatorListP1 => "DesignatorList: Designator",
            ProdKind::DesignatorListP2 => "DesignatorList: DesignatorList Designator",
            ProdKind::DesignatorP1 => {
                "Designator: LeftSquareBracket ConstantExpression RightSquareBracket"
            }
            ProdKind::DesignatorP2 => "Designator: Dot Identifier",
            ProdKind::ConstantExpressionP1 => "ConstantExpression: ConditionalExpression",
            ProdKind::InitializerP1 => "Initializer: AssignmentExpression",
            ProdKind::InitializerP2 => {
                "Initializer: LeftCurlyBracket InitializerList CommaOpt RightCurlyBracket"
            }
            ProdKind::CommaOptP1 => "CommaOpt: Comma",
            ProdKind::CommaOptP2 => "CommaOpt: ",
            ProdKind::IdentifierListP1 => "IdentifierList: Identifier",
            ProdKind::IdentifierListP2 => {
                "IdentifierList: IdentifierList Comma Identifier"
            }
            ProdKind::EnumSpecifierP1 => {
                "EnumSpecifier: Enum IdentifierOpt LeftCurlyBracket EnumeratorList CommaOpt RightCurlyBracket"
            }
            ProdKind::EnumSpecifierP2 => "EnumSpecifier: Enum Identifier",
            ProdKind::EnumeratorListP1 => "EnumeratorList: Enumerator",
            ProdKind::EnumeratorListP2 => {
                "EnumeratorList: EnumeratorList Comma Enumerator"
            }
            ProdKind::EnumeratorP1 => "Enumerator: EnumerationConstant",
            ProdKind::EnumeratorP2 => {
                "Enumerator: EnumerationConstant Equal ConstantExpression"
            }
            ProdKind::EnumerationConstantP1 => "EnumerationConstant: Identifier",
            ProdKind::TypedefNameP1 => "TypedefName: Identifier",
            ProdKind::FunctionSpecifierP1 => "FunctionSpecifier: Inline",
            ProdKind::DeclarationListP1 => "DeclarationList: Declaration",
            ProdKind::DeclarationListP2 => "DeclarationList: DeclarationList Declaration",
            ProdKind::DeclarationP1 => {
                "Declaration: DeclarationSpecifiers InitDeclaratorListOpt Semicolon"
            }
            ProdKind::InitDeclaratorListOptP1 => {
                "InitDeclaratorListOpt: InitDeclaratorList"
            }
            ProdKind::InitDeclaratorListOptP2 => "InitDeclaratorListOpt: ",
            ProdKind::InitDeclaratorListP1 => "InitDeclaratorList: InitDeclarator",
            ProdKind::InitDeclaratorListP2 => {
                "InitDeclaratorList: InitDeclaratorList Comma InitDeclarator"
            }
            ProdKind::InitDeclaratorP1 => "InitDeclarator: Declarator",
            ProdKind::InitDeclaratorP2 => "InitDeclarator: Declarator Equal Initializer",
            ProdKind::CompoundStatementP1 => {
                "CompoundStatement: LeftCurlyBracket BlockItemListOpt RightCurlyBracket"
            }
            ProdKind::BlockItemListOptP1 => "BlockItemListOpt: BlockItemList",
            ProdKind::BlockItemListOptP2 => "BlockItemListOpt: ",
            ProdKind::BlockItemListP1 => "BlockItemList: BlockItem",
            ProdKind::BlockItemListP2 => "BlockItemList: BlockItemList BlockItem",
            ProdKind::BlockItemP1 => "BlockItem: Declaration",
            ProdKind::BlockItemP2 => "BlockItem: Statement",
            ProdKind::StatementP1 => "Statement: LabeledStatement",
            ProdKind::StatementP2 => "Statement: CompoundStatement",
            ProdKind::StatementP3 => "Statement: ExpressionStatement",
            ProdKind::StatementP4 => "Statement: SelectionStatement",
            ProdKind::StatementP5 => "Statement: IterationStatement",
            ProdKind::StatementP6 => "Statement: JumpStatement",
            ProdKind::LabeledStatementP1 => {
                "LabeledStatement: Identifier Colon Statement"
            }
            ProdKind::LabeledStatementP2 => {
                "LabeledStatement: Case ConstantExpression Colon Statement"
            }
            ProdKind::LabeledStatementP3 => "LabeledStatement: Default Colon Statement",
            ProdKind::ExpressionStatementP1 => {
                "ExpressionStatement: ExpressionOpt Semicolon"
            }
            ProdKind::ExpressionOptP1 => "ExpressionOpt: Expression",
            ProdKind::ExpressionOptP2 => "ExpressionOpt: ",
            ProdKind::SelectionStatementP1 => {
                "SelectionStatement: If LeftParen Expression RightParen Statement"
            }
            ProdKind::SelectionStatementP2 => {
                "SelectionStatement: If LeftParen Expression RightParen Statement Else Statement"
            }
            ProdKind::SelectionStatementP3 => {
                "SelectionStatement: Switch LeftParen Expression RightParen Statement"
            }
            ProdKind::IterationStatementP1 => {
                "IterationStatement: While LeftParen Expression RightParen Statement"
            }
            ProdKind::IterationStatementP2 => {
                "IterationStatement: Do Statement While LeftParen Expression RightParen Semicolon"
            }
            ProdKind::IterationStatementP3 => {
                "IterationStatement: For LeftParen ExpressionOpt Semicolon ExpressionOpt Semicolon ExpressionOpt RightParen Statement"
            }
            ProdKind::IterationStatementP4 => {
                "IterationStatement: For LeftParen Declaration ExpressionOpt Semicolon ExpressionOpt RightParen Statement"
            }
            ProdKind::JumpStatementP1 => "JumpStatement: Goto Identifier Semicolon",
            ProdKind::JumpStatementP2 => "JumpStatement: Continue Semicolon",
            ProdKind::JumpStatementP3 => "JumpStatement: Break Semicolon",
            ProdKind::JumpStatementP4 => "JumpStatement: Return ExpressionOpt Semicolon",
        };
        write!(f, "{}", name)
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    TranslationUnit,
    ExternalDeclaration,
    FunctionDefinition,
    DeclarationListOpt,
    DeclarationSpecifiers,
    DeclarationSpecifiersOpt,
    StorageClassSpecifier,
    TypeSpecifier,
    StructOrUnionSpecifier,
    IdentifierOpt,
    StructOrUnion,
    StructDeclarationList,
    StructDeclaration,
    SpecifierQualifierList,
    SpecifierQualifierListOpt,
    TypeQualifier,
    StructDeclaratorList,
    StructDeclarator,
    DeclaratorOpt,
    Declarator,
    PointerOpt,
    Pointer,
    TypeQualifierListOpt,
    TypeQualifierList,
    DirectDeclarator,
    AssignmentExpressionOpt,
    IdentifierListOpt,
    AssignmentExpression,
    ConditionalExpression,
    ArithmeticExpression,
    CastExpression,
    UnaryExpression,
    PostfixExpression,
    ArgumentExpressionListOpt,
    PrimaryExpression,
    Expression,
    ArgumentExpressionList,
    TypeName,
    AbstractDeclaratorOpt,
    AbstractDeclarator,
    DirectAbstractDeclarator,
    DirectAbstractDeclaratorOpt,
    ParameterTypeListOpt,
    ParameterTypeList,
    ParameterList,
    ParameterDeclaration,
    InitializerList,
    DesignationOpt,
    Designation,
    DesignatorList,
    Designator,
    ConstantExpression,
    Initializer,
    CommaOpt,
    IdentifierList,
    EnumSpecifier,
    EnumeratorList,
    Enumerator,
    EnumerationConstant,
    TypedefName,
    FunctionSpecifier,
    DeclarationList,
    Declaration,
    InitDeclaratorListOpt,
    InitDeclaratorList,
    InitDeclarator,
    CompoundStatement,
    BlockItemListOpt,
    BlockItemList,
    BlockItem,
    Statement,
    LabeledStatement,
    ExpressionStatement,
    ExpressionOpt,
    SelectionStatement,
    IterationStatement,
    JumpStatement,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::TranslationUnitP1 => NonTermKind::TranslationUnit,
            ProdKind::TranslationUnitP2 => NonTermKind::TranslationUnit,
            ProdKind::ExternalDeclarationP1 => NonTermKind::ExternalDeclaration,
            ProdKind::ExternalDeclarationP2 => NonTermKind::ExternalDeclaration,
            ProdKind::FunctionDefinitionP1 => NonTermKind::FunctionDefinition,
            ProdKind::DeclarationListOptP1 => NonTermKind::DeclarationListOpt,
            ProdKind::DeclarationListOptP2 => NonTermKind::DeclarationListOpt,
            ProdKind::DeclarationSpecifiersP1 => NonTermKind::DeclarationSpecifiers,
            ProdKind::DeclarationSpecifiersOptP1 => NonTermKind::DeclarationSpecifiersOpt,
            ProdKind::DeclarationSpecifiersOptP2 => NonTermKind::DeclarationSpecifiersOpt,
            ProdKind::DeclarationSpecifiersP2 => NonTermKind::DeclarationSpecifiers,
            ProdKind::DeclarationSpecifiersP3 => NonTermKind::DeclarationSpecifiers,
            ProdKind::DeclarationSpecifiersP4 => NonTermKind::DeclarationSpecifiers,
            ProdKind::StorageClassSpecifierP1 => NonTermKind::StorageClassSpecifier,
            ProdKind::StorageClassSpecifierP2 => NonTermKind::StorageClassSpecifier,
            ProdKind::StorageClassSpecifierP3 => NonTermKind::StorageClassSpecifier,
            ProdKind::StorageClassSpecifierP4 => NonTermKind::StorageClassSpecifier,
            ProdKind::StorageClassSpecifierP5 => NonTermKind::StorageClassSpecifier,
            ProdKind::TypeSpecifierP1 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP2 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP3 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP4 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP5 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP6 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP7 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP8 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP9 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP10 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP11 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP12 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP13 => NonTermKind::TypeSpecifier,
            ProdKind::TypeSpecifierP14 => NonTermKind::TypeSpecifier,
            ProdKind::StructOrUnionSpecifierP1 => NonTermKind::StructOrUnionSpecifier,
            ProdKind::IdentifierOptP1 => NonTermKind::IdentifierOpt,
            ProdKind::IdentifierOptP2 => NonTermKind::IdentifierOpt,
            ProdKind::StructOrUnionSpecifierP2 => NonTermKind::StructOrUnionSpecifier,
            ProdKind::StructOrUnionP1 => NonTermKind::StructOrUnion,
            ProdKind::StructOrUnionP2 => NonTermKind::StructOrUnion,
            ProdKind::StructDeclarationListP1 => NonTermKind::StructDeclarationList,
            ProdKind::StructDeclarationListP2 => NonTermKind::StructDeclarationList,
            ProdKind::StructDeclarationP1 => NonTermKind::StructDeclaration,
            ProdKind::SpecifierQualifierListP1 => NonTermKind::SpecifierQualifierList,
            ProdKind::SpecifierQualifierListOptP1 => {
                NonTermKind::SpecifierQualifierListOpt
            }
            ProdKind::SpecifierQualifierListOptP2 => {
                NonTermKind::SpecifierQualifierListOpt
            }
            ProdKind::SpecifierQualifierListP2 => NonTermKind::SpecifierQualifierList,
            ProdKind::TypeQualifierP1 => NonTermKind::TypeQualifier,
            ProdKind::TypeQualifierP2 => NonTermKind::TypeQualifier,
            ProdKind::TypeQualifierP3 => NonTermKind::TypeQualifier,
            ProdKind::StructDeclaratorListP1 => NonTermKind::StructDeclaratorList,
            ProdKind::StructDeclaratorListP2 => NonTermKind::StructDeclaratorList,
            ProdKind::StructDeclaratorP1 => NonTermKind::StructDeclarator,
            ProdKind::StructDeclaratorP2 => NonTermKind::StructDeclarator,
            ProdKind::DeclaratorOptP1 => NonTermKind::DeclaratorOpt,
            ProdKind::DeclaratorOptP2 => NonTermKind::DeclaratorOpt,
            ProdKind::DeclaratorP1 => NonTermKind::Declarator,
            ProdKind::PointerOptP1 => NonTermKind::PointerOpt,
            ProdKind::PointerOptP2 => NonTermKind::PointerOpt,
            ProdKind::PointerP1 => NonTermKind::Pointer,
            ProdKind::TypeQualifierListOptP1 => NonTermKind::TypeQualifierListOpt,
            ProdKind::TypeQualifierListOptP2 => NonTermKind::TypeQualifierListOpt,
            ProdKind::PointerP2 => NonTermKind::Pointer,
            ProdKind::TypeQualifierListP1 => NonTermKind::TypeQualifierList,
            ProdKind::TypeQualifierListP2 => NonTermKind::TypeQualifierList,
            ProdKind::DirectDeclaratorP1 => NonTermKind::DirectDeclarator,
            ProdKind::DirectDeclaratorP2 => NonTermKind::DirectDeclarator,
            ProdKind::DirectDeclaratorP3 => NonTermKind::DirectDeclarator,
            ProdKind::AssignmentExpressionOptP1 => NonTermKind::AssignmentExpressionOpt,
            ProdKind::AssignmentExpressionOptP2 => NonTermKind::AssignmentExpressionOpt,
            ProdKind::DirectDeclaratorP4 => NonTermKind::DirectDeclarator,
            ProdKind::DirectDeclaratorP5 => NonTermKind::DirectDeclarator,
            ProdKind::DirectDeclaratorP6 => NonTermKind::DirectDeclarator,
            ProdKind::DirectDeclaratorP7 => NonTermKind::DirectDeclarator,
            ProdKind::DirectDeclaratorP8 => NonTermKind::DirectDeclarator,
            ProdKind::IdentifierListOptP1 => NonTermKind::IdentifierListOpt,
            ProdKind::IdentifierListOptP2 => NonTermKind::IdentifierListOpt,
            ProdKind::AssignmentExpressionP1 => NonTermKind::AssignmentExpression,
            ProdKind::ConditionalExpressionP1 => NonTermKind::ConditionalExpression,
            ProdKind::ConditionalExpressionP2 => NonTermKind::ConditionalExpression,
            ProdKind::ArithmeticExpressionLogicalOrExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionLogicalAndExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionBitwiseOrExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionBitwiseExclusiveOrExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionBitwiseAndExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionLogicalEqualExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionLogicalNotEqualExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionLessThanExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionLessThanOrEqualExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionGreaterThanExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionGreaterThanOrEqualExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionBitwiseLeftShiftExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionBitwiseRightShiftExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionAdditionExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionSubtractionExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionMultiplyExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionDivisionExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionModuloExpression => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::CastExpressionP1 => NonTermKind::CastExpression,
            ProdKind::CastExpressionP2 => NonTermKind::CastExpression,
            ProdKind::UnaryExpressionP1 => NonTermKind::UnaryExpression,
            ProdKind::UnaryExpressionPreIncrementExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionPreDecrementExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionLogicalNotExpression => NonTermKind::UnaryExpression,
            ProdKind::UnaryExpressionBitwiseNotExpression => NonTermKind::UnaryExpression,
            ProdKind::UnaryExpressionPlusExpression => NonTermKind::UnaryExpression,
            ProdKind::UnaryExpressionMinusExpression => NonTermKind::UnaryExpression,
            ProdKind::UnaryExpressionDereferenceExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionReferenceExpression => NonTermKind::UnaryExpression,
            ProdKind::UnaryExpressionSizeOfExpressionExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::UnaryExpressionSizeOfTypenameExpression => {
                NonTermKind::UnaryExpression
            }
            ProdKind::PostfixExpressionP1 => NonTermKind::PostfixExpression,
            ProdKind::PostfixExpressionP2 => NonTermKind::PostfixExpression,
            ProdKind::PostfixExpressionP3 => NonTermKind::PostfixExpression,
            ProdKind::ArgumentExpressionListOptP1 => {
                NonTermKind::ArgumentExpressionListOpt
            }
            ProdKind::ArgumentExpressionListOptP2 => {
                NonTermKind::ArgumentExpressionListOpt
            }
            ProdKind::PostfixExpressionP4 => NonTermKind::PostfixExpression,
            ProdKind::PostfixExpressionP5 => NonTermKind::PostfixExpression,
            ProdKind::PostfixExpressionP6 => NonTermKind::PostfixExpression,
            ProdKind::PostfixExpressionP7 => NonTermKind::PostfixExpression,
            ProdKind::PostfixExpressionP8 => NonTermKind::PostfixExpression,
            ProdKind::PostfixExpressionP9 => NonTermKind::PostfixExpression,
            ProdKind::PrimaryExpressionNumber => NonTermKind::PrimaryExpression,
            ProdKind::PrimaryExpressionIdentifier => NonTermKind::PrimaryExpression,
            ProdKind::PrimaryExpressionParen => NonTermKind::PrimaryExpression,
            ProdKind::ExpressionCommaExpression => NonTermKind::Expression,
            ProdKind::ExpressionAssignmentExpression => NonTermKind::Expression,
            ProdKind::ExpressionP3 => NonTermKind::Expression,
            ProdKind::ExpressionP4 => NonTermKind::Expression,
            ProdKind::ExpressionP5 => NonTermKind::Expression,
            ProdKind::ArgumentExpressionListP1 => NonTermKind::ArgumentExpressionList,
            ProdKind::ArgumentExpressionListP2 => NonTermKind::ArgumentExpressionList,
            ProdKind::TypeNameP1 => NonTermKind::TypeName,
            ProdKind::AbstractDeclaratorOptP1 => NonTermKind::AbstractDeclaratorOpt,
            ProdKind::AbstractDeclaratorOptP2 => NonTermKind::AbstractDeclaratorOpt,
            ProdKind::AbstractDeclaratorP1 => NonTermKind::AbstractDeclarator,
            ProdKind::AbstractDeclaratorP2 => NonTermKind::AbstractDeclarator,
            ProdKind::DirectAbstractDeclaratorP1 => NonTermKind::DirectAbstractDeclarator,
            ProdKind::DirectAbstractDeclaratorP2 => NonTermKind::DirectAbstractDeclarator,
            ProdKind::DirectAbstractDeclaratorOptP1 => {
                NonTermKind::DirectAbstractDeclaratorOpt
            }
            ProdKind::DirectAbstractDeclaratorOptP2 => {
                NonTermKind::DirectAbstractDeclaratorOpt
            }
            ProdKind::DirectAbstractDeclaratorP3 => NonTermKind::DirectAbstractDeclarator,
            ProdKind::DirectAbstractDeclaratorP4 => NonTermKind::DirectAbstractDeclarator,
            ProdKind::DirectAbstractDeclaratorP5 => NonTermKind::DirectAbstractDeclarator,
            ProdKind::DirectAbstractDeclaratorP6 => NonTermKind::DirectAbstractDeclarator,
            ProdKind::ParameterTypeListOptP1 => NonTermKind::ParameterTypeListOpt,
            ProdKind::ParameterTypeListOptP2 => NonTermKind::ParameterTypeListOpt,
            ProdKind::ParameterTypeListP1 => NonTermKind::ParameterTypeList,
            ProdKind::ParameterTypeListP2 => NonTermKind::ParameterTypeList,
            ProdKind::ParameterListP1 => NonTermKind::ParameterList,
            ProdKind::ParameterListP2 => NonTermKind::ParameterList,
            ProdKind::ParameterDeclarationP1 => NonTermKind::ParameterDeclaration,
            ProdKind::ParameterDeclarationP2 => NonTermKind::ParameterDeclaration,
            ProdKind::InitializerListP1 => NonTermKind::InitializerList,
            ProdKind::DesignationOptP1 => NonTermKind::DesignationOpt,
            ProdKind::DesignationOptP2 => NonTermKind::DesignationOpt,
            ProdKind::InitializerListP2 => NonTermKind::InitializerList,
            ProdKind::DesignationP1 => NonTermKind::Designation,
            ProdKind::DesignatorListP1 => NonTermKind::DesignatorList,
            ProdKind::DesignatorListP2 => NonTermKind::DesignatorList,
            ProdKind::DesignatorP1 => NonTermKind::Designator,
            ProdKind::DesignatorP2 => NonTermKind::Designator,
            ProdKind::ConstantExpressionP1 => NonTermKind::ConstantExpression,
            ProdKind::InitializerP1 => NonTermKind::Initializer,
            ProdKind::InitializerP2 => NonTermKind::Initializer,
            ProdKind::CommaOptP1 => NonTermKind::CommaOpt,
            ProdKind::CommaOptP2 => NonTermKind::CommaOpt,
            ProdKind::IdentifierListP1 => NonTermKind::IdentifierList,
            ProdKind::IdentifierListP2 => NonTermKind::IdentifierList,
            ProdKind::EnumSpecifierP1 => NonTermKind::EnumSpecifier,
            ProdKind::EnumSpecifierP2 => NonTermKind::EnumSpecifier,
            ProdKind::EnumeratorListP1 => NonTermKind::EnumeratorList,
            ProdKind::EnumeratorListP2 => NonTermKind::EnumeratorList,
            ProdKind::EnumeratorP1 => NonTermKind::Enumerator,
            ProdKind::EnumeratorP2 => NonTermKind::Enumerator,
            ProdKind::EnumerationConstantP1 => NonTermKind::EnumerationConstant,
            ProdKind::TypedefNameP1 => NonTermKind::TypedefName,
            ProdKind::FunctionSpecifierP1 => NonTermKind::FunctionSpecifier,
            ProdKind::DeclarationListP1 => NonTermKind::DeclarationList,
            ProdKind::DeclarationListP2 => NonTermKind::DeclarationList,
            ProdKind::DeclarationP1 => NonTermKind::Declaration,
            ProdKind::InitDeclaratorListOptP1 => NonTermKind::InitDeclaratorListOpt,
            ProdKind::InitDeclaratorListOptP2 => NonTermKind::InitDeclaratorListOpt,
            ProdKind::InitDeclaratorListP1 => NonTermKind::InitDeclaratorList,
            ProdKind::InitDeclaratorListP2 => NonTermKind::InitDeclaratorList,
            ProdKind::InitDeclaratorP1 => NonTermKind::InitDeclarator,
            ProdKind::InitDeclaratorP2 => NonTermKind::InitDeclarator,
            ProdKind::CompoundStatementP1 => NonTermKind::CompoundStatement,
            ProdKind::BlockItemListOptP1 => NonTermKind::BlockItemListOpt,
            ProdKind::BlockItemListOptP2 => NonTermKind::BlockItemListOpt,
            ProdKind::BlockItemListP1 => NonTermKind::BlockItemList,
            ProdKind::BlockItemListP2 => NonTermKind::BlockItemList,
            ProdKind::BlockItemP1 => NonTermKind::BlockItem,
            ProdKind::BlockItemP2 => NonTermKind::BlockItem,
            ProdKind::StatementP1 => NonTermKind::Statement,
            ProdKind::StatementP2 => NonTermKind::Statement,
            ProdKind::StatementP3 => NonTermKind::Statement,
            ProdKind::StatementP4 => NonTermKind::Statement,
            ProdKind::StatementP5 => NonTermKind::Statement,
            ProdKind::StatementP6 => NonTermKind::Statement,
            ProdKind::LabeledStatementP1 => NonTermKind::LabeledStatement,
            ProdKind::LabeledStatementP2 => NonTermKind::LabeledStatement,
            ProdKind::LabeledStatementP3 => NonTermKind::LabeledStatement,
            ProdKind::ExpressionStatementP1 => NonTermKind::ExpressionStatement,
            ProdKind::ExpressionOptP1 => NonTermKind::ExpressionOpt,
            ProdKind::ExpressionOptP2 => NonTermKind::ExpressionOpt,
            ProdKind::SelectionStatementP1 => NonTermKind::SelectionStatement,
            ProdKind::SelectionStatementP2 => NonTermKind::SelectionStatement,
            ProdKind::SelectionStatementP3 => NonTermKind::SelectionStatement,
            ProdKind::IterationStatementP1 => NonTermKind::IterationStatement,
            ProdKind::IterationStatementP2 => NonTermKind::IterationStatement,
            ProdKind::IterationStatementP3 => NonTermKind::IterationStatement,
            ProdKind::IterationStatementP4 => NonTermKind::IterationStatement,
            ProdKind::JumpStatementP1 => NonTermKind::JumpStatement,
            ProdKind::JumpStatementP2 => NonTermKind::JumpStatement,
            ProdKind::JumpStatementP3 => NonTermKind::JumpStatement,
            ProdKind::JumpStatementP4 => NonTermKind::JumpStatement,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    IdentifierS1,
    AutoS2,
    CharS3,
    ConstS4,
    DoubleS5,
    EnumS6,
    ExternS7,
    FloatS8,
    InlineS9,
    IntS10,
    LongS11,
    RegisterS12,
    RestrictS13,
    ShortS14,
    SignedS15,
    StaticS16,
    StructS17,
    TypedefS18,
    UnderscoreBoolS19,
    UnderscoreComplexS20,
    UnionS21,
    UnsignedS22,
    VoidS23,
    VolatileS24,
    TranslationUnitS25,
    ExternalDeclarationS26,
    FunctionDefinitionS27,
    DeclarationSpecifiersS28,
    StorageClassSpecifierS29,
    TypeSpecifierS30,
    StructOrUnionSpecifierS31,
    StructOrUnionS32,
    TypeQualifierS33,
    EnumSpecifierS34,
    TypedefNameS35,
    FunctionSpecifierS36,
    DeclarationS37,
    IdentifierS38,
    IdentifierOptS39,
    ExternalDeclarationS40,
    StarS41,
    DeclaratorS42,
    PointerOptS43,
    PointerS44,
    InitDeclaratorListOptS45,
    InitDeclaratorListS46,
    InitDeclaratorS47,
    DeclarationSpecifiersS48,
    DeclarationSpecifiersOptS49,
    DeclarationSpecifiersOptS50,
    IdentifierS51,
    IdentifierOptS52,
    DeclarationSpecifiersOptS53,
    DeclarationSpecifiersOptS54,
    LeftCurlyBracketS55,
    TypeQualifierS56,
    TypeQualifierListOptS57,
    TypeQualifierListS58,
    EqualS59,
    DeclarationListOptS60,
    DeclarationSpecifiersS61,
    DeclarationListS62,
    DeclarationS63,
    LeftParenS64,
    IdentifierS65,
    DirectDeclaratorS66,
    SemicolonS67,
    CommaS68,
    LeftCurlyBracketS69,
    IdentifierS70,
    EnumeratorListS71,
    EnumeratorS72,
    EnumerationConstantS73,
    PointerS74,
    TypeQualifierS75,
    PlusS76,
    DashS77,
    StarS78,
    AmpersandS79,
    LeftParenS80,
    ExclaimS81,
    TildeS82,
    NumS83,
    IdentifierS84,
    SizeofS85,
    LeftCurlyBracketS86,
    DoublePlusS87,
    DoubleMinusS88,
    AssignmentExpressionS89,
    ConditionalExpressionS90,
    ArithmeticExpressionS91,
    UnaryExpressionS92,
    PostfixExpressionS93,
    PrimaryExpressionS94,
    ExpressionS95,
    InitializerS96,
    LeftCurlyBracketS97,
    CompoundStatementS98,
    DeclaratorS99,
    DeclarationS100,
    DeclaratorS101,
    LeftParenS102,
    LeftSquareBracketS103,
    InitDeclaratorS104,
    TypeSpecifierS105,
    StructDeclarationListS106,
    StructDeclarationS107,
    SpecifierQualifierListS108,
    TypeQualifierS109,
    CommaS110,
    CommaOptS111,
    EqualS112,
    LeftParenS113,
    CastExpressionS114,
    UnaryExpressionS115,
    CastExpressionS116,
    CastExpressionS117,
    CastExpressionS118,
    IdentifierS119,
    SpecifierQualifierListS120,
    AssignmentExpressionS121,
    ExpressionS122,
    TypeNameS123,
    CastExpressionS124,
    CastExpressionS125,
    LeftParenS126,
    ExpressionS127,
    LeftSquareBracketS128,
    DotS129,
    InitializerListS130,
    DesignationOptS131,
    DesignationS132,
    DesignatorListS133,
    DesignatorS134,
    UnaryExpressionS135,
    UnaryExpressionS136,
    QuestionS137,
    LeftParenS138,
    LeftSquareBracketS139,
    DoublePlusS140,
    DoubleMinusS141,
    DotS142,
    DashRightBracketS143,
    PlusS144,
    DashS145,
    StarS146,
    SlashS147,
    PercentS148,
    DoubleLeftS149,
    DoubleRightS150,
    EqualS151,
    DoubleEqualS152,
    ExclaimEqualS153,
    AmpersandS154,
    DoubleAmpersandS155,
    LeftBracketS156,
    RightBracketS157,
    VerticalBarS158,
    DoubleVerticalBarS159,
    CaretS160,
    CommaS161,
    LeftBracketEqualS162,
    RightBracketEqualS163,
    IdentifierS164,
    BreakS165,
    CaseS166,
    ContinueS167,
    DefaultS168,
    DoS169,
    ForS170,
    GotoS171,
    IfS172,
    ReturnS173,
    SwitchS174,
    WhileS175,
    ExpressionS176,
    DeclarationS177,
    CompoundStatementS178,
    BlockItemListOptS179,
    BlockItemListS180,
    BlockItemS181,
    StatementS182,
    LabeledStatementS183,
    ExpressionStatementS184,
    ExpressionOptS185,
    SelectionStatementS186,
    IterationStatementS187,
    JumpStatementS188,
    RightParenS189,
    IdentifierS190,
    DeclarationSpecifiersS191,
    IdentifierListOptS192,
    ParameterTypeListS193,
    ParameterListS194,
    ParameterDeclarationS195,
    IdentifierListS196,
    StaticS197,
    TypeQualifierListOptS198,
    TypeQualifierListS199,
    SpecifierQualifierListS200,
    SpecifierQualifierListOptS201,
    RightCurlyBracketS202,
    StructDeclarationS203,
    StructDeclaratorListS204,
    StructDeclaratorS205,
    DeclaratorOptS206,
    DeclaratorS207,
    SpecifierQualifierListOptS208,
    EnumeratorS209,
    RightCurlyBracketS210,
    ConditionalExpressionS211,
    ArithmeticExpressionS212,
    ExpressionS213,
    ConstantExpressionS214,
    TypeNameS215,
    PointerOptS216,
    PointerS217,
    AbstractDeclaratorOptS218,
    AbstractDeclaratorS219,
    RightParenS220,
    RightParenS221,
    TypeNameS222,
    ConstantExpressionS223,
    IdentifierS224,
    CommaS225,
    CommaOptS226,
    InitializerS227,
    EqualS228,
    DesignatorS229,
    ExpressionS230,
    AssignmentExpressionS231,
    ArgumentExpressionListOptS232,
    ArgumentExpressionListS233,
    ExpressionS234,
    IdentifierS235,
    IdentifierS236,
    ExpressionS237,
    ExpressionS238,
    ExpressionS239,
    ExpressionS240,
    ExpressionS241,
    ExpressionS242,
    ExpressionS243,
    ExpressionS244,
    ExpressionS245,
    ExpressionS246,
    ExpressionS247,
    ExpressionS248,
    ExpressionS249,
    ExpressionS250,
    ExpressionS251,
    ExpressionS252,
    ExpressionS253,
    ExpressionS254,
    ExpressionS255,
    ExpressionS256,
    ColonS257,
    SemicolonS258,
    ConstantExpressionS259,
    SemicolonS260,
    ColonS261,
    IdentifierS262,
    StatementS263,
    LeftParenS264,
    IdentifierS265,
    LeftParenS266,
    ExpressionOptS267,
    LeftParenS268,
    LeftParenS269,
    RightCurlyBracketS270,
    BlockItemS271,
    SemicolonS272,
    DeclaratorS273,
    PointerOptS274,
    PointerS275,
    AbstractDeclaratorOptS276,
    RightParenS277,
    RightParenS278,
    CommaS279,
    CommaS280,
    TypeQualifierListOptS281,
    StarS282,
    AssignmentExpressionOptS283,
    AssignmentExpressionS284,
    StaticS285,
    CommaS286,
    SemicolonS287,
    ColonS288,
    RightParenS289,
    LeftParenS290,
    DirectAbstractDeclaratorS291,
    DirectAbstractDeclaratorOptS292,
    LeftCurlyBracketS293,
    RightParenS294,
    RightSquareBracketS295,
    DesignationOptS296,
    RightCurlyBracketS297,
    ColonS298,
    RightParenS299,
    CommaS300,
    RightSquareBracketS301,
    StatementS302,
    ColonS303,
    StatementS304,
    WhileS305,
    IdentifierS306,
    DeclarationS307,
    ExpressionOptS308,
    SemicolonS309,
    ExpressionS310,
    SemicolonS311,
    ExpressionS312,
    ExpressionS313,
    LeftParenS314,
    EllipsisS315,
    ParameterDeclarationS316,
    IdentifierS317,
    AssignmentExpressionS318,
    RightSquareBracketS319,
    RightSquareBracketS320,
    AssignmentExpressionS321,
    StructDeclaratorS322,
    ConstantExpressionS323,
    CastExpressionS324,
    AbstractDeclaratorS325,
    LeftParenS326,
    LeftSquareBracketS327,
    InitializerListS328,
    InitializerS329,
    ConditionalExpressionS330,
    AssignmentExpressionS331,
    StatementS332,
    LeftParenS333,
    ExpressionOptS334,
    SemicolonS335,
    RightParenS336,
    RightParenS337,
    RightParenS338,
    RightSquareBracketS339,
    RightSquareBracketS340,
    RightParenS341,
    ParameterTypeListOptS342,
    ParameterTypeListS343,
    StarS344,
    StaticS345,
    TypeQualifierListOptS346,
    TypeQualifierListS347,
    CommaS348,
    RightCurlyBracketS349,
    ExpressionS350,
    SemicolonS351,
    ExpressionOptS352,
    StatementS353,
    StatementS354,
    StatementS355,
    RightParenS356,
    RightSquareBracketS357,
    TypeQualifierListOptS358,
    AssignmentExpressionOptS359,
    StaticS360,
    RightCurlyBracketS361,
    RightParenS362,
    ExpressionOptS363,
    SemicolonS364,
    ElseS365,
    AssignmentExpressionS366,
    RightSquareBracketS367,
    AssignmentExpressionS368,
    SemicolonS369,
    RightParenS370,
    ExpressionOptS371,
    StatementS372,
    RightSquareBracketS373,
    RightSquareBracketS374,
    StatementS375,
    RightParenS376,
    StatementS377,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        None
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::IdentifierS1 => "1:Identifier",
            State::AutoS2 => "2:Auto",
            State::CharS3 => "3:Char",
            State::ConstS4 => "4:Const",
            State::DoubleS5 => "5:Double",
            State::EnumS6 => "6:Enum",
            State::ExternS7 => "7:Extern",
            State::FloatS8 => "8:Float",
            State::InlineS9 => "9:Inline",
            State::IntS10 => "10:Int",
            State::LongS11 => "11:Long",
            State::RegisterS12 => "12:Register",
            State::RestrictS13 => "13:Restrict",
            State::ShortS14 => "14:Short",
            State::SignedS15 => "15:Signed",
            State::StaticS16 => "16:Static",
            State::StructS17 => "17:Struct",
            State::TypedefS18 => "18:Typedef",
            State::UnderscoreBoolS19 => "19:UnderscoreBool",
            State::UnderscoreComplexS20 => "20:UnderscoreComplex",
            State::UnionS21 => "21:Union",
            State::UnsignedS22 => "22:Unsigned",
            State::VoidS23 => "23:Void",
            State::VolatileS24 => "24:Volatile",
            State::TranslationUnitS25 => "25:TranslationUnit",
            State::ExternalDeclarationS26 => "26:ExternalDeclaration",
            State::FunctionDefinitionS27 => "27:FunctionDefinition",
            State::DeclarationSpecifiersS28 => "28:DeclarationSpecifiers",
            State::StorageClassSpecifierS29 => "29:StorageClassSpecifier",
            State::TypeSpecifierS30 => "30:TypeSpecifier",
            State::StructOrUnionSpecifierS31 => "31:StructOrUnionSpecifier",
            State::StructOrUnionS32 => "32:StructOrUnion",
            State::TypeQualifierS33 => "33:TypeQualifier",
            State::EnumSpecifierS34 => "34:EnumSpecifier",
            State::TypedefNameS35 => "35:TypedefName",
            State::FunctionSpecifierS36 => "36:FunctionSpecifier",
            State::DeclarationS37 => "37:Declaration",
            State::IdentifierS38 => "38:Identifier",
            State::IdentifierOptS39 => "39:IdentifierOpt",
            State::ExternalDeclarationS40 => "40:ExternalDeclaration",
            State::StarS41 => "41:Star",
            State::DeclaratorS42 => "42:Declarator",
            State::PointerOptS43 => "43:PointerOpt",
            State::PointerS44 => "44:Pointer",
            State::InitDeclaratorListOptS45 => "45:InitDeclaratorListOpt",
            State::InitDeclaratorListS46 => "46:InitDeclaratorList",
            State::InitDeclaratorS47 => "47:InitDeclarator",
            State::DeclarationSpecifiersS48 => "48:DeclarationSpecifiers",
            State::DeclarationSpecifiersOptS49 => "49:DeclarationSpecifiersOpt",
            State::DeclarationSpecifiersOptS50 => "50:DeclarationSpecifiersOpt",
            State::IdentifierS51 => "51:Identifier",
            State::IdentifierOptS52 => "52:IdentifierOpt",
            State::DeclarationSpecifiersOptS53 => "53:DeclarationSpecifiersOpt",
            State::DeclarationSpecifiersOptS54 => "54:DeclarationSpecifiersOpt",
            State::LeftCurlyBracketS55 => "55:LeftCurlyBracket",
            State::TypeQualifierS56 => "56:TypeQualifier",
            State::TypeQualifierListOptS57 => "57:TypeQualifierListOpt",
            State::TypeQualifierListS58 => "58:TypeQualifierList",
            State::EqualS59 => "59:Equal",
            State::DeclarationListOptS60 => "60:DeclarationListOpt",
            State::DeclarationSpecifiersS61 => "61:DeclarationSpecifiers",
            State::DeclarationListS62 => "62:DeclarationList",
            State::DeclarationS63 => "63:Declaration",
            State::LeftParenS64 => "64:LeftParen",
            State::IdentifierS65 => "65:Identifier",
            State::DirectDeclaratorS66 => "66:DirectDeclarator",
            State::SemicolonS67 => "67:Semicolon",
            State::CommaS68 => "68:Comma",
            State::LeftCurlyBracketS69 => "69:LeftCurlyBracket",
            State::IdentifierS70 => "70:Identifier",
            State::EnumeratorListS71 => "71:EnumeratorList",
            State::EnumeratorS72 => "72:Enumerator",
            State::EnumerationConstantS73 => "73:EnumerationConstant",
            State::PointerS74 => "74:Pointer",
            State::TypeQualifierS75 => "75:TypeQualifier",
            State::PlusS76 => "76:Plus",
            State::DashS77 => "77:Dash",
            State::StarS78 => "78:Star",
            State::AmpersandS79 => "79:Ampersand",
            State::LeftParenS80 => "80:LeftParen",
            State::ExclaimS81 => "81:Exclaim",
            State::TildeS82 => "82:Tilde",
            State::NumS83 => "83:Num",
            State::IdentifierS84 => "84:Identifier",
            State::SizeofS85 => "85:Sizeof",
            State::LeftCurlyBracketS86 => "86:LeftCurlyBracket",
            State::DoublePlusS87 => "87:DoublePlus",
            State::DoubleMinusS88 => "88:DoubleMinus",
            State::AssignmentExpressionS89 => "89:AssignmentExpression",
            State::ConditionalExpressionS90 => "90:ConditionalExpression",
            State::ArithmeticExpressionS91 => "91:ArithmeticExpression",
            State::UnaryExpressionS92 => "92:UnaryExpression",
            State::PostfixExpressionS93 => "93:PostfixExpression",
            State::PrimaryExpressionS94 => "94:PrimaryExpression",
            State::ExpressionS95 => "95:Expression",
            State::InitializerS96 => "96:Initializer",
            State::LeftCurlyBracketS97 => "97:LeftCurlyBracket",
            State::CompoundStatementS98 => "98:CompoundStatement",
            State::DeclaratorS99 => "99:Declarator",
            State::DeclarationS100 => "100:Declaration",
            State::DeclaratorS101 => "101:Declarator",
            State::LeftParenS102 => "102:LeftParen",
            State::LeftSquareBracketS103 => "103:LeftSquareBracket",
            State::InitDeclaratorS104 => "104:InitDeclarator",
            State::TypeSpecifierS105 => "105:TypeSpecifier",
            State::StructDeclarationListS106 => "106:StructDeclarationList",
            State::StructDeclarationS107 => "107:StructDeclaration",
            State::SpecifierQualifierListS108 => "108:SpecifierQualifierList",
            State::TypeQualifierS109 => "109:TypeQualifier",
            State::CommaS110 => "110:Comma",
            State::CommaOptS111 => "111:CommaOpt",
            State::EqualS112 => "112:Equal",
            State::LeftParenS113 => "113:LeftParen",
            State::CastExpressionS114 => "114:CastExpression",
            State::UnaryExpressionS115 => "115:UnaryExpression",
            State::CastExpressionS116 => "116:CastExpression",
            State::CastExpressionS117 => "117:CastExpression",
            State::CastExpressionS118 => "118:CastExpression",
            State::IdentifierS119 => "119:Identifier",
            State::SpecifierQualifierListS120 => "120:SpecifierQualifierList",
            State::AssignmentExpressionS121 => "121:AssignmentExpression",
            State::ExpressionS122 => "122:Expression",
            State::TypeNameS123 => "123:TypeName",
            State::CastExpressionS124 => "124:CastExpression",
            State::CastExpressionS125 => "125:CastExpression",
            State::LeftParenS126 => "126:LeftParen",
            State::ExpressionS127 => "127:Expression",
            State::LeftSquareBracketS128 => "128:LeftSquareBracket",
            State::DotS129 => "129:Dot",
            State::InitializerListS130 => "130:InitializerList",
            State::DesignationOptS131 => "131:DesignationOpt",
            State::DesignationS132 => "132:Designation",
            State::DesignatorListS133 => "133:DesignatorList",
            State::DesignatorS134 => "134:Designator",
            State::UnaryExpressionS135 => "135:UnaryExpression",
            State::UnaryExpressionS136 => "136:UnaryExpression",
            State::QuestionS137 => "137:Question",
            State::LeftParenS138 => "138:LeftParen",
            State::LeftSquareBracketS139 => "139:LeftSquareBracket",
            State::DoublePlusS140 => "140:DoublePlus",
            State::DoubleMinusS141 => "141:DoubleMinus",
            State::DotS142 => "142:Dot",
            State::DashRightBracketS143 => "143:DashRightBracket",
            State::PlusS144 => "144:Plus",
            State::DashS145 => "145:Dash",
            State::StarS146 => "146:Star",
            State::SlashS147 => "147:Slash",
            State::PercentS148 => "148:Percent",
            State::DoubleLeftS149 => "149:DoubleLeft",
            State::DoubleRightS150 => "150:DoubleRight",
            State::EqualS151 => "151:Equal",
            State::DoubleEqualS152 => "152:DoubleEqual",
            State::ExclaimEqualS153 => "153:ExclaimEqual",
            State::AmpersandS154 => "154:Ampersand",
            State::DoubleAmpersandS155 => "155:DoubleAmpersand",
            State::LeftBracketS156 => "156:LeftBracket",
            State::RightBracketS157 => "157:RightBracket",
            State::VerticalBarS158 => "158:VerticalBar",
            State::DoubleVerticalBarS159 => "159:DoubleVerticalBar",
            State::CaretS160 => "160:Caret",
            State::CommaS161 => "161:Comma",
            State::LeftBracketEqualS162 => "162:LeftBracketEqual",
            State::RightBracketEqualS163 => "163:RightBracketEqual",
            State::IdentifierS164 => "164:Identifier",
            State::BreakS165 => "165:Break",
            State::CaseS166 => "166:Case",
            State::ContinueS167 => "167:Continue",
            State::DefaultS168 => "168:Default",
            State::DoS169 => "169:Do",
            State::ForS170 => "170:For",
            State::GotoS171 => "171:Goto",
            State::IfS172 => "172:If",
            State::ReturnS173 => "173:Return",
            State::SwitchS174 => "174:Switch",
            State::WhileS175 => "175:While",
            State::ExpressionS176 => "176:Expression",
            State::DeclarationS177 => "177:Declaration",
            State::CompoundStatementS178 => "178:CompoundStatement",
            State::BlockItemListOptS179 => "179:BlockItemListOpt",
            State::BlockItemListS180 => "180:BlockItemList",
            State::BlockItemS181 => "181:BlockItem",
            State::StatementS182 => "182:Statement",
            State::LabeledStatementS183 => "183:LabeledStatement",
            State::ExpressionStatementS184 => "184:ExpressionStatement",
            State::ExpressionOptS185 => "185:ExpressionOpt",
            State::SelectionStatementS186 => "186:SelectionStatement",
            State::IterationStatementS187 => "187:IterationStatement",
            State::JumpStatementS188 => "188:JumpStatement",
            State::RightParenS189 => "189:RightParen",
            State::IdentifierS190 => "190:Identifier",
            State::DeclarationSpecifiersS191 => "191:DeclarationSpecifiers",
            State::IdentifierListOptS192 => "192:IdentifierListOpt",
            State::ParameterTypeListS193 => "193:ParameterTypeList",
            State::ParameterListS194 => "194:ParameterList",
            State::ParameterDeclarationS195 => "195:ParameterDeclaration",
            State::IdentifierListS196 => "196:IdentifierList",
            State::StaticS197 => "197:Static",
            State::TypeQualifierListOptS198 => "198:TypeQualifierListOpt",
            State::TypeQualifierListS199 => "199:TypeQualifierList",
            State::SpecifierQualifierListS200 => "200:SpecifierQualifierList",
            State::SpecifierQualifierListOptS201 => "201:SpecifierQualifierListOpt",
            State::RightCurlyBracketS202 => "202:RightCurlyBracket",
            State::StructDeclarationS203 => "203:StructDeclaration",
            State::StructDeclaratorListS204 => "204:StructDeclaratorList",
            State::StructDeclaratorS205 => "205:StructDeclarator",
            State::DeclaratorOptS206 => "206:DeclaratorOpt",
            State::DeclaratorS207 => "207:Declarator",
            State::SpecifierQualifierListOptS208 => "208:SpecifierQualifierListOpt",
            State::EnumeratorS209 => "209:Enumerator",
            State::RightCurlyBracketS210 => "210:RightCurlyBracket",
            State::ConditionalExpressionS211 => "211:ConditionalExpression",
            State::ArithmeticExpressionS212 => "212:ArithmeticExpression",
            State::ExpressionS213 => "213:Expression",
            State::ConstantExpressionS214 => "214:ConstantExpression",
            State::TypeNameS215 => "215:TypeName",
            State::PointerOptS216 => "216:PointerOpt",
            State::PointerS217 => "217:Pointer",
            State::AbstractDeclaratorOptS218 => "218:AbstractDeclaratorOpt",
            State::AbstractDeclaratorS219 => "219:AbstractDeclarator",
            State::RightParenS220 => "220:RightParen",
            State::RightParenS221 => "221:RightParen",
            State::TypeNameS222 => "222:TypeName",
            State::ConstantExpressionS223 => "223:ConstantExpression",
            State::IdentifierS224 => "224:Identifier",
            State::CommaS225 => "225:Comma",
            State::CommaOptS226 => "226:CommaOpt",
            State::InitializerS227 => "227:Initializer",
            State::EqualS228 => "228:Equal",
            State::DesignatorS229 => "229:Designator",
            State::ExpressionS230 => "230:Expression",
            State::AssignmentExpressionS231 => "231:AssignmentExpression",
            State::ArgumentExpressionListOptS232 => "232:ArgumentExpressionListOpt",
            State::ArgumentExpressionListS233 => "233:ArgumentExpressionList",
            State::ExpressionS234 => "234:Expression",
            State::IdentifierS235 => "235:Identifier",
            State::IdentifierS236 => "236:Identifier",
            State::ExpressionS237 => "237:Expression",
            State::ExpressionS238 => "238:Expression",
            State::ExpressionS239 => "239:Expression",
            State::ExpressionS240 => "240:Expression",
            State::ExpressionS241 => "241:Expression",
            State::ExpressionS242 => "242:Expression",
            State::ExpressionS243 => "243:Expression",
            State::ExpressionS244 => "244:Expression",
            State::ExpressionS245 => "245:Expression",
            State::ExpressionS246 => "246:Expression",
            State::ExpressionS247 => "247:Expression",
            State::ExpressionS248 => "248:Expression",
            State::ExpressionS249 => "249:Expression",
            State::ExpressionS250 => "250:Expression",
            State::ExpressionS251 => "251:Expression",
            State::ExpressionS252 => "252:Expression",
            State::ExpressionS253 => "253:Expression",
            State::ExpressionS254 => "254:Expression",
            State::ExpressionS255 => "255:Expression",
            State::ExpressionS256 => "256:Expression",
            State::ColonS257 => "257:Colon",
            State::SemicolonS258 => "258:Semicolon",
            State::ConstantExpressionS259 => "259:ConstantExpression",
            State::SemicolonS260 => "260:Semicolon",
            State::ColonS261 => "261:Colon",
            State::IdentifierS262 => "262:Identifier",
            State::StatementS263 => "263:Statement",
            State::LeftParenS264 => "264:LeftParen",
            State::IdentifierS265 => "265:Identifier",
            State::LeftParenS266 => "266:LeftParen",
            State::ExpressionOptS267 => "267:ExpressionOpt",
            State::LeftParenS268 => "268:LeftParen",
            State::LeftParenS269 => "269:LeftParen",
            State::RightCurlyBracketS270 => "270:RightCurlyBracket",
            State::BlockItemS271 => "271:BlockItem",
            State::SemicolonS272 => "272:Semicolon",
            State::DeclaratorS273 => "273:Declarator",
            State::PointerOptS274 => "274:PointerOpt",
            State::PointerS275 => "275:Pointer",
            State::AbstractDeclaratorOptS276 => "276:AbstractDeclaratorOpt",
            State::RightParenS277 => "277:RightParen",
            State::RightParenS278 => "278:RightParen",
            State::CommaS279 => "279:Comma",
            State::CommaS280 => "280:Comma",
            State::TypeQualifierListOptS281 => "281:TypeQualifierListOpt",
            State::StarS282 => "282:Star",
            State::AssignmentExpressionOptS283 => "283:AssignmentExpressionOpt",
            State::AssignmentExpressionS284 => "284:AssignmentExpression",
            State::StaticS285 => "285:Static",
            State::CommaS286 => "286:Comma",
            State::SemicolonS287 => "287:Semicolon",
            State::ColonS288 => "288:Colon",
            State::RightParenS289 => "289:RightParen",
            State::LeftParenS290 => "290:LeftParen",
            State::DirectAbstractDeclaratorS291 => "291:DirectAbstractDeclarator",
            State::DirectAbstractDeclaratorOptS292 => "292:DirectAbstractDeclaratorOpt",
            State::LeftCurlyBracketS293 => "293:LeftCurlyBracket",
            State::RightParenS294 => "294:RightParen",
            State::RightSquareBracketS295 => "295:RightSquareBracket",
            State::DesignationOptS296 => "296:DesignationOpt",
            State::RightCurlyBracketS297 => "297:RightCurlyBracket",
            State::ColonS298 => "298:Colon",
            State::RightParenS299 => "299:RightParen",
            State::CommaS300 => "300:Comma",
            State::RightSquareBracketS301 => "301:RightSquareBracket",
            State::StatementS302 => "302:Statement",
            State::ColonS303 => "303:Colon",
            State::StatementS304 => "304:Statement",
            State::WhileS305 => "305:While",
            State::IdentifierS306 => "306:Identifier",
            State::DeclarationS307 => "307:Declaration",
            State::ExpressionOptS308 => "308:ExpressionOpt",
            State::SemicolonS309 => "309:Semicolon",
            State::ExpressionS310 => "310:Expression",
            State::SemicolonS311 => "311:Semicolon",
            State::ExpressionS312 => "312:Expression",
            State::ExpressionS313 => "313:Expression",
            State::LeftParenS314 => "314:LeftParen",
            State::EllipsisS315 => "315:Ellipsis",
            State::ParameterDeclarationS316 => "316:ParameterDeclaration",
            State::IdentifierS317 => "317:Identifier",
            State::AssignmentExpressionS318 => "318:AssignmentExpression",
            State::RightSquareBracketS319 => "319:RightSquareBracket",
            State::RightSquareBracketS320 => "320:RightSquareBracket",
            State::AssignmentExpressionS321 => "321:AssignmentExpression",
            State::StructDeclaratorS322 => "322:StructDeclarator",
            State::ConstantExpressionS323 => "323:ConstantExpression",
            State::CastExpressionS324 => "324:CastExpression",
            State::AbstractDeclaratorS325 => "325:AbstractDeclarator",
            State::LeftParenS326 => "326:LeftParen",
            State::LeftSquareBracketS327 => "327:LeftSquareBracket",
            State::InitializerListS328 => "328:InitializerList",
            State::InitializerS329 => "329:Initializer",
            State::ConditionalExpressionS330 => "330:ConditionalExpression",
            State::AssignmentExpressionS331 => "331:AssignmentExpression",
            State::StatementS332 => "332:Statement",
            State::LeftParenS333 => "333:LeftParen",
            State::ExpressionOptS334 => "334:ExpressionOpt",
            State::SemicolonS335 => "335:Semicolon",
            State::RightParenS336 => "336:RightParen",
            State::RightParenS337 => "337:RightParen",
            State::RightParenS338 => "338:RightParen",
            State::RightSquareBracketS339 => "339:RightSquareBracket",
            State::RightSquareBracketS340 => "340:RightSquareBracket",
            State::RightParenS341 => "341:RightParen",
            State::ParameterTypeListOptS342 => "342:ParameterTypeListOpt",
            State::ParameterTypeListS343 => "343:ParameterTypeList",
            State::StarS344 => "344:Star",
            State::StaticS345 => "345:Static",
            State::TypeQualifierListOptS346 => "346:TypeQualifierListOpt",
            State::TypeQualifierListS347 => "347:TypeQualifierList",
            State::CommaS348 => "348:Comma",
            State::RightCurlyBracketS349 => "349:RightCurlyBracket",
            State::ExpressionS350 => "350:Expression",
            State::SemicolonS351 => "351:Semicolon",
            State::ExpressionOptS352 => "352:ExpressionOpt",
            State::StatementS353 => "353:Statement",
            State::StatementS354 => "354:Statement",
            State::StatementS355 => "355:Statement",
            State::RightParenS356 => "356:RightParen",
            State::RightSquareBracketS357 => "357:RightSquareBracket",
            State::TypeQualifierListOptS358 => "358:TypeQualifierListOpt",
            State::AssignmentExpressionOptS359 => "359:AssignmentExpressionOpt",
            State::StaticS360 => "360:Static",
            State::RightCurlyBracketS361 => "361:RightCurlyBracket",
            State::RightParenS362 => "362:RightParen",
            State::ExpressionOptS363 => "363:ExpressionOpt",
            State::SemicolonS364 => "364:Semicolon",
            State::ElseS365 => "365:Else",
            State::AssignmentExpressionS366 => "366:AssignmentExpression",
            State::RightSquareBracketS367 => "367:RightSquareBracket",
            State::AssignmentExpressionS368 => "368:AssignmentExpression",
            State::SemicolonS369 => "369:Semicolon",
            State::RightParenS370 => "370:RightParen",
            State::ExpressionOptS371 => "371:ExpressionOpt",
            State::StatementS372 => "372:Statement",
            State::RightSquareBracketS373 => "373:RightSquareBracket",
            State::RightSquareBracketS374 => "374:RightSquareBracket",
            State::StatementS375 => "375:Statement",
            State::RightParenS376 => "376:RightParen",
            State::StatementS377 => "377:Statement",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    Plus,
    Dash,
    Star,
    Slash,
    Percent,
    DoubleLeft,
    DoubleRight,
    Equal,
    DoubleEqual,
    ExclaimEqual,
    Ampersand,
    DoubleAmpersand,
    LeftBracket,
    RightBracket,
    VerticalBar,
    DoubleVerticalBar,
    Caret,
    LeftParen,
    RightParen,
    Question,
    Colon,
    Comma,
    LeftBracketEqual,
    RightBracketEqual,
    Exclaim,
    Tilde,
    Num(grammar_c_actions::Num),
    Identifier(grammar_c_actions::Identifier),
    Sizeof,
    LeftCurlyBracket,
    RightCurlyBracket,
    LeftSquareBracket,
    RightSquareBracket,
    DoublePlus,
    DoubleMinus,
    Ellipsis,
    Dot,
    DashRightBracket,
    Semicolon,
    Auto,
    Break,
    Case,
    Char,
    Const,
    Continue,
    Default,
    Do,
    Double,
    Else,
    Enum,
    Extern,
    Float,
    For,
    Goto,
    If,
    Inline,
    Int,
    Long,
    Register,
    Restrict,
    Return,
    Short,
    Signed,
    Static,
    Struct,
    Switch,
    Typedef,
    UnderscoreBool,
    UnderscoreComplex,
    Union,
    Unsigned,
    Void,
    Volatile,
    While,
}
#[derive(Debug)]
pub enum NonTerminal {
    TranslationUnit(grammar_c_actions::TranslationUnit),
    ExternalDeclaration(grammar_c_actions::ExternalDeclaration),
    FunctionDefinition(grammar_c_actions::FunctionDefinition),
    DeclarationListOpt(grammar_c_actions::DeclarationListOpt),
    DeclarationSpecifiers(grammar_c_actions::DeclarationSpecifiers),
    DeclarationSpecifiersOpt(grammar_c_actions::DeclarationSpecifiersOpt),
    StorageClassSpecifier(grammar_c_actions::StorageClassSpecifier),
    TypeSpecifier(grammar_c_actions::TypeSpecifier),
    StructOrUnionSpecifier(grammar_c_actions::StructOrUnionSpecifier),
    IdentifierOpt(grammar_c_actions::IdentifierOpt),
    StructOrUnion(grammar_c_actions::StructOrUnion),
    StructDeclarationList(grammar_c_actions::StructDeclarationList),
    StructDeclaration(grammar_c_actions::StructDeclaration),
    SpecifierQualifierList(grammar_c_actions::SpecifierQualifierList),
    SpecifierQualifierListOpt(grammar_c_actions::SpecifierQualifierListOpt),
    TypeQualifier(grammar_c_actions::TypeQualifier),
    StructDeclaratorList(grammar_c_actions::StructDeclaratorList),
    StructDeclarator(grammar_c_actions::StructDeclarator),
    DeclaratorOpt(grammar_c_actions::DeclaratorOpt),
    Declarator(grammar_c_actions::Declarator),
    PointerOpt(grammar_c_actions::PointerOpt),
    Pointer(grammar_c_actions::Pointer),
    TypeQualifierListOpt(grammar_c_actions::TypeQualifierListOpt),
    TypeQualifierList(grammar_c_actions::TypeQualifierList),
    DirectDeclarator(grammar_c_actions::DirectDeclarator),
    AssignmentExpressionOpt(grammar_c_actions::AssignmentExpressionOpt),
    IdentifierListOpt(grammar_c_actions::IdentifierListOpt),
    AssignmentExpression(grammar_c_actions::AssignmentExpression),
    ConditionalExpression(grammar_c_actions::ConditionalExpression),
    ArithmeticExpression(grammar_c_actions::ArithmeticExpression),
    CastExpression(grammar_c_actions::CastExpression),
    UnaryExpression(grammar_c_actions::UnaryExpression),
    PostfixExpression(grammar_c_actions::PostfixExpression),
    ArgumentExpressionListOpt(grammar_c_actions::ArgumentExpressionListOpt),
    PrimaryExpression(grammar_c_actions::PrimaryExpression),
    Expression(grammar_c_actions::Expression),
    ArgumentExpressionList(grammar_c_actions::ArgumentExpressionList),
    TypeName(grammar_c_actions::TypeName),
    AbstractDeclaratorOpt(grammar_c_actions::AbstractDeclaratorOpt),
    AbstractDeclarator(grammar_c_actions::AbstractDeclarator),
    DirectAbstractDeclarator(grammar_c_actions::DirectAbstractDeclarator),
    DirectAbstractDeclaratorOpt(grammar_c_actions::DirectAbstractDeclaratorOpt),
    ParameterTypeListOpt(grammar_c_actions::ParameterTypeListOpt),
    ParameterTypeList(grammar_c_actions::ParameterTypeList),
    ParameterList(grammar_c_actions::ParameterList),
    ParameterDeclaration(grammar_c_actions::ParameterDeclaration),
    InitializerList(grammar_c_actions::InitializerList),
    DesignationOpt(grammar_c_actions::DesignationOpt),
    Designation(grammar_c_actions::Designation),
    DesignatorList(grammar_c_actions::DesignatorList),
    Designator(grammar_c_actions::Designator),
    ConstantExpression(grammar_c_actions::ConstantExpression),
    Initializer(grammar_c_actions::Initializer),
    CommaOpt(grammar_c_actions::CommaOpt),
    IdentifierList(grammar_c_actions::IdentifierList),
    EnumSpecifier(grammar_c_actions::EnumSpecifier),
    EnumeratorList(grammar_c_actions::EnumeratorList),
    Enumerator(grammar_c_actions::Enumerator),
    EnumerationConstant(grammar_c_actions::EnumerationConstant),
    TypedefName(grammar_c_actions::TypedefName),
    FunctionSpecifier(grammar_c_actions::FunctionSpecifier),
    DeclarationList(grammar_c_actions::DeclarationList),
    Declaration(grammar_c_actions::Declaration),
    InitDeclaratorListOpt(grammar_c_actions::InitDeclaratorListOpt),
    InitDeclaratorList(grammar_c_actions::InitDeclaratorList),
    InitDeclarator(grammar_c_actions::InitDeclarator),
    CompoundStatement(grammar_c_actions::CompoundStatement),
    BlockItemListOpt(grammar_c_actions::BlockItemListOpt),
    BlockItemList(grammar_c_actions::BlockItemList),
    BlockItem(grammar_c_actions::BlockItem),
    Statement(grammar_c_actions::Statement),
    LabeledStatement(grammar_c_actions::LabeledStatement),
    ExpressionStatement(grammar_c_actions::ExpressionStatement),
    ExpressionOpt(grammar_c_actions::ExpressionOpt),
    SelectionStatement(grammar_c_actions::SelectionStatement),
    IterationStatement(grammar_c_actions::IterationStatement),
    JumpStatement(grammar_c_actions::JumpStatement),
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct GrammarCParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS1)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_identifier_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        _ => vec![],
    }
}
fn action_auto_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StorageClassSpecifierP4, 1usize)]),
        _ => vec![],
    }
}
fn action_char_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP2, 1usize)]),
        _ => vec![],
    }
}
fn action_const_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeQualifierP1, 1usize)]),
        _ => vec![],
    }
}
fn action_double_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP7, 1usize)]),
        _ => vec![],
    }
}
fn action_enum_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS38)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::IdentifierOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_extern_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StorageClassSpecifierP2, 1usize)]),
        _ => vec![],
    }
}
fn action_float_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP6, 1usize)]),
        _ => vec![],
    }
}
fn action_inline_s9(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::FunctionSpecifierP1, 1usize)]),
        _ => vec![],
    }
}
fn action_int_s10(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP4, 1usize)]),
        _ => vec![],
    }
}
fn action_long_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP5, 1usize)]),
        _ => vec![],
    }
}
fn action_register_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StorageClassSpecifierP5, 1usize)]),
        _ => vec![],
    }
}
fn action_restrict_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeQualifierP2, 1usize)]),
        _ => vec![],
    }
}
fn action_short_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP3, 1usize)]),
        _ => vec![],
    }
}
fn action_signed_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP8, 1usize)]),
        _ => vec![],
    }
}
fn action_static_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StorageClassSpecifierP3, 1usize)]),
        _ => vec![],
    }
}
fn action_struct_s17(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Reduce(PK::StructOrUnionP1, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StructOrUnionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_typedef_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StorageClassSpecifierP1, 1usize)]),
        _ => vec![],
    }
}
fn action_underscorebool_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP10, 1usize)]),
        _ => vec![],
    }
}
fn action_underscorecomplex_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP11, 1usize)]),
        _ => vec![],
    }
}
fn action_union_s21(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Reduce(PK::StructOrUnionP2, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StructOrUnionP2, 1usize)]),
        _ => vec![],
    }
}
fn action_unsigned_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP9, 1usize)]),
        _ => vec![],
    }
}
fn action_void_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP1, 1usize)]),
        _ => vec![],
    }
}
fn action_volatile_s24(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeQualifierP3, 1usize)]),
        _ => vec![],
    }
}
fn action_translationunit_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS1)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_externaldeclaration_s26(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TranslationUnitP1, 1usize)]),
        _ => vec![],
    }
}
fn action_functiondefinition_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::ExternalDeclarationP1, 1usize)]),
        _ => vec![],
    }
}
fn action_declarationspecifiers_s28(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Shift(State::StarS41)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorListOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_storageclassspecifier_s29(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP1, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::LeftParen => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP1, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP1, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Comma => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP1, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Identifier => {
            Vec::from(
                &[
                    Shift(State::IdentifierS1),
                    Reduce(PK::DeclarationSpecifiersP1, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP1, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP1, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_typespecifier_s30(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP2, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::LeftParen => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP2, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP2, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Comma => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP2, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Identifier => {
            Vec::from(
                &[
                    Shift(State::IdentifierS1),
                    Reduce(PK::DeclarationSpecifiersP2, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP2, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP2, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_structorunionspecifier_s31(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP12, 1usize)]),
        _ => vec![],
    }
}
fn action_structorunion_s32(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS51)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::IdentifierOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_typequalifier_s33(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP3, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::LeftParen => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP3, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP3, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Comma => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP3, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Identifier => {
            Vec::from(
                &[
                    Shift(State::IdentifierS1),
                    Reduce(PK::DeclarationSpecifiersP3, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP3, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP3, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_enumspecifier_s34(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP13, 1usize)]),
        _ => vec![],
    }
}
fn action_typedefname_s35(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeSpecifierP14, 1usize)]),
        _ => vec![],
    }
}
fn action_functionspecifier_s36(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP4, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::LeftParen => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP4, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP4, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Comma => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP4, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Identifier => {
            Vec::from(
                &[
                    Shift(State::IdentifierS1),
                    Reduce(PK::DeclarationSpecifiersP4, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP4, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[
                    Reduce(PK::DeclarationSpecifiersP4, 1usize),
                    Reduce(PK::DeclarationSpecifiersOptP2, 0usize),
                ],
            )
        }
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_declaration_s37(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::ExternalDeclarationP2, 1usize)]),
        _ => vec![],
    }
}
fn action_identifier_s38(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::IdentifierOptP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::EnumSpecifierP2, 2usize)]),
        _ => vec![],
    }
}
fn action_identifieropt_s39(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS55)]),
        _ => vec![],
    }
}
fn action_externaldeclaration_s40(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TranslationUnitP2, 2usize)]),
        _ => vec![],
    }
}
fn action_star_s41(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::LeftParen => {
            Vec::from(
                &[
                    Reduce(PK::PointerP1, 1usize),
                    Reduce(PK::TypeQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::PointerP1, 1usize),
                    Reduce(PK::TypeQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::Comma => {
            Vec::from(
                &[
                    Reduce(PK::PointerP1, 1usize),
                    Reduce(PK::TypeQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::Identifier => {
            Vec::from(
                &[
                    Reduce(PK::PointerP1, 1usize),
                    Reduce(PK::TypeQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[
                    Reduce(PK::PointerP1, 1usize),
                    Reduce(PK::TypeQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_declarator_s42(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Shift(State::EqualS59)]),
        TK::Comma => Vec::from(&[Reduce(PK::InitDeclaratorP1, 1usize)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS1)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DeclarationListOptP2, 0usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorP1, 1usize)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_pointeropt_s43(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS64)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS65)]),
        _ => vec![],
    }
}
fn action_pointer_s44(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_initdeclaratorlistopt_s45(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS67)]),
        _ => vec![],
    }
}
fn action_initdeclaratorlist_s46(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS68)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorListOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_initdeclarator_s47(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitDeclaratorListP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_declarationspecifiers_s48(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::DeclarationSpecifiersOptP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationSpecifiersOptP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DeclarationSpecifiersOptP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DeclarationSpecifiersOptP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationSpecifiersOptP1, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DeclarationSpecifiersOptP1, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationSpecifiersOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_declarationspecifiersopt_s49(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::DeclarationSpecifiersP1, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationSpecifiersP1, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DeclarationSpecifiersP1, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DeclarationSpecifiersP1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationSpecifiersP1, 2usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DeclarationSpecifiersP1, 2usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationSpecifiersP1, 2usize)]),
        _ => vec![],
    }
}
fn action_declarationspecifiersopt_s50(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::DeclarationSpecifiersP2, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationSpecifiersP2, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DeclarationSpecifiersP2, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DeclarationSpecifiersP2, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationSpecifiersP2, 2usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DeclarationSpecifiersP2, 2usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationSpecifiersP2, 2usize)]),
        _ => vec![],
    }
}
fn action_identifier_s51(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::IdentifierOptP1, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP2, 2usize)]),
        _ => vec![],
    }
}
fn action_identifieropt_s52(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS69)]),
        _ => vec![],
    }
}
fn action_declarationspecifiersopt_s53(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::DeclarationSpecifiersP3, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationSpecifiersP3, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DeclarationSpecifiersP3, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DeclarationSpecifiersP3, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationSpecifiersP3, 2usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DeclarationSpecifiersP3, 2usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationSpecifiersP3, 2usize)]),
        _ => vec![],
    }
}
fn action_declarationspecifiersopt_s54(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::DeclarationSpecifiersP4, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationSpecifiersP4, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DeclarationSpecifiersP4, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DeclarationSpecifiersP4, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationSpecifiersP4, 2usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DeclarationSpecifiersP4, 2usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationSpecifiersP4, 2usize)]),
        _ => vec![],
    }
}
fn action_leftcurlybracket_s55(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS70)]),
        _ => vec![],
    }
}
fn action_typequalifier_s56(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeQualifierListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_typequalifierlistopt_s57(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Shift(State::StarS41)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerP1, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PointerP1, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PointerP1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerP1, 2usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerP1, 2usize)]),
        _ => vec![],
    }
}
fn action_typequalifierlist_s58(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_equal_s59(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS86)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_declarationlistopt_s60(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        _ => vec![],
    }
}
fn action_declarationspecifiers_s61(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Shift(State::StarS41)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorListOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_declarationlist_s62(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS1)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DeclarationListOptP1, 1usize)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_declaration_s63(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DeclarationListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_leftparen_s64(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Shift(State::StarS41)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_identifier_s65(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP1, 1usize)]),
        _ => vec![],
    }
}
fn action_directdeclarator_s66(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS102)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS103)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DeclaratorP1, 2usize)]),
        _ => vec![],
    }
}
fn action_semicolon_s67(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Break => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Case => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Default => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Do => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::For => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::If => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Return => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        TK::While => Vec::from(&[Reduce(PK::DeclarationP1, 3usize)]),
        _ => vec![],
    }
}
fn action_comma_s68(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Shift(State::StarS41)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_leftcurlybracket_s69(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS1)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_identifier_s70(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::EnumerationConstantP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::EnumerationConstantP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::EnumerationConstantP1, 1usize)]),
        _ => vec![],
    }
}
fn action_enumeratorlist_s71(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS110)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CommaOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_enumerator_s72(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::EnumeratorListP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::EnumeratorListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_enumerationconstant_s73(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Shift(State::EqualS112)]),
        TK::Comma => Vec::from(&[Reduce(PK::EnumeratorP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::EnumeratorP1, 1usize)]),
        _ => vec![],
    }
}
fn action_pointer_s74(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerP2, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PointerP2, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PointerP2, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerP2, 3usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerP2, 3usize)]),
        _ => vec![],
    }
}
fn action_typequalifier_s75(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypeQualifierListP2, 2usize)]),
        _ => vec![],
    }
}
fn action_plus_s76(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS113)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_dash_s77(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS113)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_star_s78(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS113)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_ampersand_s79(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS113)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_leftparen_s80(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS119)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_exclaim_s81(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS113)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_tilde_s82(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS113)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_num_s83(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)])
        }
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::PrimaryExpressionNumber, 1usize)]),
        _ => vec![],
    }
}
fn action_identifier_s84(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        _ => vec![],
    }
}
fn action_sizeof_s85(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS126)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_leftcurlybracket_s86(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS128)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS129)]),
        _ => vec![],
    }
}
fn action_doubleplus_s87(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_doubleminus_s88(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s89(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::InitializerP1, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::InitializerP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitializerP1, 1usize)]),
        _ => vec![],
    }
}
fn action_conditionalexpression_s90(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        _ => vec![],
    }
}
fn action_arithmeticexpression_s91(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_unaryexpression_s92(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionP5, 1usize)]),
        _ => vec![],
    }
}
fn action_postfixexpression_s93(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS138)]),
        TK::RightParen => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS139)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS140)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS141)]),
        TK::Dot => Vec::from(&[Shift(State::DotS142)]),
        TK::DashRightBracket => Vec::from(&[Shift(State::DashRightBracketS143)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::UnaryExpressionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_primaryexpression_s94(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::PostfixExpressionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_expression_s95(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS155)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS159)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS161)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        _ => vec![],
    }
}
fn action_initializer_s96(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitDeclaratorP2, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorP2, 3usize)]),
        _ => vec![],
    }
}
fn action_leftcurlybracket_s97(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS164)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::BlockItemListOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Break => Vec::from(&[Shift(State::BreakS165)]),
        TK::Case => Vec::from(&[Shift(State::CaseS166)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS167)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS168)]),
        TK::Do => Vec::from(&[Shift(State::DoS169)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::For => Vec::from(&[Shift(State::ForS170)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS171)]),
        TK::If => Vec::from(&[Shift(State::IfS172)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS173)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS174)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        TK::While => Vec::from(&[Shift(State::WhileS175)]),
        _ => vec![],
    }
}
fn action_compoundstatement_s98(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Char => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Const => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Double => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Float => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Int => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Long => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Register => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Short => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Static => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Union => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Void => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::FunctionDefinitionP1, 4usize)]),
        _ => vec![],
    }
}
fn action_declarator_s99(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Shift(State::EqualS59)]),
        TK::Comma => Vec::from(&[Reduce(PK::InitDeclaratorP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorP1, 1usize)]),
        _ => vec![],
    }
}
fn action_declaration_s100(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DeclarationListP2, 2usize)]),
        _ => vec![],
    }
}
fn action_declarator_s101(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS189)]),
        _ => vec![],
    }
}
fn action_leftparen_s102(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::IdentifierListOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS190)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_leftsquarebracket_s103(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)])
        }
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Static => Vec::from(&[Shift(State::StaticS197)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_initdeclarator_s104(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitDeclaratorListP2, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitDeclaratorListP2, 3usize)]),
        _ => vec![],
    }
}
fn action_typespecifier_s105(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => {
            Vec::from(
                &[
                    Reduce(PK::SpecifierQualifierListP1, 1usize),
                    Reduce(PK::SpecifierQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::LeftParen => {
            Vec::from(
                &[
                    Reduce(PK::SpecifierQualifierListP1, 1usize),
                    Reduce(PK::SpecifierQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::SpecifierQualifierListP1, 1usize),
                    Reduce(PK::SpecifierQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::Colon => {
            Vec::from(
                &[
                    Reduce(PK::SpecifierQualifierListP1, 1usize),
                    Reduce(PK::SpecifierQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::Identifier => {
            Vec::from(
                &[
                    Shift(State::IdentifierS1),
                    Reduce(PK::SpecifierQualifierListP1, 1usize),
                    Reduce(PK::SpecifierQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[
                    Reduce(PK::SpecifierQualifierListP1, 1usize),
                    Reduce(PK::SpecifierQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_structdeclarationlist_s106(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS1)]),
        TK::RightCurlyBracket => Vec::from(&[Shift(State::RightCurlyBracketS202)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_structdeclaration_s107(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)])
        }
        TK::Char => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StructDeclarationListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_specifierqualifierlist_s108(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Shift(State::StarS41)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::DeclaratorOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_typequalifier_s109(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => {
            Vec::from(
                &[
                    Reduce(PK::SpecifierQualifierListP2, 1usize),
                    Reduce(PK::SpecifierQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::LeftParen => {
            Vec::from(
                &[
                    Reduce(PK::SpecifierQualifierListP2, 1usize),
                    Reduce(PK::SpecifierQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::SpecifierQualifierListP2, 1usize),
                    Reduce(PK::SpecifierQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::Colon => {
            Vec::from(
                &[
                    Reduce(PK::SpecifierQualifierListP2, 1usize),
                    Reduce(PK::SpecifierQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::Identifier => {
            Vec::from(
                &[
                    Shift(State::IdentifierS1),
                    Reduce(PK::SpecifierQualifierListP2, 1usize),
                    Reduce(PK::SpecifierQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(
                &[
                    Reduce(PK::SpecifierQualifierListP2, 1usize),
                    Reduce(PK::SpecifierQualifierListOptP2, 0usize),
                ],
            )
        }
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_comma_s110(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS70)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CommaOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_commaopt_s111(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightCurlyBracket => Vec::from(&[Shift(State::RightCurlyBracketS210)]),
        _ => vec![],
    }
}
fn action_equal_s112(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_leftparen_s113(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS119)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_castexpression_s114(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)])
        }
        TK::Equal => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)])
        }
        TK::Ampersand => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::Question => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::UnaryExpressionPlusExpression, 2usize)]),
        _ => vec![],
    }
}
fn action_unaryexpression_s115(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::CastExpressionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_castexpression_s116(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)]),
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::Equal => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::Ampersand => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)]),
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::Question => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::UnaryExpressionMinusExpression, 2usize)]),
        _ => vec![],
    }
}
fn action_castexpression_s117(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionDereferenceExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_castexpression_s118(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)]),
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::Equal => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)]),
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::Colon => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionReferenceExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_identifier_s119(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Star => {
            Vec::from(
                &[
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftParen => {
            Vec::from(
                &[
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Identifier => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(
                &[
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Char => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        _ => vec![],
    }
}
fn action_specifierqualifierlist_s120(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Shift(State::StarS41)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::TypeNameP1, 1usize),
                    Reduce(PK::AbstractDeclaratorOptP2, 0usize),
                ],
            )
        }
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s121(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Question => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        _ => vec![],
    }
}
fn action_expression_s122(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS155)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS159)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::RightParen => Vec::from(&[Shift(State::RightParenS220)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS161)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        _ => vec![],
    }
}
fn action_typename_s123(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS221)]),
        _ => vec![],
    }
}
fn action_castexpression_s124(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)]),
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionLogicalNotExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_castexpression_s125(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)]),
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionBitwiseNotExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_leftparen_s126(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS119)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_expression_s127(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfExpressionExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_leftsquarebracket_s128(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_dot_s129(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS224)]),
        _ => vec![],
    }
}
fn action_initializerlist_s130(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS225)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CommaOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_designationopt_s131(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS86)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_designation_s132(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::DesignationOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_designatorlist_s133(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Shift(State::EqualS228)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS128)]),
        TK::Dot => Vec::from(&[Shift(State::DotS129)]),
        _ => vec![],
    }
}
fn action_designator_s134(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DesignatorListP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DesignatorListP1, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::DesignatorListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_unaryexpression_s135(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreIncrementExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_unaryexpression_s136(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionPreDecrementExpression, 2usize)])
        }
        _ => vec![],
    }
}
fn action_question_s137(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_leftparen_s138(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ArgumentExpressionListOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_leftsquarebracket_s139(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_doubleplus_s140(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::PostfixExpressionP6, 2usize)]),
        _ => vec![],
    }
}
fn action_doubleminus_s141(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::PostfixExpressionP7, 2usize)]),
        _ => vec![],
    }
}
fn action_dot_s142(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS235)]),
        _ => vec![],
    }
}
fn action_dashrightbracket_s143(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS236)]),
        _ => vec![],
    }
}
fn action_plus_s144(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_dash_s145(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_star_s146(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_slash_s147(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_percent_s148(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_doubleleft_s149(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_doubleright_s150(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_equal_s151(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_doubleequal_s152(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_exclaimequal_s153(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_ampersand_s154(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_doubleampersand_s155(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_leftbracket_s156(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_rightbracket_s157(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_verticalbar_s158(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_doubleverticalbar_s159(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_caret_s160(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_comma_s161(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_leftbracketequal_s162(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_rightbracketequal_s163(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_identifier_s164(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Star => {
            Vec::from(
                &[
                    Reduce(PK::TypedefNameP1, 1usize),
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                ],
            )
        }
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftParen => {
            Vec::from(
                &[
                    Reduce(PK::TypedefNameP1, 1usize),
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                ],
            )
        }
        TK::Colon => Vec::from(&[Shift(State::ColonS257)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Identifier => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Semicolon => {
            Vec::from(
                &[
                    Reduce(PK::TypedefNameP1, 1usize),
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                ],
            )
        }
        TK::Auto => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        _ => vec![],
    }
}
fn action_break_s165(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS258)]),
        _ => vec![],
    }
}
fn action_case_s166(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_continue_s167(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS260)]),
        _ => vec![],
    }
}
fn action_default_s168(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Shift(State::ColonS261)]),
        _ => vec![],
    }
}
fn action_do_s169(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS262)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Break => Vec::from(&[Shift(State::BreakS165)]),
        TK::Case => Vec::from(&[Shift(State::CaseS166)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS167)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS168)]),
        TK::Do => Vec::from(&[Shift(State::DoS169)]),
        TK::For => Vec::from(&[Shift(State::ForS170)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS171)]),
        TK::If => Vec::from(&[Shift(State::IfS172)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS173)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS174)]),
        TK::While => Vec::from(&[Shift(State::WhileS175)]),
        _ => vec![],
    }
}
fn action_for_s170(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS264)]),
        _ => vec![],
    }
}
fn action_goto_s171(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS265)]),
        _ => vec![],
    }
}
fn action_if_s172(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS266)]),
        _ => vec![],
    }
}
fn action_return_s173(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_switch_s174(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS268)]),
        _ => vec![],
    }
}
fn action_while_s175(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS269)]),
        _ => vec![],
    }
}
fn action_expression_s176(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS155)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS159)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ExpressionOptP1, 1usize)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS161)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_declaration_s177(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::BlockItemP1, 1usize)]),
        _ => vec![],
    }
}
fn action_compoundstatement_s178(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementP2, 1usize)]),
        _ => vec![],
    }
}
fn action_blockitemlistopt_s179(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightCurlyBracket => Vec::from(&[Shift(State::RightCurlyBracketS270)]),
        _ => vec![],
    }
}
fn action_blockitemlist_s180(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS164)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::BlockItemListOptP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Break => Vec::from(&[Shift(State::BreakS165)]),
        TK::Case => Vec::from(&[Shift(State::CaseS166)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS167)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS168)]),
        TK::Do => Vec::from(&[Shift(State::DoS169)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::For => Vec::from(&[Shift(State::ForS170)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS171)]),
        TK::If => Vec::from(&[Shift(State::IfS172)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS173)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS174)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        TK::While => Vec::from(&[Shift(State::WhileS175)]),
        _ => vec![],
    }
}
fn action_blockitem_s181(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::BlockItemListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_statement_s182(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::BlockItemP2, 1usize)]),
        _ => vec![],
    }
}
fn action_labeledstatement_s183(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementP1, 1usize)]),
        _ => vec![],
    }
}
fn action_expressionstatement_s184(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementP3, 1usize)]),
        _ => vec![],
    }
}
fn action_expressionopt_s185(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS272)]),
        _ => vec![],
    }
}
fn action_selectionstatement_s186(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementP4, 1usize)]),
        _ => vec![],
    }
}
fn action_iterationstatement_s187(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementP5, 1usize)]),
        _ => vec![],
    }
}
fn action_jumpstatement_s188(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Break => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Case => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Default => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Do => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Else => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::For => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::If => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Return => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        TK::While => Vec::from(&[Reduce(PK::StatementP6, 1usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s189(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP2, 3usize)]),
        _ => vec![],
    }
}
fn action_identifier_s190(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::IdentifierListP1, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::Comma => {
            Vec::from(
                &[
                    Reduce(PK::IdentifierListP1, 1usize),
                    Reduce(PK::TypedefNameP1, 1usize),
                ],
            )
        }
        TK::Identifier => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        _ => vec![],
    }
}
fn action_declarationspecifiers_s191(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Shift(State::StarS41)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::RightParen => {
            Vec::from(
                &[
                    Reduce(PK::ParameterDeclarationP2, 1usize),
                    Reduce(PK::AbstractDeclaratorOptP2, 0usize),
                ],
            )
        }
        TK::Comma => {
            Vec::from(
                &[
                    Reduce(PK::ParameterDeclarationP2, 1usize),
                    Reduce(PK::AbstractDeclaratorOptP2, 0usize),
                ],
            )
        }
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_identifierlistopt_s192(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS277)]),
        _ => vec![],
    }
}
fn action_parametertypelist_s193(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS278)]),
        _ => vec![],
    }
}
fn action_parameterlist_s194(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterTypeListP1, 1usize)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS279)]),
        _ => vec![],
    }
}
fn action_parameterdeclaration_s195(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterListP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ParameterListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_identifierlist_s196(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::IdentifierListOptP1, 1usize)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS280)]),
        _ => vec![],
    }
}
fn action_static_s197(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_typequalifierlistopt_s198(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS282)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::AssignmentExpressionOptP2, 0usize)])
        }
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_typequalifierlist_s199(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)])
        }
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Static => Vec::from(&[Shift(State::StaticS285)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_specifierqualifierlist_s200(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::SpecifierQualifierListOptP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::SpecifierQualifierListOptP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::SpecifierQualifierListOptP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::SpecifierQualifierListOptP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::SpecifierQualifierListOptP1, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::SpecifierQualifierListOptP1, 1usize)])
        }
        _ => vec![],
    }
}
fn action_specifierqualifierlistopt_s201(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::SpecifierQualifierListP1, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::SpecifierQualifierListP1, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::SpecifierQualifierListP1, 2usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::SpecifierQualifierListP1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::SpecifierQualifierListP1, 2usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::SpecifierQualifierListP1, 2usize)])
        }
        _ => vec![],
    }
}
fn action_rightcurlybracket_s202(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Register => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Static => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StructOrUnionSpecifierP1, 5usize)]),
        _ => vec![],
    }
}
fn action_structdeclaration_s203(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)])
        }
        TK::Char => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::UnderscoreComplex => {
            Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)])
        }
        TK::Union => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StructDeclarationListP2, 2usize)]),
        _ => vec![],
    }
}
fn action_structdeclaratorlist_s204(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS286)]),
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS287)]),
        _ => vec![],
    }
}
fn action_structdeclarator_s205(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::StructDeclaratorListP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StructDeclaratorListP1, 1usize)]),
        _ => vec![],
    }
}
fn action_declaratoropt_s206(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Shift(State::ColonS288)]),
        _ => vec![],
    }
}
fn action_declarator_s207(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Reduce(PK::DeclaratorOptP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::StructDeclaratorP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StructDeclaratorP1, 1usize)]),
        _ => vec![],
    }
}
fn action_specifierqualifierlistopt_s208(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::SpecifierQualifierListP2, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::SpecifierQualifierListP2, 2usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::SpecifierQualifierListP2, 2usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::SpecifierQualifierListP2, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::SpecifierQualifierListP2, 2usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::SpecifierQualifierListP2, 2usize)])
        }
        _ => vec![],
    }
}
fn action_enumerator_s209(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::EnumeratorListP2, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::EnumeratorListP2, 3usize)]),
        _ => vec![],
    }
}
fn action_rightcurlybracket_s210(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Char => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Const => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Double => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Float => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Int => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Long => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Register => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Short => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Static => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Union => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Void => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::EnumSpecifierP1, 6usize)]),
        _ => vec![],
    }
}
fn action_conditionalexpression_s211(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ConstantExpressionP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ConstantExpressionP1, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::ExpressionP3, 1usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::ConstantExpressionP1, 1usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::ConstantExpressionP1, 1usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ConstantExpressionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_arithmeticexpression_s212(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::ConditionalExpressionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_expression_s213(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS155)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS159)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS161)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        _ => vec![],
    }
}
fn action_constantexpression_s214(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::EnumeratorP2, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::EnumeratorP2, 3usize)]),
        _ => vec![],
    }
}
fn action_typename_s215(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS289)]),
        _ => vec![],
    }
}
fn action_pointeropt_s216(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => {
            Vec::from(
                &[
                    Shift(State::LeftParenS290),
                    Reduce(PK::DirectAbstractDeclaratorOptP2, 0usize),
                ],
            )
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorOptP2, 0usize)])
        }
        _ => vec![],
    }
}
fn action_pointer_s217(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::AbstractDeclaratorP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_abstractdeclaratoropt_s218(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::TypeNameP1, 2usize)]),
        _ => vec![],
    }
}
fn action_abstractdeclarator_s219(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::AbstractDeclaratorOptP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::AbstractDeclaratorOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s220(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)])
        }
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::PrimaryExpressionParen, 3usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s221(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS293)]),
        _ => vec![],
    }
}
fn action_typename_s222(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS294)]),
        _ => vec![],
    }
}
fn action_constantexpression_s223(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS295)]),
        _ => vec![],
    }
}
fn action_identifier_s224(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DesignatorP2, 2usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DesignatorP2, 2usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::DesignatorP2, 2usize)]),
        _ => vec![],
    }
}
fn action_comma_s225(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CommaOptP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS128)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS129)]),
        _ => vec![],
    }
}
fn action_commaopt_s226(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightCurlyBracket => Vec::from(&[Shift(State::RightCurlyBracketS297)]),
        _ => vec![],
    }
}
fn action_initializer_s227(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitializerListP1, 2usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::InitializerListP1, 2usize)]),
        _ => vec![],
    }
}
fn action_equal_s228(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::DesignationP1, 2usize)]),
        _ => vec![],
    }
}
fn action_designator_s229(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DesignatorListP2, 2usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DesignatorListP2, 2usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::DesignatorListP2, 2usize)]),
        _ => vec![],
    }
}
fn action_expression_s230(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS155)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS159)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::Colon => Vec::from(&[Shift(State::ColonS298)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS161)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s231(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ArgumentExpressionListP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ArgumentExpressionListP1, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        _ => vec![],
    }
}
fn action_argumentexpressionlistopt_s232(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS299)]),
        _ => vec![],
    }
}
fn action_argumentexpressionlist_s233(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::ArgumentExpressionListOptP1, 1usize)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS300)]),
        _ => vec![],
    }
}
fn action_expression_s234(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS155)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS159)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS161)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS301)]),
        _ => vec![],
    }
}
fn action_identifier_s235(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::PostfixExpressionP4, 3usize)]),
        _ => vec![],
    }
}
fn action_identifier_s236(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::PostfixExpressionP5, 3usize)]),
        _ => vec![],
    }
}
fn action_expression_s237(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionAdditionExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s238(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionSubtractionExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s239(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionMultiplyExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s240(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionDivisionExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s241(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionModuloExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s242(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DoubleRight => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Equal => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DoubleEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::ExclaimEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Ampersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::LeftBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::RightBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::VerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::DoubleVerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Caret => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Question => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Colon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::LeftBracketEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::RightBracketEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::RightCurlyBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::RightSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseLeftShiftExpression, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_expression_s243(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DoubleRight => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Equal => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DoubleEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::ExclaimEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Ampersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::LeftBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::RightBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::VerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::DoubleVerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Caret => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Question => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Colon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::LeftBracketEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::RightBracketEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::RightCurlyBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::RightSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseRightShiftExpression, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_expression_s244(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::Question => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::AssignmentExpressionP1, 3usize)]),
        _ => vec![],
    }
}
fn action_expression_s245(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalEqualExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s246(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::ExclaimEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Ampersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::DoubleVerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Caret => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Question => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Colon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        TK::RightCurlyBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::RightSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLogicalNotEqualExpression, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_expression_s247(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseAndExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s248(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalAndExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s249(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLessThanExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s250(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionGreaterThanExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s251(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionBitwiseOrExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s252(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS155)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::RightParen => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionLogicalOrExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_expression_s253(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::DoubleVerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::Caret => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::Question => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::Colon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        TK::RightCurlyBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::RightSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionBitwiseExclusiveOrExpression, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_expression_s254(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS155)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS159)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionCommaExpression, 3usize)]),
        _ => vec![],
    }
}
fn action_expression_s255(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::ExclaimEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Ampersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::LeftBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::VerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleVerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Caret => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Question => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Colon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::LeftBracketEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightBracketEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightCurlyBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionLessThanOrEqualExpression, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_expression_s256(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::ExclaimEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Ampersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::LeftBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::VerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::DoubleVerticalBar => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Caret => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightParen => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Question => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Colon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Comma => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::LeftBracketEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightBracketEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightCurlyBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::RightSquareBracket => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        TK::Semicolon => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionGreaterThanOrEqualExpression, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_colon_s257(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS262)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Break => Vec::from(&[Shift(State::BreakS165)]),
        TK::Case => Vec::from(&[Shift(State::CaseS166)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS167)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS168)]),
        TK::Do => Vec::from(&[Shift(State::DoS169)]),
        TK::For => Vec::from(&[Shift(State::ForS170)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS171)]),
        TK::If => Vec::from(&[Shift(State::IfS172)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS173)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS174)]),
        TK::While => Vec::from(&[Shift(State::WhileS175)]),
        _ => vec![],
    }
}
fn action_semicolon_s258(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Num => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Break => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Case => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Default => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Do => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Else => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::For => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::If => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Return => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        TK::While => Vec::from(&[Reduce(PK::JumpStatementP3, 2usize)]),
        _ => vec![],
    }
}
fn action_constantexpression_s259(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Colon => Vec::from(&[Shift(State::ColonS303)]),
        _ => vec![],
    }
}
fn action_semicolon_s260(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Num => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Break => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Case => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Default => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Do => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Else => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::For => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::If => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Return => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        TK::While => Vec::from(&[Reduce(PK::JumpStatementP2, 2usize)]),
        _ => vec![],
    }
}
fn action_colon_s261(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS262)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Break => Vec::from(&[Shift(State::BreakS165)]),
        TK::Case => Vec::from(&[Shift(State::CaseS166)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS167)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS168)]),
        TK::Do => Vec::from(&[Shift(State::DoS169)]),
        TK::For => Vec::from(&[Shift(State::ForS170)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS171)]),
        TK::If => Vec::from(&[Shift(State::IfS172)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS173)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS174)]),
        TK::While => Vec::from(&[Shift(State::WhileS175)]),
        _ => vec![],
    }
}
fn action_identifier_s262(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Colon => Vec::from(&[Shift(State::ColonS257)]),
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        _ => vec![],
    }
}
fn action_statement_s263(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::While => Vec::from(&[Shift(State::WhileS305)]),
        _ => vec![],
    }
}
fn action_leftparen_s264(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS306)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_identifier_s265(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS309)]),
        _ => vec![],
    }
}
fn action_leftparen_s266(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_expressionopt_s267(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS311)]),
        _ => vec![],
    }
}
fn action_leftparen_s268(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_leftparen_s269(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_rightcurlybracket_s270(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Break => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Case => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Default => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Do => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::For => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::If => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Return => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        TK::While => Vec::from(&[Reduce(PK::CompoundStatementP1, 3usize)]),
        _ => vec![],
    }
}
fn action_blockitem_s271(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Num => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Break => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Case => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Default => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Do => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::For => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::If => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Return => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        TK::While => Vec::from(&[Reduce(PK::BlockItemListP2, 2usize)]),
        _ => vec![],
    }
}
fn action_semicolon_s272(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Num => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Break => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Case => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Char => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Const => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Default => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Do => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Double => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Else => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Float => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::For => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::If => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Int => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Long => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Register => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Return => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Short => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Static => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Union => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Void => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        TK::While => Vec::from(&[Reduce(PK::ExpressionStatementP1, 2usize)]),
        _ => vec![],
    }
}
fn action_declarator_s273(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterDeclarationP1, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ParameterDeclarationP1, 2usize)]),
        _ => vec![],
    }
}
fn action_pointeropt_s274(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => {
            Vec::from(
                &[
                    Shift(State::LeftParenS314),
                    Reduce(PK::DirectAbstractDeclaratorOptP2, 0usize),
                ],
            )
        }
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS65)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorOptP2, 0usize)])
        }
        _ => vec![],
    }
}
fn action_pointer_s275(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::AbstractDeclaratorP1, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::AbstractDeclaratorP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_abstractdeclaratoropt_s276(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterDeclarationP2, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ParameterDeclarationP2, 2usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s277(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP8, 4usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s278(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP7, 4usize)]),
        _ => vec![],
    }
}
fn action_comma_s279(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS1)]),
        TK::Ellipsis => Vec::from(&[Shift(State::EllipsisS315)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_comma_s280(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS317)]),
        _ => vec![],
    }
}
fn action_typequalifierlistopt_s281(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_star_s282(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS113)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS319)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_assignmentexpressionopt_s283(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS320)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s284(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::AssignmentExpressionOptP1, 1usize)])
        }
        _ => vec![],
    }
}
fn action_static_s285(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_comma_s286(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Shift(State::StarS41)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::DeclaratorOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_semicolon_s287(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Identifier => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::StructDeclarationP1, 3usize)]),
        _ => vec![],
    }
}
fn action_colon_s288(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_rightparen_s289(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS113)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS293)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_leftparen_s290(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Shift(State::StarS41)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_directabstractdeclarator_s291(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorOptP1, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::AbstractDeclaratorP2, 2usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::AbstractDeclaratorP2, 2usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorOptP1, 1usize)])
        }
        _ => vec![],
    }
}
fn action_directabstractdeclaratoropt_s292(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS326)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS327)]),
        _ => vec![],
    }
}
fn action_leftcurlybracket_s293(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS128)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS129)]),
        _ => vec![],
    }
}
fn action_rightparen_s294(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Dash => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Star => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Slash => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Percent => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Equal => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Ampersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Caret => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::RightParen => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Question => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Colon => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Comma => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS293)]),
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        TK::Semicolon => {
            Vec::from(&[Reduce(PK::UnaryExpressionSizeOfTypenameExpression, 4usize)])
        }
        _ => vec![],
    }
}
fn action_rightsquarebracket_s295(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DesignatorP1, 3usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DesignatorP1, 3usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::DesignatorP1, 3usize)]),
        _ => vec![],
    }
}
fn action_designationopt_s296(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS86)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_rightcurlybracket_s297(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitializerP2, 4usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::InitializerP2, 4usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::InitializerP2, 4usize)]),
        _ => vec![],
    }
}
fn action_colon_s298(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_rightparen_s299(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::PostfixExpressionP3, 4usize)]),
        _ => vec![],
    }
}
fn action_comma_s300(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s301(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::PostfixExpressionP2, 4usize)]),
        _ => vec![],
    }
}
fn action_statement_s302(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Break => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Case => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Default => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Do => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::For => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::If => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Return => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        TK::While => Vec::from(&[Reduce(PK::LabeledStatementP1, 3usize)]),
        _ => vec![],
    }
}
fn action_colon_s303(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS262)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Break => Vec::from(&[Shift(State::BreakS165)]),
        TK::Case => Vec::from(&[Shift(State::CaseS166)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS167)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS168)]),
        TK::Do => Vec::from(&[Shift(State::DoS169)]),
        TK::For => Vec::from(&[Shift(State::ForS170)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS171)]),
        TK::If => Vec::from(&[Shift(State::IfS172)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS173)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS174)]),
        TK::While => Vec::from(&[Shift(State::WhileS175)]),
        _ => vec![],
    }
}
fn action_statement_s304(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Break => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Case => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Default => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Do => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::For => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::If => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Return => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        TK::While => Vec::from(&[Reduce(PK::LabeledStatementP3, 3usize)]),
        _ => vec![],
    }
}
fn action_while_s305(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS333)]),
        _ => vec![],
    }
}
fn action_identifier_s306(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Star => {
            Vec::from(
                &[
                    Reduce(PK::TypedefNameP1, 1usize),
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                ],
            )
        }
        TK::Slash => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::LeftBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftParen => {
            Vec::from(
                &[
                    Reduce(PK::TypedefNameP1, 1usize),
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                ],
            )
        }
        TK::Comma => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Identifier => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::DoublePlus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)]),
        TK::DashRightBracket => {
            Vec::from(&[Reduce(PK::PrimaryExpressionIdentifier, 1usize)])
        }
        TK::Semicolon => {
            Vec::from(
                &[
                    Reduce(PK::TypedefNameP1, 1usize),
                    Reduce(PK::PrimaryExpressionIdentifier, 1usize),
                ],
            )
        }
        TK::Auto => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Char => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Const => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Double => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Float => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Int => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Long => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Register => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Short => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Static => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Union => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Void => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::TypedefNameP1, 1usize)]),
        _ => vec![],
    }
}
fn action_declaration_s307(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_expressionopt_s308(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS335)]),
        _ => vec![],
    }
}
fn action_semicolon_s309(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Break => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Case => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Default => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Do => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::For => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::If => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Return => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        TK::While => Vec::from(&[Reduce(PK::JumpStatementP1, 3usize)]),
        _ => vec![],
    }
}
fn action_expression_s310(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS155)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS159)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::RightParen => Vec::from(&[Shift(State::RightParenS336)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS161)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        _ => vec![],
    }
}
fn action_semicolon_s311(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Star => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Num => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Break => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Case => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Char => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Const => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Default => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Do => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Double => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Else => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Float => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::For => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::If => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Int => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Long => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Register => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Return => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Short => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Static => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Union => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Void => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        TK::While => Vec::from(&[Reduce(PK::JumpStatementP4, 3usize)]),
        _ => vec![],
    }
}
fn action_expression_s312(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS155)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS159)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::RightParen => Vec::from(&[Shift(State::RightParenS337)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS161)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        _ => vec![],
    }
}
fn action_expression_s313(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS155)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS159)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::RightParen => Vec::from(&[Shift(State::RightParenS338)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS161)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        _ => vec![],
    }
}
fn action_leftparen_s314(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Star => Vec::from(&[Shift(State::StarS41)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PointerOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_ellipsis_s315(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterTypeListP2, 3usize)]),
        _ => vec![],
    }
}
fn action_parameterdeclaration_s316(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterListP2, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ParameterListP2, 3usize)]),
        _ => vec![],
    }
}
fn action_identifier_s317(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::IdentifierListP2, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::IdentifierListP2, 3usize)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s318(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS339)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s319(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP6, 5usize)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s320(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP3, 5usize)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s321(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS340)]),
        _ => vec![],
    }
}
fn action_structdeclarator_s322(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::StructDeclaratorListP2, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StructDeclaratorListP2, 3usize)]),
        _ => vec![],
    }
}
fn action_constantexpression_s323(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::StructDeclaratorP2, 3usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::StructDeclaratorP2, 3usize)]),
        _ => vec![],
    }
}
fn action_castexpression_s324(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::Star => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::Question => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::CastExpressionP2, 4usize)]),
        _ => vec![],
    }
}
fn action_abstractdeclarator_s325(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS341)]),
        _ => vec![],
    }
}
fn action_leftparen_s326(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterTypeListOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS1)]),
        TK::Auto => Vec::from(&[Shift(State::AutoS2)]),
        TK::Char => Vec::from(&[Shift(State::CharS3)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Double => Vec::from(&[Shift(State::DoubleS5)]),
        TK::Enum => Vec::from(&[Shift(State::EnumS6)]),
        TK::Extern => Vec::from(&[Shift(State::ExternS7)]),
        TK::Float => Vec::from(&[Shift(State::FloatS8)]),
        TK::Inline => Vec::from(&[Shift(State::InlineS9)]),
        TK::Int => Vec::from(&[Shift(State::IntS10)]),
        TK::Long => Vec::from(&[Shift(State::LongS11)]),
        TK::Register => Vec::from(&[Shift(State::RegisterS12)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Short => Vec::from(&[Shift(State::ShortS14)]),
        TK::Signed => Vec::from(&[Shift(State::SignedS15)]),
        TK::Static => Vec::from(&[Shift(State::StaticS16)]),
        TK::Struct => Vec::from(&[Shift(State::StructS17)]),
        TK::Typedef => Vec::from(&[Shift(State::TypedefS18)]),
        TK::UnderscoreBool => Vec::from(&[Shift(State::UnderscoreBoolS19)]),
        TK::UnderscoreComplex => Vec::from(&[Shift(State::UnderscoreComplexS20)]),
        TK::Union => Vec::from(&[Shift(State::UnionS21)]),
        TK::Unsigned => Vec::from(&[Shift(State::UnsignedS22)]),
        TK::Void => Vec::from(&[Shift(State::VoidS23)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_leftsquarebracket_s327(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Star => {
            Vec::from(
                &[Shift(State::StarS344), Reduce(PK::TypeQualifierListOptP2, 0usize)],
            )
        }
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)])
        }
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Static => Vec::from(&[Shift(State::StaticS345)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_initializerlist_s328(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Shift(State::CommaS348)]),
        TK::RightCurlyBracket => Vec::from(&[Shift(State::RightCurlyBracketS349)]),
        _ => vec![],
    }
}
fn action_initializer_s329(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Comma => Vec::from(&[Reduce(PK::InitializerListP2, 4usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::InitializerListP2, 4usize)]),
        _ => vec![],
    }
}
fn action_conditionalexpression_s330(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::Dash => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::Star => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::Slash => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::Percent => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::DoubleLeft => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::DoubleRight => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::Equal => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::DoubleEqual => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::ExclaimEqual => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::Ampersand => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::DoubleAmpersand => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::LeftBracket => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::RightBracket => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::VerticalBar => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::DoubleVerticalBar => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::Caret => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::RightParen => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::Question => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        TK::Comma => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::LeftBracketEqual => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::RightBracketEqual => {
            Vec::from(
                &[
                    Reduce(PK::ConditionalExpressionP2, 5usize),
                    Reduce(PK::ExpressionP3, 1usize),
                ],
            )
        }
        TK::RightCurlyBracket => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)])
        }
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)])
        }
        TK::Semicolon => Vec::from(&[Reduce(PK::ConditionalExpressionP2, 5usize)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s331(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ArgumentExpressionListP2, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ArgumentExpressionListP2, 3usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        _ => vec![],
    }
}
fn action_statement_s332(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Star => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Num => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Break => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Case => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Char => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Const => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Default => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Do => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Double => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Else => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Float => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::For => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::If => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Int => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Long => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Register => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Return => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Short => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Static => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Union => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Void => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        TK::While => Vec::from(&[Reduce(PK::LabeledStatementP2, 4usize)]),
        _ => vec![],
    }
}
fn action_leftparen_s333(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_expressionopt_s334(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS351)]),
        _ => vec![],
    }
}
fn action_semicolon_s335(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s336(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS262)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Break => Vec::from(&[Shift(State::BreakS165)]),
        TK::Case => Vec::from(&[Shift(State::CaseS166)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS167)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS168)]),
        TK::Do => Vec::from(&[Shift(State::DoS169)]),
        TK::For => Vec::from(&[Shift(State::ForS170)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS171)]),
        TK::If => Vec::from(&[Shift(State::IfS172)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS173)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS174)]),
        TK::While => Vec::from(&[Shift(State::WhileS175)]),
        _ => vec![],
    }
}
fn action_rightparen_s337(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS262)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Break => Vec::from(&[Shift(State::BreakS165)]),
        TK::Case => Vec::from(&[Shift(State::CaseS166)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS167)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS168)]),
        TK::Do => Vec::from(&[Shift(State::DoS169)]),
        TK::For => Vec::from(&[Shift(State::ForS170)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS171)]),
        TK::If => Vec::from(&[Shift(State::IfS172)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS173)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS174)]),
        TK::While => Vec::from(&[Shift(State::WhileS175)]),
        _ => vec![],
    }
}
fn action_rightparen_s338(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS262)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Break => Vec::from(&[Shift(State::BreakS165)]),
        TK::Case => Vec::from(&[Shift(State::CaseS166)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS167)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS168)]),
        TK::Do => Vec::from(&[Shift(State::DoS169)]),
        TK::For => Vec::from(&[Shift(State::ForS170)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS171)]),
        TK::If => Vec::from(&[Shift(State::IfS172)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS173)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS174)]),
        TK::While => Vec::from(&[Shift(State::WhileS175)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s339(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP4, 6usize)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s340(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Equal => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Char => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Const => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Double => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Float => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Int => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Long => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Register => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Short => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Static => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Union => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Void => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::DirectDeclaratorP5, 6usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s341(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP1, 3usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP1, 3usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP1, 3usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP1, 3usize)])
        }
        _ => vec![],
    }
}
fn action_parametertypelistopt_s342(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS356)]),
        _ => vec![],
    }
}
fn action_parametertypelist_s343(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Reduce(PK::ParameterTypeListOptP1, 1usize)]),
        _ => vec![],
    }
}
fn action_star_s344(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS357)]),
        _ => vec![],
    }
}
fn action_static_s345(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::TypeQualifierListOptP2, 0usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_typequalifierlistopt_s346(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::AssignmentExpressionOptP2, 0usize)])
        }
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_typequalifierlist_s347(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Num => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::RightSquareBracket => {
            Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)])
        }
        TK::DoublePlus => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::TypeQualifierListOptP1, 1usize)]),
        TK::Const => Vec::from(&[Shift(State::ConstS4)]),
        TK::Restrict => Vec::from(&[Shift(State::RestrictS13)]),
        TK::Static => Vec::from(&[Shift(State::StaticS360)]),
        TK::Volatile => Vec::from(&[Shift(State::VolatileS24)]),
        _ => vec![],
    }
}
fn action_comma_s348(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Star => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Num => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::RightCurlyBracket => Vec::from(&[Shift(State::RightCurlyBracketS361)]),
        TK::LeftSquareBracket => Vec::from(&[Shift(State::LeftSquareBracketS128)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::DesignationOptP2, 0usize)]),
        TK::Dot => Vec::from(&[Shift(State::DotS129)]),
        _ => vec![],
    }
}
fn action_rightcurlybracket_s349(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::PostfixExpressionP8, 6usize)]),
        _ => vec![],
    }
}
fn action_expression_s350(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS144)]),
        TK::Dash => Vec::from(&[Shift(State::DashS145)]),
        TK::Star => Vec::from(&[Shift(State::StarS146)]),
        TK::Slash => Vec::from(&[Shift(State::SlashS147)]),
        TK::Percent => Vec::from(&[Shift(State::PercentS148)]),
        TK::DoubleLeft => Vec::from(&[Shift(State::DoubleLeftS149)]),
        TK::DoubleRight => Vec::from(&[Shift(State::DoubleRightS150)]),
        TK::Equal => Vec::from(&[Shift(State::EqualS151)]),
        TK::DoubleEqual => Vec::from(&[Shift(State::DoubleEqualS152)]),
        TK::ExclaimEqual => Vec::from(&[Shift(State::ExclaimEqualS153)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS154)]),
        TK::DoubleAmpersand => Vec::from(&[Shift(State::DoubleAmpersandS155)]),
        TK::LeftBracket => Vec::from(&[Shift(State::LeftBracketS156)]),
        TK::RightBracket => Vec::from(&[Shift(State::RightBracketS157)]),
        TK::VerticalBar => Vec::from(&[Shift(State::VerticalBarS158)]),
        TK::DoubleVerticalBar => Vec::from(&[Shift(State::DoubleVerticalBarS159)]),
        TK::Caret => Vec::from(&[Shift(State::CaretS160)]),
        TK::RightParen => Vec::from(&[Shift(State::RightParenS362)]),
        TK::Comma => Vec::from(&[Shift(State::CommaS161)]),
        TK::LeftBracketEqual => Vec::from(&[Shift(State::LeftBracketEqualS162)]),
        TK::RightBracketEqual => Vec::from(&[Shift(State::RightBracketEqualS163)]),
        _ => vec![],
    }
}
fn action_semicolon_s351(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_expressionopt_s352(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS364)]),
        _ => vec![],
    }
}
fn action_statement_s353(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Star => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Num => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Break => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Case => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Char => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Const => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Default => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Do => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Double => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Else => {
            Vec::from(
                &[Shift(State::ElseS365), Reduce(PK::SelectionStatementP1, 5usize)],
            )
        }
        TK::Enum => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Float => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::For => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::If => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Int => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Long => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Register => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Return => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Short => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Static => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Union => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Void => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        TK::While => Vec::from(&[Reduce(PK::SelectionStatementP1, 5usize)]),
        _ => vec![],
    }
}
fn action_statement_s354(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Star => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Num => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Break => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Case => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Char => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Const => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Default => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Do => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Double => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Else => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Float => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::For => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::If => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Int => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Long => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Register => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Return => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Short => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Static => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Union => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Void => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        TK::While => Vec::from(&[Reduce(PK::SelectionStatementP3, 5usize)]),
        _ => vec![],
    }
}
fn action_statement_s355(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Star => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Num => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Break => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Case => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Char => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Const => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Default => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Do => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Double => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Else => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Float => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::For => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::If => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Int => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Long => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Register => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Return => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Short => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Static => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Union => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Void => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        TK::While => Vec::from(&[Reduce(PK::IterationStatementP1, 5usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s356(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP6, 4usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP6, 4usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP6, 4usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP6, 4usize)])
        }
        _ => vec![],
    }
}
fn action_rightsquarebracket_s357(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP5, 4usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP5, 4usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP5, 4usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP5, 4usize)])
        }
        _ => vec![],
    }
}
fn action_typequalifierlistopt_s358(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_assignmentexpressionopt_s359(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS367)]),
        _ => vec![],
    }
}
fn action_static_s360(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_rightcurlybracket_s361(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::Star => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::DoubleLeft => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::DoubleRight => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::Equal => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::DoubleEqual => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::ExclaimEqual => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::DoubleAmpersand => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::LeftBracket => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::RightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::VerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::DoubleVerticalBar => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::Caret => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::Question => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::Colon => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::LeftBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::RightBracketEqual => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::LeftSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::RightSquareBracket => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::Dot => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::DashRightBracket => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::PostfixExpressionP9, 7usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s362(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Semicolon => Vec::from(&[Shift(State::SemicolonS369)]),
        _ => vec![],
    }
}
fn action_expressionopt_s363(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS370)]),
        _ => vec![],
    }
}
fn action_semicolon_s364(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::RightParen => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS84)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        _ => vec![],
    }
}
fn action_else_s365(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS262)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Break => Vec::from(&[Shift(State::BreakS165)]),
        TK::Case => Vec::from(&[Shift(State::CaseS166)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS167)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS168)]),
        TK::Do => Vec::from(&[Shift(State::DoS169)]),
        TK::For => Vec::from(&[Shift(State::ForS170)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS171)]),
        TK::If => Vec::from(&[Shift(State::IfS172)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS173)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS174)]),
        TK::While => Vec::from(&[Shift(State::WhileS175)]),
        _ => vec![],
    }
}
fn action_assignmentexpression_s366(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS373)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s367(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP2, 5usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP2, 5usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP2, 5usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP2, 5usize)])
        }
        _ => vec![],
    }
}
fn action_assignmentexpression_s368(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Star => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Slash => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Percent => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleLeft => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleRight => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Equal => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::ExclaimEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Ampersand => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::DoubleAmpersand => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::LeftBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracket => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::VerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::DoubleVerticalBar => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::Caret => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)]),
        TK::LeftBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightBracketEqual => {
            Vec::from(&[Reduce(PK::ExpressionAssignmentExpression, 1usize)])
        }
        TK::RightSquareBracket => Vec::from(&[Shift(State::RightSquareBracketS374)]),
        _ => vec![],
    }
}
fn action_semicolon_s369(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Star => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Num => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Break => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Case => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Char => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Const => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Default => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Do => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Double => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Else => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Float => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::For => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::If => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Int => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Long => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Register => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Return => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Short => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Static => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Union => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Void => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        TK::While => Vec::from(&[Reduce(PK::IterationStatementP2, 7usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s370(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS262)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Break => Vec::from(&[Shift(State::BreakS165)]),
        TK::Case => Vec::from(&[Shift(State::CaseS166)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS167)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS168)]),
        TK::Do => Vec::from(&[Shift(State::DoS169)]),
        TK::For => Vec::from(&[Shift(State::ForS170)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS171)]),
        TK::If => Vec::from(&[Shift(State::IfS172)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS173)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS174)]),
        TK::While => Vec::from(&[Shift(State::WhileS175)]),
        _ => vec![],
    }
}
fn action_expressionopt_s371(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::RightParen => Vec::from(&[Shift(State::RightParenS376)]),
        _ => vec![],
    }
}
fn action_statement_s372(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Star => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Num => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Break => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Case => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Char => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Const => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Default => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Do => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Double => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Else => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Float => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::For => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::If => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Int => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Long => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Register => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Return => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Short => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Static => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Union => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Void => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        TK::While => Vec::from(&[Reduce(PK::SelectionStatementP2, 7usize)]),
        _ => vec![],
    }
}
fn action_rightsquarebracket_s373(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP3, 6usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP3, 6usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP3, 6usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP3, 6usize)])
        }
        _ => vec![],
    }
}
fn action_rightsquarebracket_s374(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::LeftParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP4, 6usize)]),
        TK::RightParen => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP4, 6usize)]),
        TK::Comma => Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP4, 6usize)]),
        TK::LeftSquareBracket => {
            Vec::from(&[Reduce(PK::DirectAbstractDeclaratorP4, 6usize)])
        }
        _ => vec![],
    }
}
fn action_statement_s375(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Star => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Num => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Break => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Case => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Char => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Const => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Default => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Do => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Double => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Else => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Float => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::For => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::If => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Int => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Long => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Register => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Return => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Short => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Static => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Union => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Void => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        TK::While => Vec::from(&[Reduce(PK::IterationStatementP4, 8usize)]),
        _ => vec![],
    }
}
fn action_rightparen_s376(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Shift(State::PlusS76)]),
        TK::Dash => Vec::from(&[Shift(State::DashS77)]),
        TK::Star => Vec::from(&[Shift(State::StarS78)]),
        TK::Ampersand => Vec::from(&[Shift(State::AmpersandS79)]),
        TK::LeftParen => Vec::from(&[Shift(State::LeftParenS80)]),
        TK::Exclaim => Vec::from(&[Shift(State::ExclaimS81)]),
        TK::Tilde => Vec::from(&[Shift(State::TildeS82)]),
        TK::Num => Vec::from(&[Shift(State::NumS83)]),
        TK::Identifier => Vec::from(&[Shift(State::IdentifierS262)]),
        TK::Sizeof => Vec::from(&[Shift(State::SizeofS85)]),
        TK::LeftCurlyBracket => Vec::from(&[Shift(State::LeftCurlyBracketS97)]),
        TK::DoublePlus => Vec::from(&[Shift(State::DoublePlusS87)]),
        TK::DoubleMinus => Vec::from(&[Shift(State::DoubleMinusS88)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::ExpressionOptP2, 0usize)]),
        TK::Break => Vec::from(&[Shift(State::BreakS165)]),
        TK::Case => Vec::from(&[Shift(State::CaseS166)]),
        TK::Continue => Vec::from(&[Shift(State::ContinueS167)]),
        TK::Default => Vec::from(&[Shift(State::DefaultS168)]),
        TK::Do => Vec::from(&[Shift(State::DoS169)]),
        TK::For => Vec::from(&[Shift(State::ForS170)]),
        TK::Goto => Vec::from(&[Shift(State::GotoS171)]),
        TK::If => Vec::from(&[Shift(State::IfS172)]),
        TK::Return => Vec::from(&[Shift(State::ReturnS173)]),
        TK::Switch => Vec::from(&[Shift(State::SwitchS174)]),
        TK::While => Vec::from(&[Shift(State::WhileS175)]),
        _ => vec![],
    }
}
fn action_statement_s377(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Plus => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Dash => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Star => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Ampersand => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::LeftParen => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Exclaim => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Tilde => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Num => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Identifier => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Sizeof => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::LeftCurlyBracket => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::RightCurlyBracket => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::DoublePlus => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::DoubleMinus => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Semicolon => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Auto => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Break => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Case => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Char => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Const => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Continue => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Default => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Do => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Double => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Else => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Enum => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Extern => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Float => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::For => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Goto => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::If => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Inline => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Int => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Long => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Register => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Restrict => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Return => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Short => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Signed => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Static => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Struct => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Switch => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Typedef => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::UnderscoreBool => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::UnderscoreComplex => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Union => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Unsigned => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Void => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::Volatile => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        TK::While => Vec::from(&[Reduce(PK::IterationStatementP3, 9usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TranslationUnit => State::TranslationUnitS25,
        NonTermKind::ExternalDeclaration => State::ExternalDeclarationS26,
        NonTermKind::FunctionDefinition => State::FunctionDefinitionS27,
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS28,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        NonTermKind::Declaration => State::DeclarationS37,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_enum_s6(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::IdentifierOpt => State::IdentifierOptS39,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::EnumS6
            )
        }
    }
}
fn goto_translationunit_s25(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::ExternalDeclaration => State::ExternalDeclarationS40,
        NonTermKind::FunctionDefinition => State::FunctionDefinitionS27,
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS28,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        NonTermKind::Declaration => State::DeclarationS37,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TranslationUnitS25
            )
        }
    }
}
fn goto_declarationspecifiers_s28(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Declarator => State::DeclaratorS42,
        NonTermKind::PointerOpt => State::PointerOptS43,
        NonTermKind::Pointer => State::PointerS44,
        NonTermKind::InitDeclaratorListOpt => State::InitDeclaratorListOptS45,
        NonTermKind::InitDeclaratorList => State::InitDeclaratorListS46,
        NonTermKind::InitDeclarator => State::InitDeclaratorS47,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DeclarationSpecifiersS28
            )
        }
    }
}
fn goto_storageclassspecifier_s29(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS48,
        NonTermKind::DeclarationSpecifiersOpt => State::DeclarationSpecifiersOptS49,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StorageClassSpecifierS29
            )
        }
    }
}
fn goto_typespecifier_s30(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS48,
        NonTermKind::DeclarationSpecifiersOpt => State::DeclarationSpecifiersOptS50,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeSpecifierS30
            )
        }
    }
}
fn goto_structorunion_s32(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::IdentifierOpt => State::IdentifierOptS52,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StructOrUnionS32
            )
        }
    }
}
fn goto_typequalifier_s33(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS48,
        NonTermKind::DeclarationSpecifiersOpt => State::DeclarationSpecifiersOptS53,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifierS33
            )
        }
    }
}
fn goto_functionspecifier_s36(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS48,
        NonTermKind::DeclarationSpecifiersOpt => State::DeclarationSpecifiersOptS54,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::FunctionSpecifierS36
            )
        }
    }
}
fn goto_star_s41(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS56,
        NonTermKind::TypeQualifierListOpt => State::TypeQualifierListOptS57,
        NonTermKind::TypeQualifierList => State::TypeQualifierListS58,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StarS41
            )
        }
    }
}
fn goto_declarator_s42(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationListOpt => State::DeclarationListOptS60,
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS61,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        NonTermKind::DeclarationList => State::DeclarationListS62,
        NonTermKind::Declaration => State::DeclarationS63,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DeclaratorS42
            )
        }
    }
}
fn goto_pointeropt_s43(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DirectDeclarator => State::DirectDeclaratorS66,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PointerOptS43
            )
        }
    }
}
fn goto_leftcurlybracket_s55(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::EnumeratorList => State::EnumeratorListS71,
        NonTermKind::Enumerator => State::EnumeratorS72,
        NonTermKind::EnumerationConstant => State::EnumerationConstantS73,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftCurlyBracketS55
            )
        }
    }
}
fn goto_typequalifierlistopt_s57(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Pointer => State::PointerS74,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifierListOptS57
            )
        }
    }
}
fn goto_typequalifierlist_s58(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS75,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifierListS58
            )
        }
    }
}
fn goto_equal_s59(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS89,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS95,
        NonTermKind::Initializer => State::InitializerS96,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::EqualS59
            )
        }
    }
}
fn goto_declarationlistopt_s60(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CompoundStatement => State::CompoundStatementS98,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DeclarationListOptS60
            )
        }
    }
}
fn goto_declarationspecifiers_s61(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Declarator => State::DeclaratorS99,
        NonTermKind::PointerOpt => State::PointerOptS43,
        NonTermKind::Pointer => State::PointerS44,
        NonTermKind::InitDeclaratorListOpt => State::InitDeclaratorListOptS45,
        NonTermKind::InitDeclaratorList => State::InitDeclaratorListS46,
        NonTermKind::InitDeclarator => State::InitDeclaratorS47,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DeclarationSpecifiersS61
            )
        }
    }
}
fn goto_declarationlist_s62(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS61,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        NonTermKind::Declaration => State::DeclarationS100,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DeclarationListS62
            )
        }
    }
}
fn goto_leftparen_s64(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Declarator => State::DeclaratorS101,
        NonTermKind::PointerOpt => State::PointerOptS43,
        NonTermKind::Pointer => State::PointerS44,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS64
            )
        }
    }
}
fn goto_comma_s68(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Declarator => State::DeclaratorS99,
        NonTermKind::PointerOpt => State::PointerOptS43,
        NonTermKind::Pointer => State::PointerS44,
        NonTermKind::InitDeclarator => State::InitDeclaratorS104,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS68
            )
        }
    }
}
fn goto_leftcurlybracket_s69(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS105,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::StructDeclarationList => State::StructDeclarationListS106,
        NonTermKind::StructDeclaration => State::StructDeclarationS107,
        NonTermKind::SpecifierQualifierList => State::SpecifierQualifierListS108,
        NonTermKind::TypeQualifier => State::TypeQualifierS109,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftCurlyBracketS69
            )
        }
    }
}
fn goto_enumeratorlist_s71(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CommaOpt => State::CommaOptS111,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::EnumeratorListS71
            )
        }
    }
}
fn goto_plus_s76(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CastExpression => State::CastExpressionS114,
        NonTermKind::UnaryExpression => State::UnaryExpressionS115,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PlusS76
            )
        }
    }
}
fn goto_dash_s77(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CastExpression => State::CastExpressionS116,
        NonTermKind::UnaryExpression => State::UnaryExpressionS115,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DashS77
            )
        }
    }
}
fn goto_star_s78(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CastExpression => State::CastExpressionS117,
        NonTermKind::UnaryExpression => State::UnaryExpressionS115,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StarS78
            )
        }
    }
}
fn goto_ampersand_s79(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CastExpression => State::CastExpressionS118,
        NonTermKind::UnaryExpression => State::UnaryExpressionS115,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AmpersandS79
            )
        }
    }
}
fn goto_leftparen_s80(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS105,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::SpecifierQualifierList => State::SpecifierQualifierListS120,
        NonTermKind::TypeQualifier => State::TypeQualifierS109,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS122,
        NonTermKind::TypeName => State::TypeNameS123,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS80
            )
        }
    }
}
fn goto_exclaim_s81(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CastExpression => State::CastExpressionS124,
        NonTermKind::UnaryExpression => State::UnaryExpressionS115,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ExclaimS81
            )
        }
    }
}
fn goto_tilde_s82(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CastExpression => State::CastExpressionS125,
        NonTermKind::UnaryExpression => State::UnaryExpressionS115,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TildeS82
            )
        }
    }
}
fn goto_sizeof_s85(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS127,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SizeofS85
            )
        }
    }
}
fn goto_leftcurlybracket_s86(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::InitializerList => State::InitializerListS130,
        NonTermKind::DesignationOpt => State::DesignationOptS131,
        NonTermKind::Designation => State::DesignationS132,
        NonTermKind::DesignatorList => State::DesignatorListS133,
        NonTermKind::Designator => State::DesignatorS134,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftCurlyBracketS86
            )
        }
    }
}
fn goto_doubleplus_s87(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::UnaryExpression => State::UnaryExpressionS135,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoublePlusS87
            )
        }
    }
}
fn goto_doubleminus_s88(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::UnaryExpression => State::UnaryExpressionS136,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoubleMinusS88
            )
        }
    }
}
fn goto_leftcurlybracket_s97(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS61,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        NonTermKind::Declaration => State::DeclarationS177,
        NonTermKind::CompoundStatement => State::CompoundStatementS178,
        NonTermKind::BlockItemListOpt => State::BlockItemListOptS179,
        NonTermKind::BlockItemList => State::BlockItemListS180,
        NonTermKind::BlockItem => State::BlockItemS181,
        NonTermKind::Statement => State::StatementS182,
        NonTermKind::LabeledStatement => State::LabeledStatementS183,
        NonTermKind::ExpressionStatement => State::ExpressionStatementS184,
        NonTermKind::ExpressionOpt => State::ExpressionOptS185,
        NonTermKind::SelectionStatement => State::SelectionStatementS186,
        NonTermKind::IterationStatement => State::IterationStatementS187,
        NonTermKind::JumpStatement => State::JumpStatementS188,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftCurlyBracketS97
            )
        }
    }
}
fn goto_leftparen_s102(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS191,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::IdentifierListOpt => State::IdentifierListOptS192,
        NonTermKind::ParameterTypeList => State::ParameterTypeListS193,
        NonTermKind::ParameterList => State::ParameterListS194,
        NonTermKind::ParameterDeclaration => State::ParameterDeclarationS195,
        NonTermKind::IdentifierList => State::IdentifierListS196,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS102
            )
        }
    }
}
fn goto_leftsquarebracket_s103(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS56,
        NonTermKind::TypeQualifierListOpt => State::TypeQualifierListOptS198,
        NonTermKind::TypeQualifierList => State::TypeQualifierListS199,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftSquareBracketS103
            )
        }
    }
}
fn goto_typespecifier_s105(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS105,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::SpecifierQualifierList => State::SpecifierQualifierListS200,
        NonTermKind::SpecifierQualifierListOpt => State::SpecifierQualifierListOptS201,
        NonTermKind::TypeQualifier => State::TypeQualifierS109,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeSpecifierS105
            )
        }
    }
}
fn goto_structdeclarationlist_s106(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS105,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::StructDeclaration => State::StructDeclarationS203,
        NonTermKind::SpecifierQualifierList => State::SpecifierQualifierListS108,
        NonTermKind::TypeQualifier => State::TypeQualifierS109,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StructDeclarationListS106
            )
        }
    }
}
fn goto_specifierqualifierlist_s108(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::StructDeclaratorList => State::StructDeclaratorListS204,
        NonTermKind::StructDeclarator => State::StructDeclaratorS205,
        NonTermKind::DeclaratorOpt => State::DeclaratorOptS206,
        NonTermKind::Declarator => State::DeclaratorS207,
        NonTermKind::PointerOpt => State::PointerOptS43,
        NonTermKind::Pointer => State::PointerS44,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SpecifierQualifierListS108
            )
        }
    }
}
fn goto_typequalifier_s109(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS105,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::SpecifierQualifierList => State::SpecifierQualifierListS200,
        NonTermKind::SpecifierQualifierListOpt => State::SpecifierQualifierListOptS208,
        NonTermKind::TypeQualifier => State::TypeQualifierS109,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifierS109
            )
        }
    }
}
fn goto_comma_s110(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Enumerator => State::EnumeratorS209,
        NonTermKind::EnumerationConstant => State::EnumerationConstantS73,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS110
            )
        }
    }
}
fn goto_equal_s112(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS211,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS212,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS213,
        NonTermKind::ConstantExpression => State::ConstantExpressionS214,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::EqualS112
            )
        }
    }
}
fn goto_leftparen_s113(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS105,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::SpecifierQualifierList => State::SpecifierQualifierListS120,
        NonTermKind::TypeQualifier => State::TypeQualifierS109,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS122,
        NonTermKind::TypeName => State::TypeNameS215,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS113
            )
        }
    }
}
fn goto_specifierqualifierlist_s120(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::PointerOpt => State::PointerOptS216,
        NonTermKind::Pointer => State::PointerS217,
        NonTermKind::AbstractDeclaratorOpt => State::AbstractDeclaratorOptS218,
        NonTermKind::AbstractDeclarator => State::AbstractDeclaratorS219,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SpecifierQualifierListS120
            )
        }
    }
}
fn goto_leftparen_s126(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeSpecifier => State::TypeSpecifierS105,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::SpecifierQualifierList => State::SpecifierQualifierListS120,
        NonTermKind::TypeQualifier => State::TypeQualifierS109,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS122,
        NonTermKind::TypeName => State::TypeNameS222,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS126
            )
        }
    }
}
fn goto_leftsquarebracket_s128(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS211,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS212,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS213,
        NonTermKind::ConstantExpression => State::ConstantExpressionS223,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftSquareBracketS128
            )
        }
    }
}
fn goto_initializerlist_s130(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CommaOpt => State::CommaOptS226,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::InitializerListS130
            )
        }
    }
}
fn goto_designationopt_s131(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS89,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS95,
        NonTermKind::Initializer => State::InitializerS227,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DesignationOptS131
            )
        }
    }
}
fn goto_designatorlist_s133(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Designator => State::DesignatorS229,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DesignatorListS133
            )
        }
    }
}
fn goto_question_s137(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS230,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::QuestionS137
            )
        }
    }
}
fn goto_leftparen_s138(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS231,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::ArgumentExpressionListOpt => State::ArgumentExpressionListOptS232,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS95,
        NonTermKind::ArgumentExpressionList => State::ArgumentExpressionListS233,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS138
            )
        }
    }
}
fn goto_leftsquarebracket_s139(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS234,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftSquareBracketS139
            )
        }
    }
}
fn goto_plus_s144(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS237,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PlusS144
            )
        }
    }
}
fn goto_dash_s145(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS238,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DashS145
            )
        }
    }
}
fn goto_star_s146(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS239,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StarS146
            )
        }
    }
}
fn goto_slash_s147(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS240,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SlashS147
            )
        }
    }
}
fn goto_percent_s148(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS241,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PercentS148
            )
        }
    }
}
fn goto_doubleleft_s149(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS242,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoubleLeftS149
            )
        }
    }
}
fn goto_doubleright_s150(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS243,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoubleRightS150
            )
        }
    }
}
fn goto_equal_s151(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS244,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::EqualS151
            )
        }
    }
}
fn goto_doubleequal_s152(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS245,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoubleEqualS152
            )
        }
    }
}
fn goto_exclaimequal_s153(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS246,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ExclaimEqualS153
            )
        }
    }
}
fn goto_ampersand_s154(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS247,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AmpersandS154
            )
        }
    }
}
fn goto_doubleampersand_s155(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS248,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoubleAmpersandS155
            )
        }
    }
}
fn goto_leftbracket_s156(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS249,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftBracketS156
            )
        }
    }
}
fn goto_rightbracket_s157(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS250,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightBracketS157
            )
        }
    }
}
fn goto_verticalbar_s158(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS251,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::VerticalBarS158
            )
        }
    }
}
fn goto_doubleverticalbar_s159(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS252,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoubleVerticalBarS159
            )
        }
    }
}
fn goto_caret_s160(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS253,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CaretS160
            )
        }
    }
}
fn goto_comma_s161(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS254,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS161
            )
        }
    }
}
fn goto_leftbracketequal_s162(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS255,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftBracketEqualS162
            )
        }
    }
}
fn goto_rightbracketequal_s163(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS256,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightBracketEqualS163
            )
        }
    }
}
fn goto_case_s166(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS211,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS212,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS213,
        NonTermKind::ConstantExpression => State::ConstantExpressionS259,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CaseS166
            )
        }
    }
}
fn goto_do_s169(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::CompoundStatement => State::CompoundStatementS178,
        NonTermKind::Statement => State::StatementS263,
        NonTermKind::LabeledStatement => State::LabeledStatementS183,
        NonTermKind::ExpressionStatement => State::ExpressionStatementS184,
        NonTermKind::ExpressionOpt => State::ExpressionOptS185,
        NonTermKind::SelectionStatement => State::SelectionStatementS186,
        NonTermKind::IterationStatement => State::IterationStatementS187,
        NonTermKind::JumpStatement => State::JumpStatementS188,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DoS169
            )
        }
    }
}
fn goto_return_s173(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::ExpressionOpt => State::ExpressionOptS267,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ReturnS173
            )
        }
    }
}
fn goto_blockitemlist_s180(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS61,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        NonTermKind::Declaration => State::DeclarationS177,
        NonTermKind::CompoundStatement => State::CompoundStatementS178,
        NonTermKind::BlockItem => State::BlockItemS271,
        NonTermKind::Statement => State::StatementS182,
        NonTermKind::LabeledStatement => State::LabeledStatementS183,
        NonTermKind::ExpressionStatement => State::ExpressionStatementS184,
        NonTermKind::ExpressionOpt => State::ExpressionOptS185,
        NonTermKind::SelectionStatement => State::SelectionStatementS186,
        NonTermKind::IterationStatement => State::IterationStatementS187,
        NonTermKind::JumpStatement => State::JumpStatementS188,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::BlockItemListS180
            )
        }
    }
}
fn goto_declarationspecifiers_s191(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Declarator => State::DeclaratorS273,
        NonTermKind::PointerOpt => State::PointerOptS274,
        NonTermKind::Pointer => State::PointerS275,
        NonTermKind::AbstractDeclaratorOpt => State::AbstractDeclaratorOptS276,
        NonTermKind::AbstractDeclarator => State::AbstractDeclaratorS219,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DeclarationSpecifiersS191
            )
        }
    }
}
fn goto_static_s197(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS56,
        NonTermKind::TypeQualifierListOpt => State::TypeQualifierListOptS281,
        NonTermKind::TypeQualifierList => State::TypeQualifierListS58,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StaticS197
            )
        }
    }
}
fn goto_typequalifierlistopt_s198(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpressionOpt => State::AssignmentExpressionOptS283,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS284,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS95,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifierListOptS198
            )
        }
    }
}
fn goto_typequalifierlist_s199(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS75,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifierListS199
            )
        }
    }
}
fn goto_pointeropt_s216(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DirectAbstractDeclarator => State::DirectAbstractDeclaratorS291,
        NonTermKind::DirectAbstractDeclaratorOpt => {
            State::DirectAbstractDeclaratorOptS292
        }
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PointerOptS216
            )
        }
    }
}
fn goto_comma_s225(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DesignationOpt => State::DesignationOptS296,
        NonTermKind::Designation => State::DesignationS132,
        NonTermKind::DesignatorList => State::DesignatorListS133,
        NonTermKind::Designator => State::DesignatorS134,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS225
            )
        }
    }
}
fn goto_colon_s257(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::CompoundStatement => State::CompoundStatementS178,
        NonTermKind::Statement => State::StatementS302,
        NonTermKind::LabeledStatement => State::LabeledStatementS183,
        NonTermKind::ExpressionStatement => State::ExpressionStatementS184,
        NonTermKind::ExpressionOpt => State::ExpressionOptS185,
        NonTermKind::SelectionStatement => State::SelectionStatementS186,
        NonTermKind::IterationStatement => State::IterationStatementS187,
        NonTermKind::JumpStatement => State::JumpStatementS188,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ColonS257
            )
        }
    }
}
fn goto_colon_s261(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::CompoundStatement => State::CompoundStatementS178,
        NonTermKind::Statement => State::StatementS304,
        NonTermKind::LabeledStatement => State::LabeledStatementS183,
        NonTermKind::ExpressionStatement => State::ExpressionStatementS184,
        NonTermKind::ExpressionOpt => State::ExpressionOptS185,
        NonTermKind::SelectionStatement => State::SelectionStatementS186,
        NonTermKind::IterationStatement => State::IterationStatementS187,
        NonTermKind::JumpStatement => State::JumpStatementS188,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ColonS261
            )
        }
    }
}
fn goto_leftparen_s264(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS61,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        NonTermKind::Declaration => State::DeclarationS307,
        NonTermKind::ExpressionOpt => State::ExpressionOptS308,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS264
            )
        }
    }
}
fn goto_leftparen_s266(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS310,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS266
            )
        }
    }
}
fn goto_leftparen_s268(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS312,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS268
            )
        }
    }
}
fn goto_leftparen_s269(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS313,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS269
            )
        }
    }
}
fn goto_pointeropt_s274(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DirectDeclarator => State::DirectDeclaratorS66,
        NonTermKind::DirectAbstractDeclarator => State::DirectAbstractDeclaratorS291,
        NonTermKind::DirectAbstractDeclaratorOpt => {
            State::DirectAbstractDeclaratorOptS292
        }
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PointerOptS274
            )
        }
    }
}
fn goto_comma_s279(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS191,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::ParameterDeclaration => State::ParameterDeclarationS316,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS279
            )
        }
    }
}
fn goto_typequalifierlistopt_s281(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS318,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS95,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifierListOptS281
            )
        }
    }
}
fn goto_star_s282(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CastExpression => State::CastExpressionS117,
        NonTermKind::UnaryExpression => State::UnaryExpressionS115,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StarS282
            )
        }
    }
}
fn goto_static_s285(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS321,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS95,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StaticS285
            )
        }
    }
}
fn goto_comma_s286(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::StructDeclarator => State::StructDeclaratorS322,
        NonTermKind::DeclaratorOpt => State::DeclaratorOptS206,
        NonTermKind::Declarator => State::DeclaratorS207,
        NonTermKind::PointerOpt => State::PointerOptS43,
        NonTermKind::Pointer => State::PointerS44,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS286
            )
        }
    }
}
fn goto_colon_s288(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS211,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS212,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS213,
        NonTermKind::ConstantExpression => State::ConstantExpressionS323,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ColonS288
            )
        }
    }
}
fn goto_rightparen_s289(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::CastExpression => State::CastExpressionS324,
        NonTermKind::UnaryExpression => State::UnaryExpressionS115,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightParenS289
            )
        }
    }
}
fn goto_leftparen_s290(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::PointerOpt => State::PointerOptS216,
        NonTermKind::Pointer => State::PointerS217,
        NonTermKind::AbstractDeclarator => State::AbstractDeclaratorS325,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS290
            )
        }
    }
}
fn goto_leftcurlybracket_s293(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::InitializerList => State::InitializerListS328,
        NonTermKind::DesignationOpt => State::DesignationOptS131,
        NonTermKind::Designation => State::DesignationS132,
        NonTermKind::DesignatorList => State::DesignatorListS133,
        NonTermKind::Designator => State::DesignatorS134,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftCurlyBracketS293
            )
        }
    }
}
fn goto_designationopt_s296(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS89,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS95,
        NonTermKind::Initializer => State::InitializerS329,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DesignationOptS296
            )
        }
    }
}
fn goto_colon_s298(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS330,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS212,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS213,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ColonS298
            )
        }
    }
}
fn goto_comma_s300(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS331,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS95,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS300
            )
        }
    }
}
fn goto_colon_s303(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::CompoundStatement => State::CompoundStatementS178,
        NonTermKind::Statement => State::StatementS332,
        NonTermKind::LabeledStatement => State::LabeledStatementS183,
        NonTermKind::ExpressionStatement => State::ExpressionStatementS184,
        NonTermKind::ExpressionOpt => State::ExpressionOptS185,
        NonTermKind::SelectionStatement => State::SelectionStatementS186,
        NonTermKind::IterationStatement => State::IterationStatementS187,
        NonTermKind::JumpStatement => State::JumpStatementS188,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ColonS303
            )
        }
    }
}
fn goto_declaration_s307(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::ExpressionOpt => State::ExpressionOptS334,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DeclarationS307
            )
        }
    }
}
fn goto_leftparen_s314(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Declarator => State::DeclaratorS101,
        NonTermKind::PointerOpt => State::PointerOptS274,
        NonTermKind::Pointer => State::PointerS217,
        NonTermKind::AbstractDeclarator => State::AbstractDeclaratorS325,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS314
            )
        }
    }
}
fn goto_leftparen_s326(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DeclarationSpecifiers => State::DeclarationSpecifiersS191,
        NonTermKind::StorageClassSpecifier => State::StorageClassSpecifierS29,
        NonTermKind::TypeSpecifier => State::TypeSpecifierS30,
        NonTermKind::StructOrUnionSpecifier => State::StructOrUnionSpecifierS31,
        NonTermKind::StructOrUnion => State::StructOrUnionS32,
        NonTermKind::TypeQualifier => State::TypeQualifierS33,
        NonTermKind::ParameterTypeListOpt => State::ParameterTypeListOptS342,
        NonTermKind::ParameterTypeList => State::ParameterTypeListS343,
        NonTermKind::ParameterList => State::ParameterListS194,
        NonTermKind::ParameterDeclaration => State::ParameterDeclarationS195,
        NonTermKind::EnumSpecifier => State::EnumSpecifierS34,
        NonTermKind::TypedefName => State::TypedefNameS35,
        NonTermKind::FunctionSpecifier => State::FunctionSpecifierS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS326
            )
        }
    }
}
fn goto_leftsquarebracket_s327(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS56,
        NonTermKind::TypeQualifierListOpt => State::TypeQualifierListOptS346,
        NonTermKind::TypeQualifierList => State::TypeQualifierListS347,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftSquareBracketS327
            )
        }
    }
}
fn goto_leftparen_s333(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS350,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::LeftParenS333
            )
        }
    }
}
fn goto_semicolon_s335(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::ExpressionOpt => State::ExpressionOptS352,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SemicolonS335
            )
        }
    }
}
fn goto_rightparen_s336(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::CompoundStatement => State::CompoundStatementS178,
        NonTermKind::Statement => State::StatementS353,
        NonTermKind::LabeledStatement => State::LabeledStatementS183,
        NonTermKind::ExpressionStatement => State::ExpressionStatementS184,
        NonTermKind::ExpressionOpt => State::ExpressionOptS185,
        NonTermKind::SelectionStatement => State::SelectionStatementS186,
        NonTermKind::IterationStatement => State::IterationStatementS187,
        NonTermKind::JumpStatement => State::JumpStatementS188,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightParenS336
            )
        }
    }
}
fn goto_rightparen_s337(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::CompoundStatement => State::CompoundStatementS178,
        NonTermKind::Statement => State::StatementS354,
        NonTermKind::LabeledStatement => State::LabeledStatementS183,
        NonTermKind::ExpressionStatement => State::ExpressionStatementS184,
        NonTermKind::ExpressionOpt => State::ExpressionOptS185,
        NonTermKind::SelectionStatement => State::SelectionStatementS186,
        NonTermKind::IterationStatement => State::IterationStatementS187,
        NonTermKind::JumpStatement => State::JumpStatementS188,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightParenS337
            )
        }
    }
}
fn goto_rightparen_s338(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::CompoundStatement => State::CompoundStatementS178,
        NonTermKind::Statement => State::StatementS355,
        NonTermKind::LabeledStatement => State::LabeledStatementS183,
        NonTermKind::ExpressionStatement => State::ExpressionStatementS184,
        NonTermKind::ExpressionOpt => State::ExpressionOptS185,
        NonTermKind::SelectionStatement => State::SelectionStatementS186,
        NonTermKind::IterationStatement => State::IterationStatementS187,
        NonTermKind::JumpStatement => State::JumpStatementS188,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightParenS338
            )
        }
    }
}
fn goto_static_s345(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS56,
        NonTermKind::TypeQualifierListOpt => State::TypeQualifierListOptS358,
        NonTermKind::TypeQualifierList => State::TypeQualifierListS58,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StaticS345
            )
        }
    }
}
fn goto_typequalifierlistopt_s346(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpressionOpt => State::AssignmentExpressionOptS359,
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS284,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS95,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifierListOptS346
            )
        }
    }
}
fn goto_typequalifierlist_s347(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TypeQualifier => State::TypeQualifierS75,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifierListS347
            )
        }
    }
}
fn goto_comma_s348(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DesignationOpt => State::DesignationOptS296,
        NonTermKind::Designation => State::DesignationS132,
        NonTermKind::DesignatorList => State::DesignatorListS133,
        NonTermKind::Designator => State::DesignatorS134,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::CommaS348
            )
        }
    }
}
fn goto_semicolon_s351(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::ExpressionOpt => State::ExpressionOptS363,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SemicolonS351
            )
        }
    }
}
fn goto_typequalifierlistopt_s358(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS366,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS95,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TypeQualifierListOptS358
            )
        }
    }
}
fn goto_static_s360(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS368,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS95,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StaticS360
            )
        }
    }
}
fn goto_semicolon_s364(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::ExpressionOpt => State::ExpressionOptS371,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SemicolonS364
            )
        }
    }
}
fn goto_else_s365(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::CompoundStatement => State::CompoundStatementS178,
        NonTermKind::Statement => State::StatementS372,
        NonTermKind::LabeledStatement => State::LabeledStatementS183,
        NonTermKind::ExpressionStatement => State::ExpressionStatementS184,
        NonTermKind::ExpressionOpt => State::ExpressionOptS185,
        NonTermKind::SelectionStatement => State::SelectionStatementS186,
        NonTermKind::IterationStatement => State::IterationStatementS187,
        NonTermKind::JumpStatement => State::JumpStatementS188,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ElseS365
            )
        }
    }
}
fn goto_rightparen_s370(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::CompoundStatement => State::CompoundStatementS178,
        NonTermKind::Statement => State::StatementS375,
        NonTermKind::LabeledStatement => State::LabeledStatementS183,
        NonTermKind::ExpressionStatement => State::ExpressionStatementS184,
        NonTermKind::ExpressionOpt => State::ExpressionOptS185,
        NonTermKind::SelectionStatement => State::SelectionStatementS186,
        NonTermKind::IterationStatement => State::IterationStatementS187,
        NonTermKind::JumpStatement => State::JumpStatementS188,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightParenS370
            )
        }
    }
}
fn goto_rightparen_s376(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::AssignmentExpression => State::AssignmentExpressionS121,
        NonTermKind::ConditionalExpression => State::ConditionalExpressionS90,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS91,
        NonTermKind::UnaryExpression => State::UnaryExpressionS92,
        NonTermKind::PostfixExpression => State::PostfixExpressionS93,
        NonTermKind::PrimaryExpression => State::PrimaryExpressionS94,
        NonTermKind::Expression => State::ExpressionS176,
        NonTermKind::CompoundStatement => State::CompoundStatementS178,
        NonTermKind::Statement => State::StatementS377,
        NonTermKind::LabeledStatement => State::LabeledStatementS183,
        NonTermKind::ExpressionStatement => State::ExpressionStatementS184,
        NonTermKind::ExpressionOpt => State::ExpressionOptS185,
        NonTermKind::SelectionStatement => State::SelectionStatementS186,
        NonTermKind::IterationStatement => State::IterationStatementS187,
        NonTermKind::JumpStatement => State::JumpStatementS188,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RightParenS376
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: GrammarCParserDefinition = GrammarCParserDefinition {
    actions: [
        action_aug_s0,
        action_identifier_s1,
        action_auto_s2,
        action_char_s3,
        action_const_s4,
        action_double_s5,
        action_enum_s6,
        action_extern_s7,
        action_float_s8,
        action_inline_s9,
        action_int_s10,
        action_long_s11,
        action_register_s12,
        action_restrict_s13,
        action_short_s14,
        action_signed_s15,
        action_static_s16,
        action_struct_s17,
        action_typedef_s18,
        action_underscorebool_s19,
        action_underscorecomplex_s20,
        action_union_s21,
        action_unsigned_s22,
        action_void_s23,
        action_volatile_s24,
        action_translationunit_s25,
        action_externaldeclaration_s26,
        action_functiondefinition_s27,
        action_declarationspecifiers_s28,
        action_storageclassspecifier_s29,
        action_typespecifier_s30,
        action_structorunionspecifier_s31,
        action_structorunion_s32,
        action_typequalifier_s33,
        action_enumspecifier_s34,
        action_typedefname_s35,
        action_functionspecifier_s36,
        action_declaration_s37,
        action_identifier_s38,
        action_identifieropt_s39,
        action_externaldeclaration_s40,
        action_star_s41,
        action_declarator_s42,
        action_pointeropt_s43,
        action_pointer_s44,
        action_initdeclaratorlistopt_s45,
        action_initdeclaratorlist_s46,
        action_initdeclarator_s47,
        action_declarationspecifiers_s48,
        action_declarationspecifiersopt_s49,
        action_declarationspecifiersopt_s50,
        action_identifier_s51,
        action_identifieropt_s52,
        action_declarationspecifiersopt_s53,
        action_declarationspecifiersopt_s54,
        action_leftcurlybracket_s55,
        action_typequalifier_s56,
        action_typequalifierlistopt_s57,
        action_typequalifierlist_s58,
        action_equal_s59,
        action_declarationlistopt_s60,
        action_declarationspecifiers_s61,
        action_declarationlist_s62,
        action_declaration_s63,
        action_leftparen_s64,
        action_identifier_s65,
        action_directdeclarator_s66,
        action_semicolon_s67,
        action_comma_s68,
        action_leftcurlybracket_s69,
        action_identifier_s70,
        action_enumeratorlist_s71,
        action_enumerator_s72,
        action_enumerationconstant_s73,
        action_pointer_s74,
        action_typequalifier_s75,
        action_plus_s76,
        action_dash_s77,
        action_star_s78,
        action_ampersand_s79,
        action_leftparen_s80,
        action_exclaim_s81,
        action_tilde_s82,
        action_num_s83,
        action_identifier_s84,
        action_sizeof_s85,
        action_leftcurlybracket_s86,
        action_doubleplus_s87,
        action_doubleminus_s88,
        action_assignmentexpression_s89,
        action_conditionalexpression_s90,
        action_arithmeticexpression_s91,
        action_unaryexpression_s92,
        action_postfixexpression_s93,
        action_primaryexpression_s94,
        action_expression_s95,
        action_initializer_s96,
        action_leftcurlybracket_s97,
        action_compoundstatement_s98,
        action_declarator_s99,
        action_declaration_s100,
        action_declarator_s101,
        action_leftparen_s102,
        action_leftsquarebracket_s103,
        action_initdeclarator_s104,
        action_typespecifier_s105,
        action_structdeclarationlist_s106,
        action_structdeclaration_s107,
        action_specifierqualifierlist_s108,
        action_typequalifier_s109,
        action_comma_s110,
        action_commaopt_s111,
        action_equal_s112,
        action_leftparen_s113,
        action_castexpression_s114,
        action_unaryexpression_s115,
        action_castexpression_s116,
        action_castexpression_s117,
        action_castexpression_s118,
        action_identifier_s119,
        action_specifierqualifierlist_s120,
        action_assignmentexpression_s121,
        action_expression_s122,
        action_typename_s123,
        action_castexpression_s124,
        action_castexpression_s125,
        action_leftparen_s126,
        action_expression_s127,
        action_leftsquarebracket_s128,
        action_dot_s129,
        action_initializerlist_s130,
        action_designationopt_s131,
        action_designation_s132,
        action_designatorlist_s133,
        action_designator_s134,
        action_unaryexpression_s135,
        action_unaryexpression_s136,
        action_question_s137,
        action_leftparen_s138,
        action_leftsquarebracket_s139,
        action_doubleplus_s140,
        action_doubleminus_s141,
        action_dot_s142,
        action_dashrightbracket_s143,
        action_plus_s144,
        action_dash_s145,
        action_star_s146,
        action_slash_s147,
        action_percent_s148,
        action_doubleleft_s149,
        action_doubleright_s150,
        action_equal_s151,
        action_doubleequal_s152,
        action_exclaimequal_s153,
        action_ampersand_s154,
        action_doubleampersand_s155,
        action_leftbracket_s156,
        action_rightbracket_s157,
        action_verticalbar_s158,
        action_doubleverticalbar_s159,
        action_caret_s160,
        action_comma_s161,
        action_leftbracketequal_s162,
        action_rightbracketequal_s163,
        action_identifier_s164,
        action_break_s165,
        action_case_s166,
        action_continue_s167,
        action_default_s168,
        action_do_s169,
        action_for_s170,
        action_goto_s171,
        action_if_s172,
        action_return_s173,
        action_switch_s174,
        action_while_s175,
        action_expression_s176,
        action_declaration_s177,
        action_compoundstatement_s178,
        action_blockitemlistopt_s179,
        action_blockitemlist_s180,
        action_blockitem_s181,
        action_statement_s182,
        action_labeledstatement_s183,
        action_expressionstatement_s184,
        action_expressionopt_s185,
        action_selectionstatement_s186,
        action_iterationstatement_s187,
        action_jumpstatement_s188,
        action_rightparen_s189,
        action_identifier_s190,
        action_declarationspecifiers_s191,
        action_identifierlistopt_s192,
        action_parametertypelist_s193,
        action_parameterlist_s194,
        action_parameterdeclaration_s195,
        action_identifierlist_s196,
        action_static_s197,
        action_typequalifierlistopt_s198,
        action_typequalifierlist_s199,
        action_specifierqualifierlist_s200,
        action_specifierqualifierlistopt_s201,
        action_rightcurlybracket_s202,
        action_structdeclaration_s203,
        action_structdeclaratorlist_s204,
        action_structdeclarator_s205,
        action_declaratoropt_s206,
        action_declarator_s207,
        action_specifierqualifierlistopt_s208,
        action_enumerator_s209,
        action_rightcurlybracket_s210,
        action_conditionalexpression_s211,
        action_arithmeticexpression_s212,
        action_expression_s213,
        action_constantexpression_s214,
        action_typename_s215,
        action_pointeropt_s216,
        action_pointer_s217,
        action_abstractdeclaratoropt_s218,
        action_abstractdeclarator_s219,
        action_rightparen_s220,
        action_rightparen_s221,
        action_typename_s222,
        action_constantexpression_s223,
        action_identifier_s224,
        action_comma_s225,
        action_commaopt_s226,
        action_initializer_s227,
        action_equal_s228,
        action_designator_s229,
        action_expression_s230,
        action_assignmentexpression_s231,
        action_argumentexpressionlistopt_s232,
        action_argumentexpressionlist_s233,
        action_expression_s234,
        action_identifier_s235,
        action_identifier_s236,
        action_expression_s237,
        action_expression_s238,
        action_expression_s239,
        action_expression_s240,
        action_expression_s241,
        action_expression_s242,
        action_expression_s243,
        action_expression_s244,
        action_expression_s245,
        action_expression_s246,
        action_expression_s247,
        action_expression_s248,
        action_expression_s249,
        action_expression_s250,
        action_expression_s251,
        action_expression_s252,
        action_expression_s253,
        action_expression_s254,
        action_expression_s255,
        action_expression_s256,
        action_colon_s257,
        action_semicolon_s258,
        action_constantexpression_s259,
        action_semicolon_s260,
        action_colon_s261,
        action_identifier_s262,
        action_statement_s263,
        action_leftparen_s264,
        action_identifier_s265,
        action_leftparen_s266,
        action_expressionopt_s267,
        action_leftparen_s268,
        action_leftparen_s269,
        action_rightcurlybracket_s270,
        action_blockitem_s271,
        action_semicolon_s272,
        action_declarator_s273,
        action_pointeropt_s274,
        action_pointer_s275,
        action_abstractdeclaratoropt_s276,
        action_rightparen_s277,
        action_rightparen_s278,
        action_comma_s279,
        action_comma_s280,
        action_typequalifierlistopt_s281,
        action_star_s282,
        action_assignmentexpressionopt_s283,
        action_assignmentexpression_s284,
        action_static_s285,
        action_comma_s286,
        action_semicolon_s287,
        action_colon_s288,
        action_rightparen_s289,
        action_leftparen_s290,
        action_directabstractdeclarator_s291,
        action_directabstractdeclaratoropt_s292,
        action_leftcurlybracket_s293,
        action_rightparen_s294,
        action_rightsquarebracket_s295,
        action_designationopt_s296,
        action_rightcurlybracket_s297,
        action_colon_s298,
        action_rightparen_s299,
        action_comma_s300,
        action_rightsquarebracket_s301,
        action_statement_s302,
        action_colon_s303,
        action_statement_s304,
        action_while_s305,
        action_identifier_s306,
        action_declaration_s307,
        action_expressionopt_s308,
        action_semicolon_s309,
        action_expression_s310,
        action_semicolon_s311,
        action_expression_s312,
        action_expression_s313,
        action_leftparen_s314,
        action_ellipsis_s315,
        action_parameterdeclaration_s316,
        action_identifier_s317,
        action_assignmentexpression_s318,
        action_rightsquarebracket_s319,
        action_rightsquarebracket_s320,
        action_assignmentexpression_s321,
        action_structdeclarator_s322,
        action_constantexpression_s323,
        action_castexpression_s324,
        action_abstractdeclarator_s325,
        action_leftparen_s326,
        action_leftsquarebracket_s327,
        action_initializerlist_s328,
        action_initializer_s329,
        action_conditionalexpression_s330,
        action_assignmentexpression_s331,
        action_statement_s332,
        action_leftparen_s333,
        action_expressionopt_s334,
        action_semicolon_s335,
        action_rightparen_s336,
        action_rightparen_s337,
        action_rightparen_s338,
        action_rightsquarebracket_s339,
        action_rightsquarebracket_s340,
        action_rightparen_s341,
        action_parametertypelistopt_s342,
        action_parametertypelist_s343,
        action_star_s344,
        action_static_s345,
        action_typequalifierlistopt_s346,
        action_typequalifierlist_s347,
        action_comma_s348,
        action_rightcurlybracket_s349,
        action_expression_s350,
        action_semicolon_s351,
        action_expressionopt_s352,
        action_statement_s353,
        action_statement_s354,
        action_statement_s355,
        action_rightparen_s356,
        action_rightsquarebracket_s357,
        action_typequalifierlistopt_s358,
        action_assignmentexpressionopt_s359,
        action_static_s360,
        action_rightcurlybracket_s361,
        action_rightparen_s362,
        action_expressionopt_s363,
        action_semicolon_s364,
        action_else_s365,
        action_assignmentexpression_s366,
        action_rightsquarebracket_s367,
        action_assignmentexpression_s368,
        action_semicolon_s369,
        action_rightparen_s370,
        action_expressionopt_s371,
        action_statement_s372,
        action_rightsquarebracket_s373,
        action_rightsquarebracket_s374,
        action_statement_s375,
        action_rightparen_s376,
        action_statement_s377,
    ],
    gotos: [
        goto_aug_s0,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_enum_s6,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_translationunit_s25,
        goto_invalid,
        goto_invalid,
        goto_declarationspecifiers_s28,
        goto_storageclassspecifier_s29,
        goto_typespecifier_s30,
        goto_invalid,
        goto_structorunion_s32,
        goto_typequalifier_s33,
        goto_invalid,
        goto_invalid,
        goto_functionspecifier_s36,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_star_s41,
        goto_declarator_s42,
        goto_pointeropt_s43,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_leftcurlybracket_s55,
        goto_invalid,
        goto_typequalifierlistopt_s57,
        goto_typequalifierlist_s58,
        goto_equal_s59,
        goto_declarationlistopt_s60,
        goto_declarationspecifiers_s61,
        goto_declarationlist_s62,
        goto_invalid,
        goto_leftparen_s64,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s68,
        goto_leftcurlybracket_s69,
        goto_invalid,
        goto_enumeratorlist_s71,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_plus_s76,
        goto_dash_s77,
        goto_star_s78,
        goto_ampersand_s79,
        goto_leftparen_s80,
        goto_exclaim_s81,
        goto_tilde_s82,
        goto_invalid,
        goto_invalid,
        goto_sizeof_s85,
        goto_leftcurlybracket_s86,
        goto_doubleplus_s87,
        goto_doubleminus_s88,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_leftcurlybracket_s97,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_leftparen_s102,
        goto_leftsquarebracket_s103,
        goto_invalid,
        goto_typespecifier_s105,
        goto_structdeclarationlist_s106,
        goto_invalid,
        goto_specifierqualifierlist_s108,
        goto_typequalifier_s109,
        goto_comma_s110,
        goto_invalid,
        goto_equal_s112,
        goto_leftparen_s113,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_specifierqualifierlist_s120,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_leftparen_s126,
        goto_invalid,
        goto_leftsquarebracket_s128,
        goto_invalid,
        goto_initializerlist_s130,
        goto_designationopt_s131,
        goto_invalid,
        goto_designatorlist_s133,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_question_s137,
        goto_leftparen_s138,
        goto_leftsquarebracket_s139,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_plus_s144,
        goto_dash_s145,
        goto_star_s146,
        goto_slash_s147,
        goto_percent_s148,
        goto_doubleleft_s149,
        goto_doubleright_s150,
        goto_equal_s151,
        goto_doubleequal_s152,
        goto_exclaimequal_s153,
        goto_ampersand_s154,
        goto_doubleampersand_s155,
        goto_leftbracket_s156,
        goto_rightbracket_s157,
        goto_verticalbar_s158,
        goto_doubleverticalbar_s159,
        goto_caret_s160,
        goto_comma_s161,
        goto_leftbracketequal_s162,
        goto_rightbracketequal_s163,
        goto_invalid,
        goto_invalid,
        goto_case_s166,
        goto_invalid,
        goto_invalid,
        goto_do_s169,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_return_s173,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_blockitemlist_s180,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_declarationspecifiers_s191,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_static_s197,
        goto_typequalifierlistopt_s198,
        goto_typequalifierlist_s199,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_pointeropt_s216,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s225,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_colon_s257,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_colon_s261,
        goto_invalid,
        goto_invalid,
        goto_leftparen_s264,
        goto_invalid,
        goto_leftparen_s266,
        goto_invalid,
        goto_leftparen_s268,
        goto_leftparen_s269,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_pointeropt_s274,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_comma_s279,
        goto_invalid,
        goto_typequalifierlistopt_s281,
        goto_star_s282,
        goto_invalid,
        goto_invalid,
        goto_static_s285,
        goto_comma_s286,
        goto_invalid,
        goto_colon_s288,
        goto_rightparen_s289,
        goto_leftparen_s290,
        goto_invalid,
        goto_invalid,
        goto_leftcurlybracket_s293,
        goto_invalid,
        goto_invalid,
        goto_designationopt_s296,
        goto_invalid,
        goto_colon_s298,
        goto_invalid,
        goto_comma_s300,
        goto_invalid,
        goto_invalid,
        goto_colon_s303,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_declaration_s307,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_leftparen_s314,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_leftparen_s326,
        goto_leftsquarebracket_s327,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_leftparen_s333,
        goto_invalid,
        goto_semicolon_s335,
        goto_rightparen_s336,
        goto_rightparen_s337,
        goto_rightparen_s338,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_static_s345,
        goto_typequalifierlistopt_s346,
        goto_typequalifierlist_s347,
        goto_comma_s348,
        goto_invalid,
        goto_invalid,
        goto_semicolon_s351,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_typequalifierlistopt_s358,
        goto_invalid,
        goto_static_s360,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_semicolon_s364,
        goto_else_s365,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_rightparen_s370,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_rightparen_s376,
        goto_invalid,
    ],
    token_kinds: [
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Const, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Equal, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Static, true)),
            Some((TK::Const, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Const, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Equal, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Equal, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Static, true)),
            Some((TK::Const, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Equal, true)),
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::RightParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Static, true)),
            Some((TK::Const, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Equal, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Equal, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Colon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Const, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Static, true)),
            Some((TK::Const, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Colon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Equal, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Equal, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Colon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::While, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Ellipsis, true)),
            Some((TK::Int, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Double, true)),
            Some((TK::Signed, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Equal, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Star, true)),
            Some((TK::LeftParen, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::RightParen, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Static, true)),
            Some((TK::Const, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Typedef, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::Auto, true)),
            Some((TK::Char, true)),
            Some((TK::Enum, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::Int, true)),
            Some((TK::Equal, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Const, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Restrict, true)),
            Some((TK::Volatile, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Static, true)),
            Some((TK::Const, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::DashRightBracket, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Question, true)),
            Some((TK::Colon, true)),
            Some((TK::Comma, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::LeftSquareBracket, true)),
            Some((TK::RightSquareBracket, true)),
            Some((TK::Dot, true)),
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Semicolon, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Sizeof, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::DoubleLeft, true)),
            Some((TK::DoubleRight, true)),
            Some((TK::DoubleEqual, true)),
            Some((TK::ExclaimEqual, true)),
            Some((TK::DoubleAmpersand, true)),
            Some((TK::DoubleVerticalBar, true)),
            Some((TK::LeftBracketEqual, true)),
            Some((TK::RightBracketEqual, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Slash, true)),
            Some((TK::Percent, true)),
            Some((TK::Equal, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftBracket, true)),
            Some((TK::RightBracket, true)),
            Some((TK::VerticalBar, true)),
            Some((TK::Caret, true)),
            Some((TK::Comma, true)),
            Some((TK::RightSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::RightParen, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::LeftParen, true)),
            Some((TK::RightParen, true)),
            Some((TK::Comma, true)),
            Some((TK::LeftSquareBracket, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Default, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Return, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::While, true)),
            Some((TK::Case, true)),
            Some((TK::Goto, true)),
            Some((TK::For, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::Continue, true)),
            Some((TK::Register, true)),
            Some((TK::Restrict, true)),
            Some((TK::UnderscoreComplex, true)),
            Some((TK::Unsigned, true)),
            Some((TK::Volatile, true)),
            Some((TK::Default, true)),
            Some((TK::Typedef, true)),
            Some((TK::Sizeof, true)),
            Some((TK::Double, true)),
            Some((TK::Extern, true)),
            Some((TK::Inline, true)),
            Some((TK::Return, true)),
            Some((TK::Signed, true)),
            Some((TK::Static, true)),
            Some((TK::Struct, true)),
            Some((TK::Switch, true)),
            Some((TK::Break, true)),
            Some((TK::Const, true)),
            Some((TK::Float, true)),
            Some((TK::Short, true)),
            Some((TK::UnderscoreBool, true)),
            Some((TK::Union, true)),
            Some((TK::While, true)),
            Some((TK::Auto, true)),
            Some((TK::Case, true)),
            Some((TK::Char, true)),
            Some((TK::Else, true)),
            Some((TK::Enum, true)),
            Some((TK::Goto, true)),
            Some((TK::Long, true)),
            Some((TK::Void, true)),
            Some((TK::For, true)),
            Some((TK::Int, true)),
            Some((TK::DoublePlus, true)),
            Some((TK::DoubleMinus, true)),
            Some((TK::Do, true)),
            Some((TK::If, true)),
            Some((TK::Plus, true)),
            Some((TK::Dash, true)),
            Some((TK::Star, true)),
            Some((TK::Ampersand, true)),
            Some((TK::LeftParen, true)),
            Some((TK::Exclaim, true)),
            Some((TK::Tilde, true)),
            Some((TK::LeftCurlyBracket, true)),
            Some((TK::RightCurlyBracket, true)),
            Some((TK::Semicolon, true)),
            Some((TK::Num, false)),
            Some((TK::Identifier, false)),
            None,
            None,
        ],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind>
for GrammarCParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize].iter().map_while(|t| *t).collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        false
    }
}
pub(crate) type Context<'i, I> = GssHead<'i, I, State, TokenKind>;
pub struct GrammarCParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    GlrParser<
        'i,
        State,
        L,
        ProdKind,
        TokenKind,
        NonTermKind,
        GrammarCParserDefinition,
        I,
        B,
    >,
);
#[allow(dead_code)]
impl<
    'i,
> GrammarCParser<
    'i,
    Input,
    StringLexer<Context<'i, Input>, State, TokenKind, TokenRecognizer, TERMINAL_COUNT>,
    DefaultBuilder,
> {
    pub fn new() -> Self {
        Self(
            GlrParser::new(
                &PARSER_DEFINITION,
                false,
                false,
                StringLexer::new(true, &RECOGNIZERS),
            ),
        )
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind>
for GrammarCParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = Forest<'i, I, ProdKind, TokenKind>;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(
        &'a mut self,
        file: F,
    ) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
#[allow(dead_code)]
#[derive(Debug)]
pub enum Recognizer {
    Stop,
    StrMatch(&'static str),
    RegexMatch(Lazy<Regex>),
}
#[allow(dead_code)]
#[derive(Debug)]
pub struct TokenRecognizer(TokenKind, Recognizer);
impl<'i> TokenRecognizerT<'i> for TokenRecognizer {
    fn recognize(&self, input: &'i str) -> Option<&'i str> {
        match &self {
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::StrMatch(s)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                if input.starts_with(s) {
                    log!("{}", "recognized".bold().green());
                    Some(s)
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::RegexMatch(r)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                let match_str = r.find(input);
                match match_str {
                    Some(x) => {
                        let x_str = x.as_str();
                        log!("{} '{}'", "recognized".bold().green(), x_str);
                        Some(x_str)
                    }
                    None => {
                        log!("{}", "not recognized".red());
                        None
                    }
                }
            }
            TokenRecognizer(_, Recognizer::Stop) => {
                logn!("{} STOP -- ", "    Recognizing".green());
                if input.is_empty() {
                    log!("{}", "recognized".bold().green());
                    Some("")
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
        }
    }
}
pub(crate) static RECOGNIZERS: [TokenRecognizer; TERMINAL_COUNT] = [
    TokenRecognizer(TokenKind::STOP, Recognizer::Stop),
    TokenRecognizer(TokenKind::Plus, Recognizer::StrMatch("+")),
    TokenRecognizer(TokenKind::Dash, Recognizer::StrMatch("-")),
    TokenRecognizer(TokenKind::Star, Recognizer::StrMatch("*")),
    TokenRecognizer(TokenKind::Slash, Recognizer::StrMatch("/")),
    TokenRecognizer(TokenKind::Percent, Recognizer::StrMatch("%")),
    TokenRecognizer(TokenKind::DoubleLeft, Recognizer::StrMatch("<<")),
    TokenRecognizer(TokenKind::DoubleRight, Recognizer::StrMatch(">>")),
    TokenRecognizer(TokenKind::Equal, Recognizer::StrMatch("=")),
    TokenRecognizer(TokenKind::DoubleEqual, Recognizer::StrMatch("==")),
    TokenRecognizer(TokenKind::ExclaimEqual, Recognizer::StrMatch("!=")),
    TokenRecognizer(TokenKind::Ampersand, Recognizer::StrMatch("&")),
    TokenRecognizer(TokenKind::DoubleAmpersand, Recognizer::StrMatch("&&")),
    TokenRecognizer(TokenKind::LeftBracket, Recognizer::StrMatch("<")),
    TokenRecognizer(TokenKind::RightBracket, Recognizer::StrMatch(">")),
    TokenRecognizer(TokenKind::VerticalBar, Recognizer::StrMatch("|")),
    TokenRecognizer(TokenKind::DoubleVerticalBar, Recognizer::StrMatch("||")),
    TokenRecognizer(TokenKind::Caret, Recognizer::StrMatch("^")),
    TokenRecognizer(TokenKind::LeftParen, Recognizer::StrMatch("(")),
    TokenRecognizer(TokenKind::RightParen, Recognizer::StrMatch(")")),
    TokenRecognizer(TokenKind::Question, Recognizer::StrMatch("?")),
    TokenRecognizer(TokenKind::Colon, Recognizer::StrMatch(":")),
    TokenRecognizer(TokenKind::Comma, Recognizer::StrMatch(",")),
    TokenRecognizer(TokenKind::LeftBracketEqual, Recognizer::StrMatch("<=")),
    TokenRecognizer(TokenKind::RightBracketEqual, Recognizer::StrMatch(">=")),
    TokenRecognizer(TokenKind::Exclaim, Recognizer::StrMatch("!")),
    TokenRecognizer(TokenKind::Tilde, Recognizer::StrMatch("~")),
    TokenRecognizer(
        TokenKind::Num,
        Recognizer::RegexMatch(
            Lazy::new(|| {
                Regex::new(
                        concat!(
                            "^(",
                            "[+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+\\-]?\\d+)?", ")"
                        ),
                    )
                    .unwrap()
            }),
        ),
    ),
    TokenRecognizer(
        TokenKind::Identifier,
        Recognizer::RegexMatch(
            Lazy::new(|| {
                Regex::new(concat!("^(", "\\p{XID_Start}\\p{XID_Continue}*", ")"))
                    .unwrap()
            }),
        ),
    ),
    TokenRecognizer(TokenKind::Sizeof, Recognizer::StrMatch("sizeof")),
    TokenRecognizer(TokenKind::LeftCurlyBracket, Recognizer::StrMatch("{")),
    TokenRecognizer(TokenKind::RightCurlyBracket, Recognizer::StrMatch("}")),
    TokenRecognizer(TokenKind::LeftSquareBracket, Recognizer::StrMatch("[")),
    TokenRecognizer(TokenKind::RightSquareBracket, Recognizer::StrMatch("]")),
    TokenRecognizer(TokenKind::DoublePlus, Recognizer::StrMatch("++")),
    TokenRecognizer(TokenKind::DoubleMinus, Recognizer::StrMatch("--")),
    TokenRecognizer(TokenKind::Ellipsis, Recognizer::StrMatch("...")),
    TokenRecognizer(TokenKind::Dot, Recognizer::StrMatch(".")),
    TokenRecognizer(TokenKind::DashRightBracket, Recognizer::StrMatch("->")),
    TokenRecognizer(TokenKind::Semicolon, Recognizer::StrMatch(";")),
    TokenRecognizer(TokenKind::Auto, Recognizer::StrMatch("auto")),
    TokenRecognizer(TokenKind::Break, Recognizer::StrMatch("break")),
    TokenRecognizer(TokenKind::Case, Recognizer::StrMatch("case")),
    TokenRecognizer(TokenKind::Char, Recognizer::StrMatch("char")),
    TokenRecognizer(TokenKind::Const, Recognizer::StrMatch("const")),
    TokenRecognizer(TokenKind::Continue, Recognizer::StrMatch("continue")),
    TokenRecognizer(TokenKind::Default, Recognizer::StrMatch("default")),
    TokenRecognizer(TokenKind::Do, Recognizer::StrMatch("do")),
    TokenRecognizer(TokenKind::Double, Recognizer::StrMatch("double")),
    TokenRecognizer(TokenKind::Else, Recognizer::StrMatch("else")),
    TokenRecognizer(TokenKind::Enum, Recognizer::StrMatch("enum")),
    TokenRecognizer(TokenKind::Extern, Recognizer::StrMatch("extern")),
    TokenRecognizer(TokenKind::Float, Recognizer::StrMatch("float")),
    TokenRecognizer(TokenKind::For, Recognizer::StrMatch("for")),
    TokenRecognizer(TokenKind::Goto, Recognizer::StrMatch("goto")),
    TokenRecognizer(TokenKind::If, Recognizer::StrMatch("if")),
    TokenRecognizer(TokenKind::Inline, Recognizer::StrMatch("inline")),
    TokenRecognizer(TokenKind::Int, Recognizer::StrMatch("int")),
    TokenRecognizer(TokenKind::Long, Recognizer::StrMatch("long")),
    TokenRecognizer(TokenKind::Register, Recognizer::StrMatch("register")),
    TokenRecognizer(TokenKind::Restrict, Recognizer::StrMatch("restrict")),
    TokenRecognizer(TokenKind::Return, Recognizer::StrMatch("return")),
    TokenRecognizer(TokenKind::Short, Recognizer::StrMatch("short")),
    TokenRecognizer(TokenKind::Signed, Recognizer::StrMatch("signed")),
    TokenRecognizer(TokenKind::Static, Recognizer::StrMatch("static")),
    TokenRecognizer(TokenKind::Struct, Recognizer::StrMatch("struct")),
    TokenRecognizer(TokenKind::Switch, Recognizer::StrMatch("switch")),
    TokenRecognizer(TokenKind::Typedef, Recognizer::StrMatch("typedef")),
    TokenRecognizer(TokenKind::UnderscoreBool, Recognizer::StrMatch("_Bool")),
    TokenRecognizer(TokenKind::UnderscoreComplex, Recognizer::StrMatch("_Complex")),
    TokenRecognizer(TokenKind::Union, Recognizer::StrMatch("union")),
    TokenRecognizer(TokenKind::Unsigned, Recognizer::StrMatch("unsigned")),
    TokenRecognizer(TokenKind::Void, Recognizer::StrMatch("void")),
    TokenRecognizer(TokenKind::Volatile, Recognizer::StrMatch("volatile")),
    TokenRecognizer(TokenKind::While, Recognizer::StrMatch("while")),
];
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl DefaultBuilder {
    #[allow(dead_code)]
    pub fn new() -> Self {
        Self { res_stack: vec![] }
    }
}
impl Builder for DefaultBuilder {
    type Output = grammar_c_actions::TranslationUnit;
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::TranslationUnit(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind>
for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &mut Context<'i, Input>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::Plus => Terminal::Plus,
            TokenKind::Dash => Terminal::Dash,
            TokenKind::Star => Terminal::Star,
            TokenKind::Slash => Terminal::Slash,
            TokenKind::Percent => Terminal::Percent,
            TokenKind::DoubleLeft => Terminal::DoubleLeft,
            TokenKind::DoubleRight => Terminal::DoubleRight,
            TokenKind::Equal => Terminal::Equal,
            TokenKind::DoubleEqual => Terminal::DoubleEqual,
            TokenKind::ExclaimEqual => Terminal::ExclaimEqual,
            TokenKind::Ampersand => Terminal::Ampersand,
            TokenKind::DoubleAmpersand => Terminal::DoubleAmpersand,
            TokenKind::LeftBracket => Terminal::LeftBracket,
            TokenKind::RightBracket => Terminal::RightBracket,
            TokenKind::VerticalBar => Terminal::VerticalBar,
            TokenKind::DoubleVerticalBar => Terminal::DoubleVerticalBar,
            TokenKind::Caret => Terminal::Caret,
            TokenKind::LeftParen => Terminal::LeftParen,
            TokenKind::RightParen => Terminal::RightParen,
            TokenKind::Question => Terminal::Question,
            TokenKind::Colon => Terminal::Colon,
            TokenKind::Comma => Terminal::Comma,
            TokenKind::LeftBracketEqual => Terminal::LeftBracketEqual,
            TokenKind::RightBracketEqual => Terminal::RightBracketEqual,
            TokenKind::Exclaim => Terminal::Exclaim,
            TokenKind::Tilde => Terminal::Tilde,
            TokenKind::Num => Terminal::Num(grammar_c_actions::num(&*context, token)),
            TokenKind::Identifier => {
                Terminal::Identifier(grammar_c_actions::identifier(&*context, token))
            }
            TokenKind::Sizeof => Terminal::Sizeof,
            TokenKind::LeftCurlyBracket => Terminal::LeftCurlyBracket,
            TokenKind::RightCurlyBracket => Terminal::RightCurlyBracket,
            TokenKind::LeftSquareBracket => Terminal::LeftSquareBracket,
            TokenKind::RightSquareBracket => Terminal::RightSquareBracket,
            TokenKind::DoublePlus => Terminal::DoublePlus,
            TokenKind::DoubleMinus => Terminal::DoubleMinus,
            TokenKind::Ellipsis => Terminal::Ellipsis,
            TokenKind::Dot => Terminal::Dot,
            TokenKind::DashRightBracket => Terminal::DashRightBracket,
            TokenKind::Semicolon => Terminal::Semicolon,
            TokenKind::Auto => Terminal::Auto,
            TokenKind::Break => Terminal::Break,
            TokenKind::Case => Terminal::Case,
            TokenKind::Char => Terminal::Char,
            TokenKind::Const => Terminal::Const,
            TokenKind::Continue => Terminal::Continue,
            TokenKind::Default => Terminal::Default,
            TokenKind::Do => Terminal::Do,
            TokenKind::Double => Terminal::Double,
            TokenKind::Else => Terminal::Else,
            TokenKind::Enum => Terminal::Enum,
            TokenKind::Extern => Terminal::Extern,
            TokenKind::Float => Terminal::Float,
            TokenKind::For => Terminal::For,
            TokenKind::Goto => Terminal::Goto,
            TokenKind::If => Terminal::If,
            TokenKind::Inline => Terminal::Inline,
            TokenKind::Int => Terminal::Int,
            TokenKind::Long => Terminal::Long,
            TokenKind::Register => Terminal::Register,
            TokenKind::Restrict => Terminal::Restrict,
            TokenKind::Return => Terminal::Return,
            TokenKind::Short => Terminal::Short,
            TokenKind::Signed => Terminal::Signed,
            TokenKind::Static => Terminal::Static,
            TokenKind::Struct => Terminal::Struct,
            TokenKind::Switch => Terminal::Switch,
            TokenKind::Typedef => Terminal::Typedef,
            TokenKind::UnderscoreBool => Terminal::UnderscoreBool,
            TokenKind::UnderscoreComplex => Terminal::UnderscoreComplex,
            TokenKind::Union => Terminal::Union,
            TokenKind::Unsigned => Terminal::Unsigned,
            TokenKind::Void => Terminal::Void,
            TokenKind::Volatile => Terminal::Volatile,
            TokenKind::While => Terminal::While,
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &mut Context<'i, Input>,
        prod: ProdKind,
        _prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::TranslationUnitP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ExternalDeclaration(p0)) => {
                        NonTerminal::TranslationUnit(
                            grammar_c_actions::translation_unit_external_declaration(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TranslationUnitP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::TranslationUnit(p0)),
                        Symbol::NonTerminal(NonTerminal::ExternalDeclaration(p1)),
                    ) => {
                        NonTerminal::TranslationUnit(
                            grammar_c_actions::translation_unit_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExternalDeclarationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::FunctionDefinition(p0)) => {
                        NonTerminal::ExternalDeclaration(
                            grammar_c_actions::external_declaration_function_definition(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExternalDeclarationP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declaration(p0)) => {
                        NonTerminal::ExternalDeclaration(
                            grammar_c_actions::external_declaration_declaration(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FunctionDefinitionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifiers(p0)),
                        Symbol::NonTerminal(NonTerminal::Declarator(p1)),
                        Symbol::NonTerminal(NonTerminal::DeclarationListOpt(p2)),
                        Symbol::NonTerminal(NonTerminal::CompoundStatement(p3)),
                    ) => {
                        NonTerminal::FunctionDefinition(
                            grammar_c_actions::function_definition_c1(
                                &*context,
                                p0,
                                p1,
                                p2,
                                p3,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationListOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::DeclarationList(p0)) => {
                        NonTerminal::DeclarationListOpt(
                            grammar_c_actions::declaration_list_opt_declaration_list(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationListOptP2 => {
                NonTerminal::DeclarationListOpt(
                    grammar_c_actions::declaration_list_opt_empty(context),
                )
            }
            ProdKind::DeclarationSpecifiersP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::StorageClassSpecifier(p0)),
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifiersOpt(p1)),
                    ) => {
                        NonTerminal::DeclarationSpecifiers(
                            grammar_c_actions::declaration_specifiers_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationSpecifiersOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::DeclarationSpecifiers(p0)) => {
                        NonTerminal::DeclarationSpecifiersOpt(
                            grammar_c_actions::declaration_specifiers_opt_declaration_specifiers(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationSpecifiersOptP2 => {
                NonTerminal::DeclarationSpecifiersOpt(
                    grammar_c_actions::declaration_specifiers_opt_empty(context),
                )
            }
            ProdKind::DeclarationSpecifiersP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::TypeSpecifier(p0)),
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifiersOpt(p1)),
                    ) => {
                        NonTerminal::DeclarationSpecifiers(
                            grammar_c_actions::declaration_specifiers_c2(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationSpecifiersP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::TypeQualifier(p0)),
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifiersOpt(p1)),
                    ) => {
                        NonTerminal::DeclarationSpecifiers(
                            grammar_c_actions::declaration_specifiers_c3(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationSpecifiersP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::FunctionSpecifier(p0)),
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifiersOpt(p1)),
                    ) => {
                        NonTerminal::DeclarationSpecifiers(
                            grammar_c_actions::declaration_specifiers_c4(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StorageClassSpecifierP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StorageClassSpecifier(
                    grammar_c_actions::storage_class_specifier_typedef(context),
                )
            }
            ProdKind::StorageClassSpecifierP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StorageClassSpecifier(
                    grammar_c_actions::storage_class_specifier_extern(context),
                )
            }
            ProdKind::StorageClassSpecifierP3 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StorageClassSpecifier(
                    grammar_c_actions::storage_class_specifier_static(context),
                )
            }
            ProdKind::StorageClassSpecifierP4 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StorageClassSpecifier(
                    grammar_c_actions::storage_class_specifier_auto(context),
                )
            }
            ProdKind::StorageClassSpecifierP5 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StorageClassSpecifier(
                    grammar_c_actions::storage_class_specifier_register(context),
                )
            }
            ProdKind::TypeSpecifierP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_void(context),
                )
            }
            ProdKind::TypeSpecifierP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_char(context),
                )
            }
            ProdKind::TypeSpecifierP3 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_short(context),
                )
            }
            ProdKind::TypeSpecifierP4 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_int(context),
                )
            }
            ProdKind::TypeSpecifierP5 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_long(context),
                )
            }
            ProdKind::TypeSpecifierP6 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_float(context),
                )
            }
            ProdKind::TypeSpecifierP7 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_double(context),
                )
            }
            ProdKind::TypeSpecifierP8 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_signed(context),
                )
            }
            ProdKind::TypeSpecifierP9 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_unsigned(context),
                )
            }
            ProdKind::TypeSpecifierP10 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_underscore_bool(context),
                )
            }
            ProdKind::TypeSpecifierP11 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeSpecifier(
                    grammar_c_actions::type_specifier_underscore_complex(context),
                )
            }
            ProdKind::TypeSpecifierP12 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::StructOrUnionSpecifier(p0)) => {
                        NonTerminal::TypeSpecifier(
                            grammar_c_actions::type_specifier_struct_or_union_specifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeSpecifierP13 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::EnumSpecifier(p0)) => {
                        NonTerminal::TypeSpecifier(
                            grammar_c_actions::type_specifier_enum_specifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeSpecifierP14 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TypedefName(p0)) => {
                        NonTerminal::TypeSpecifier(
                            grammar_c_actions::type_specifier_typedef_name(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructOrUnionSpecifierP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::StructOrUnion(p0)),
                        Symbol::NonTerminal(NonTerminal::IdentifierOpt(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::StructDeclarationList(p2)),
                        _,
                    ) => {
                        NonTerminal::StructOrUnionSpecifier(
                            grammar_c_actions::struct_or_union_specifier_c1(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdentifierOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Identifier(p0)) => {
                        NonTerminal::IdentifierOpt(
                            grammar_c_actions::identifier_opt_identifier(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdentifierOptP2 => {
                NonTerminal::IdentifierOpt(
                    grammar_c_actions::identifier_opt_empty(context),
                )
            }
            ProdKind::StructOrUnionSpecifierP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::StructOrUnion(p0)),
                        Symbol::Terminal(Terminal::Identifier(p1)),
                    ) => {
                        NonTerminal::StructOrUnionSpecifier(
                            grammar_c_actions::struct_or_union_specifier_c2(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructOrUnionP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StructOrUnion(
                    grammar_c_actions::struct_or_union_struct(context),
                )
            }
            ProdKind::StructOrUnionP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::StructOrUnion(
                    grammar_c_actions::struct_or_union_union(context),
                )
            }
            ProdKind::StructDeclarationListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::StructDeclaration(p0)) => {
                        NonTerminal::StructDeclarationList(
                            grammar_c_actions::struct_declaration_list_struct_declaration(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructDeclarationListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::StructDeclarationList(p0)),
                        Symbol::NonTerminal(NonTerminal::StructDeclaration(p1)),
                    ) => {
                        NonTerminal::StructDeclarationList(
                            grammar_c_actions::struct_declaration_list_c2(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructDeclarationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::SpecifierQualifierList(p0)),
                        Symbol::NonTerminal(NonTerminal::StructDeclaratorList(p1)),
                        _,
                    ) => {
                        NonTerminal::StructDeclaration(
                            grammar_c_actions::struct_declaration_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SpecifierQualifierListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::TypeSpecifier(p0)),
                        Symbol::NonTerminal(NonTerminal::SpecifierQualifierListOpt(p1)),
                    ) => {
                        NonTerminal::SpecifierQualifierList(
                            grammar_c_actions::specifier_qualifier_list_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SpecifierQualifierListOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SpecifierQualifierList(p0)) => {
                        NonTerminal::SpecifierQualifierListOpt(
                            grammar_c_actions::specifier_qualifier_list_opt_specifier_qualifier_list(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SpecifierQualifierListOptP2 => {
                NonTerminal::SpecifierQualifierListOpt(
                    grammar_c_actions::specifier_qualifier_list_opt_empty(context),
                )
            }
            ProdKind::SpecifierQualifierListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::TypeQualifier(p0)),
                        Symbol::NonTerminal(NonTerminal::SpecifierQualifierListOpt(p1)),
                    ) => {
                        NonTerminal::SpecifierQualifierList(
                            grammar_c_actions::specifier_qualifier_list_c2(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeQualifierP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeQualifier(
                    grammar_c_actions::type_qualifier_const(context),
                )
            }
            ProdKind::TypeQualifierP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeQualifier(
                    grammar_c_actions::type_qualifier_restrict(context),
                )
            }
            ProdKind::TypeQualifierP3 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::TypeQualifier(
                    grammar_c_actions::type_qualifier_volatile(context),
                )
            }
            ProdKind::StructDeclaratorListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::StructDeclarator(p0)) => {
                        NonTerminal::StructDeclaratorList(
                            grammar_c_actions::struct_declarator_list_struct_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructDeclaratorListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::StructDeclaratorList(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::StructDeclarator(p1)),
                    ) => {
                        NonTerminal::StructDeclaratorList(
                            grammar_c_actions::struct_declarator_list_c2(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructDeclaratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declarator(p0)) => {
                        NonTerminal::StructDeclarator(
                            grammar_c_actions::struct_declarator_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StructDeclaratorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::DeclaratorOpt(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ConstantExpression(p1)),
                    ) => {
                        NonTerminal::StructDeclarator(
                            grammar_c_actions::struct_declarator_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclaratorOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declarator(p0)) => {
                        NonTerminal::DeclaratorOpt(
                            grammar_c_actions::declarator_opt_declarator(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclaratorOptP2 => {
                NonTerminal::DeclaratorOpt(
                    grammar_c_actions::declarator_opt_empty(context),
                )
            }
            ProdKind::DeclaratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::PointerOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p1)),
                    ) => {
                        NonTerminal::Declarator(
                            grammar_c_actions::declarator_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PointerOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Pointer(p0)) => {
                        NonTerminal::PointerOpt(
                            grammar_c_actions::pointer_opt_pointer(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PointerOptP2 => {
                NonTerminal::PointerOpt(grammar_c_actions::pointer_opt_empty(context))
            }
            ProdKind::PointerP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::TypeQualifierListOpt(p0))) => {
                        NonTerminal::Pointer(
                            grammar_c_actions::pointer_type_qualifier_list_opt(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeQualifierListOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TypeQualifierList(p0)) => {
                        NonTerminal::TypeQualifierListOpt(
                            grammar_c_actions::type_qualifier_list_opt_type_qualifier_list(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeQualifierListOptP2 => {
                NonTerminal::TypeQualifierListOpt(
                    grammar_c_actions::type_qualifier_list_opt_empty(context),
                )
            }
            ProdKind::PointerP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifierListOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::Pointer(p1)),
                    ) => {
                        NonTerminal::Pointer(
                            grammar_c_actions::pointer_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeQualifierListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::TypeQualifier(p0)) => {
                        NonTerminal::TypeQualifierList(
                            grammar_c_actions::type_qualifier_list_type_qualifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeQualifierListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::TypeQualifierList(p0)),
                        Symbol::NonTerminal(NonTerminal::TypeQualifier(p1)),
                    ) => {
                        NonTerminal::TypeQualifierList(
                            grammar_c_actions::type_qualifier_list_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Identifier(p0)) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_identifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Declarator(p0)), _) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifierListOpt(p1)),
                        Symbol::NonTerminal(NonTerminal::AssignmentExpressionOpt(p2)),
                        _,
                    ) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_c3(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AssignmentExpressionOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::AssignmentExpression(p0)) => {
                        NonTerminal::AssignmentExpressionOpt(
                            grammar_c_actions::assignment_expression_opt_assignment_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AssignmentExpressionOptP2 => {
                NonTerminal::AssignmentExpressionOpt(
                    grammar_c_actions::assignment_expression_opt_empty(context),
                )
            }
            ProdKind::DirectDeclaratorP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p0)),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifierListOpt(p1)),
                        Symbol::NonTerminal(NonTerminal::AssignmentExpression(p2)),
                        _,
                    ) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_c4(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP5 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifierList(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::AssignmentExpression(p2)),
                        _,
                    ) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_c5(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP6 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifierListOpt(p1)),
                        _,
                        _,
                    ) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_c6(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP7 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ParameterTypeList(p1)),
                        _,
                    ) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_c7(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectDeclaratorP8 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::DirectDeclarator(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::IdentifierListOpt(p1)),
                        _,
                    ) => {
                        NonTerminal::DirectDeclarator(
                            grammar_c_actions::direct_declarator_c8(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdentifierListOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::IdentifierList(p0)) => {
                        NonTerminal::IdentifierListOpt(
                            grammar_c_actions::identifier_list_opt_identifier_list(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdentifierListOptP2 => {
                NonTerminal::IdentifierListOpt(
                    grammar_c_actions::identifier_list_opt_empty(context),
                )
            }
            ProdKind::AssignmentExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::AssignmentExpression(
                            grammar_c_actions::assignment_expression_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConditionalExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p0)) => {
                        NonTerminal::ConditionalExpression(
                            grammar_c_actions::conditional_expression_arithmetic_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConditionalExpressionP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ConditionalExpression(p2)),
                    ) => {
                        NonTerminal::ConditionalExpression(
                            grammar_c_actions::conditional_expression_c2(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionLogicalOrExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_logical_or_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionLogicalAndExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_logical_and_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionBitwiseOrExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_bitwise_or_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionBitwiseExclusiveOrExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_bitwise_exclusive_or_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionBitwiseAndExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_bitwise_and_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionLogicalEqualExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_logical_equal_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionLogicalNotEqualExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_logical_not_equal_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionLessThanExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_less_than_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionLessThanOrEqualExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_less_than_or_equal_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionGreaterThanExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_greater_than_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionGreaterThanOrEqualExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_greater_than_or_equal_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionBitwiseLeftShiftExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_bitwise_left_shift_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionBitwiseRightShiftExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_bitwise_right_shift_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionAdditionExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_addition_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionSubtractionExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_subtraction_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionMultiplyExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_multiply_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionDivisionExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_division_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionModuloExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_c_actions::arithmetic_expression_modulo_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CastExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::UnaryExpression(p0)) => {
                        NonTerminal::CastExpression(
                            grammar_c_actions::cast_expression_unary_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CastExpressionP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeName(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::CastExpression(p1)),
                    ) => {
                        NonTerminal::CastExpression(
                            grammar_c_actions::cast_expression_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::PostfixExpression(p0)) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_postfix_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionPreIncrementExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::UnaryExpression(p0))) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_pre_increment_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionPreDecrementExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::UnaryExpression(p0))) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_pre_decrement_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionLogicalNotExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::CastExpression(p0))) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_logical_not_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionBitwiseNotExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::CastExpression(p0))) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_bitwise_not_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionPlusExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::CastExpression(p0))) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_plus_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionMinusExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::CastExpression(p0))) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_minus_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionDereferenceExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::CastExpression(p0))) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_dereference_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionReferenceExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::CastExpression(p0))) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_reference_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionSizeOfExpressionExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Expression(p0))) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_size_of_expression_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::UnaryExpressionSizeOfTypenameExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (_, _, Symbol::NonTerminal(NonTerminal::TypeName(p0)), _) => {
                        NonTerminal::UnaryExpression(
                            grammar_c_actions::unary_expression_size_of_typename_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PostfixExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::PrimaryExpression(p0)) => {
                        NonTerminal::PostfixExpression(
                            grammar_c_actions::postfix_expression_primary_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PostfixExpressionP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::PostfixExpression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                        _,
                    ) => {
                        NonTerminal::PostfixExpression(
                            grammar_c_actions::postfix_expression_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PostfixExpressionP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::PostfixExpression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ArgumentExpressionListOpt(p1)),
                        _,
                    ) => {
                        NonTerminal::PostfixExpression(
                            grammar_c_actions::postfix_expression_c3(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArgumentExpressionListOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ArgumentExpressionList(p0)) => {
                        NonTerminal::ArgumentExpressionListOpt(
                            grammar_c_actions::argument_expression_list_opt_argument_expression_list(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArgumentExpressionListOptP2 => {
                NonTerminal::ArgumentExpressionListOpt(
                    grammar_c_actions::argument_expression_list_opt_empty(context),
                )
            }
            ProdKind::PostfixExpressionP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::PostfixExpression(p0)),
                        _,
                        Symbol::Terminal(Terminal::Identifier(p1)),
                    ) => {
                        NonTerminal::PostfixExpression(
                            grammar_c_actions::postfix_expression_c4(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PostfixExpressionP5 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::PostfixExpression(p0)),
                        _,
                        Symbol::Terminal(Terminal::Identifier(p1)),
                    ) => {
                        NonTerminal::PostfixExpression(
                            grammar_c_actions::postfix_expression_c5(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PostfixExpressionP6 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::PostfixExpression(p0)), _) => {
                        NonTerminal::PostfixExpression(
                            grammar_c_actions::postfix_expression_postfix_expression1(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PostfixExpressionP7 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::PostfixExpression(p0)), _) => {
                        NonTerminal::PostfixExpression(
                            grammar_c_actions::postfix_expression_postfix_expression2(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PostfixExpressionP8 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeName(p0)),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::InitializerList(p1)),
                        _,
                    ) => {
                        NonTerminal::PostfixExpression(
                            grammar_c_actions::postfix_expression_c8(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PostfixExpressionP9 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 7usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeName(p0)),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::InitializerList(p1)),
                        _,
                        _,
                    ) => {
                        NonTerminal::PostfixExpression(
                            grammar_c_actions::postfix_expression_c9(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PrimaryExpressionNumber => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Num(p0)) => {
                        NonTerminal::PrimaryExpression(
                            grammar_c_actions::primary_expression_number(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PrimaryExpressionIdentifier => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Identifier(p0)) => {
                        NonTerminal::PrimaryExpression(
                            grammar_c_actions::primary_expression_identifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::PrimaryExpressionParen => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Expression(p0)), _) => {
                        NonTerminal::PrimaryExpression(
                            grammar_c_actions::primary_expression_paren(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionCommaExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                    ) => {
                        NonTerminal::Expression(
                            grammar_c_actions::expression_comma_expression(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionAssignmentExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::AssignmentExpression(p0)) => {
                        NonTerminal::Expression(
                            grammar_c_actions::expression_assignment_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ConditionalExpression(p0)) => {
                        NonTerminal::Expression(
                            grammar_c_actions::expression_conditional_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p0)) => {
                        NonTerminal::Expression(
                            grammar_c_actions::expression_arithmetic_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionP5 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::UnaryExpression(p0)) => {
                        NonTerminal::Expression(
                            grammar_c_actions::expression_unary_expression(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArgumentExpressionListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::AssignmentExpression(p0)) => {
                        NonTerminal::ArgumentExpressionList(
                            grammar_c_actions::argument_expression_list_assignment_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArgumentExpressionListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ArgumentExpressionList(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::AssignmentExpression(p1)),
                    ) => {
                        NonTerminal::ArgumentExpressionList(
                            grammar_c_actions::argument_expression_list_c2(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypeNameP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::SpecifierQualifierList(p0)),
                        Symbol::NonTerminal(NonTerminal::AbstractDeclaratorOpt(p1)),
                    ) => {
                        NonTerminal::TypeName(
                            grammar_c_actions::type_name_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AbstractDeclaratorOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::AbstractDeclarator(p0)) => {
                        NonTerminal::AbstractDeclaratorOpt(
                            grammar_c_actions::abstract_declarator_opt_abstract_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AbstractDeclaratorOptP2 => {
                NonTerminal::AbstractDeclaratorOpt(
                    grammar_c_actions::abstract_declarator_opt_empty(context),
                )
            }
            ProdKind::AbstractDeclaratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Pointer(p0)) => {
                        NonTerminal::AbstractDeclarator(
                            grammar_c_actions::abstract_declarator_pointer(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AbstractDeclaratorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::PointerOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::DirectAbstractDeclarator(p1)),
                    ) => {
                        NonTerminal::AbstractDeclarator(
                            grammar_c_actions::abstract_declarator_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::AbstractDeclarator(p0)), _) => {
                        NonTerminal::DirectAbstractDeclarator(
                            grammar_c_actions::direct_abstract_declarator_abstract_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(
                            NonTerminal::DirectAbstractDeclaratorOpt(p0),
                        ),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifierListOpt(p1)),
                        Symbol::NonTerminal(NonTerminal::AssignmentExpressionOpt(p2)),
                        _,
                    ) => {
                        NonTerminal::DirectAbstractDeclarator(
                            grammar_c_actions::direct_abstract_declarator_c2(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::DirectAbstractDeclarator(p0)) => {
                        NonTerminal::DirectAbstractDeclaratorOpt(
                            grammar_c_actions::direct_abstract_declarator_opt_direct_abstract_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorOptP2 => {
                NonTerminal::DirectAbstractDeclaratorOpt(
                    grammar_c_actions::direct_abstract_declarator_opt_empty(context),
                )
            }
            ProdKind::DirectAbstractDeclaratorP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(
                            NonTerminal::DirectAbstractDeclaratorOpt(p0),
                        ),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifierListOpt(p1)),
                        Symbol::NonTerminal(NonTerminal::AssignmentExpression(p2)),
                        _,
                    ) => {
                        NonTerminal::DirectAbstractDeclarator(
                            grammar_c_actions::direct_abstract_declarator_c3(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(
                            NonTerminal::DirectAbstractDeclaratorOpt(p0),
                        ),
                        _,
                        Symbol::NonTerminal(NonTerminal::TypeQualifierList(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::AssignmentExpression(p2)),
                        _,
                    ) => {
                        NonTerminal::DirectAbstractDeclarator(
                            grammar_c_actions::direct_abstract_declarator_c4(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorP5 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(
                            NonTerminal::DirectAbstractDeclaratorOpt(p0),
                        ),
                        _,
                        _,
                        _,
                    ) => {
                        NonTerminal::DirectAbstractDeclarator(
                            grammar_c_actions::direct_abstract_declarator_direct_abstract_declarator_opt(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DirectAbstractDeclaratorP6 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(
                            NonTerminal::DirectAbstractDeclaratorOpt(p0),
                        ),
                        _,
                        Symbol::NonTerminal(NonTerminal::ParameterTypeListOpt(p1)),
                        _,
                    ) => {
                        NonTerminal::DirectAbstractDeclarator(
                            grammar_c_actions::direct_abstract_declarator_c6(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterTypeListOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ParameterTypeList(p0)) => {
                        NonTerminal::ParameterTypeListOpt(
                            grammar_c_actions::parameter_type_list_opt_parameter_type_list(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterTypeListOptP2 => {
                NonTerminal::ParameterTypeListOpt(
                    grammar_c_actions::parameter_type_list_opt_empty(context),
                )
            }
            ProdKind::ParameterTypeListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ParameterList(p0)) => {
                        NonTerminal::ParameterTypeList(
                            grammar_c_actions::parameter_type_list_parameter_list1(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterTypeListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::ParameterList(p0)), _, _) => {
                        NonTerminal::ParameterTypeList(
                            grammar_c_actions::parameter_type_list_parameter_list2(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ParameterDeclaration(p0)) => {
                        NonTerminal::ParameterList(
                            grammar_c_actions::parameter_list_parameter_declaration(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ParameterList(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ParameterDeclaration(p1)),
                    ) => {
                        NonTerminal::ParameterList(
                            grammar_c_actions::parameter_list_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterDeclarationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifiers(p0)),
                        Symbol::NonTerminal(NonTerminal::Declarator(p1)),
                    ) => {
                        NonTerminal::ParameterDeclaration(
                            grammar_c_actions::parameter_declaration_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ParameterDeclarationP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifiers(p0)),
                        Symbol::NonTerminal(NonTerminal::AbstractDeclaratorOpt(p1)),
                    ) => {
                        NonTerminal::ParameterDeclaration(
                            grammar_c_actions::parameter_declaration_c2(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitializerListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::DesignationOpt(p0)),
                        Symbol::NonTerminal(NonTerminal::Initializer(p1)),
                    ) => {
                        NonTerminal::InitializerList(
                            grammar_c_actions::initializer_list_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DesignationOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Designation(p0)) => {
                        NonTerminal::DesignationOpt(
                            grammar_c_actions::designation_opt_designation(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DesignationOptP2 => {
                NonTerminal::DesignationOpt(
                    grammar_c_actions::designation_opt_empty(context),
                )
            }
            ProdKind::InitializerListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::InitializerList(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::DesignationOpt(p1)),
                        Symbol::NonTerminal(NonTerminal::Initializer(p2)),
                    ) => {
                        NonTerminal::InitializerList(
                            grammar_c_actions::initializer_list_c2(&*context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DesignationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::DesignatorList(p0)), _) => {
                        NonTerminal::Designation(
                            grammar_c_actions::designation_designator_list(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DesignatorListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Designator(p0)) => {
                        NonTerminal::DesignatorList(
                            grammar_c_actions::designator_list_designator(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DesignatorListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::DesignatorList(p0)),
                        Symbol::NonTerminal(NonTerminal::Designator(p1)),
                    ) => {
                        NonTerminal::DesignatorList(
                            grammar_c_actions::designator_list_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DesignatorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::ConstantExpression(p0)), _) => {
                        NonTerminal::Designator(
                            grammar_c_actions::designator_constant_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DesignatorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::Terminal(Terminal::Identifier(p0))) => {
                        NonTerminal::Designator(
                            grammar_c_actions::designator_identifier(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConstantExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ConditionalExpression(p0)) => {
                        NonTerminal::ConstantExpression(
                            grammar_c_actions::constant_expression_conditional_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitializerP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::AssignmentExpression(p0)) => {
                        NonTerminal::Initializer(
                            grammar_c_actions::initializer_assignment_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitializerP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::InitializerList(p0)),
                        Symbol::NonTerminal(NonTerminal::CommaOpt(p1)),
                        _,
                    ) => {
                        NonTerminal::Initializer(
                            grammar_c_actions::initializer_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CommaOptP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::CommaOpt(grammar_c_actions::comma_opt_comma(context))
            }
            ProdKind::CommaOptP2 => {
                NonTerminal::CommaOpt(grammar_c_actions::comma_opt_empty(context))
            }
            ProdKind::IdentifierListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Identifier(p0)) => {
                        NonTerminal::IdentifierList(
                            grammar_c_actions::identifier_list_identifier(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IdentifierListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::IdentifierList(p0)),
                        _,
                        Symbol::Terminal(Terminal::Identifier(p1)),
                    ) => {
                        NonTerminal::IdentifierList(
                            grammar_c_actions::identifier_list_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumSpecifierP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::IdentifierOpt(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::EnumeratorList(p1)),
                        Symbol::NonTerminal(NonTerminal::CommaOpt(p2)),
                        _,
                    ) => {
                        NonTerminal::EnumSpecifier(
                            grammar_c_actions::enum_specifier_c1(&*context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumSpecifierP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::Terminal(Terminal::Identifier(p0))) => {
                        NonTerminal::EnumSpecifier(
                            grammar_c_actions::enum_specifier_identifier(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumeratorListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Enumerator(p0)) => {
                        NonTerminal::EnumeratorList(
                            grammar_c_actions::enumerator_list_enumerator(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumeratorListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::EnumeratorList(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Enumerator(p1)),
                    ) => {
                        NonTerminal::EnumeratorList(
                            grammar_c_actions::enumerator_list_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumeratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::EnumerationConstant(p0)) => {
                        NonTerminal::Enumerator(
                            grammar_c_actions::enumerator_enumeration_constant(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumeratorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::EnumerationConstant(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ConstantExpression(p1)),
                    ) => {
                        NonTerminal::Enumerator(
                            grammar_c_actions::enumerator_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::EnumerationConstantP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Identifier(p0)) => {
                        NonTerminal::EnumerationConstant(
                            grammar_c_actions::enumeration_constant_identifier(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TypedefNameP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Identifier(p0)) => {
                        NonTerminal::TypedefName(
                            grammar_c_actions::typedef_name_identifier(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FunctionSpecifierP1 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::FunctionSpecifier(
                    grammar_c_actions::function_specifier_inline(context),
                )
            }
            ProdKind::DeclarationListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declaration(p0)) => {
                        NonTerminal::DeclarationList(
                            grammar_c_actions::declaration_list_declaration(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::DeclarationList(p0)),
                        Symbol::NonTerminal(NonTerminal::Declaration(p1)),
                    ) => {
                        NonTerminal::DeclarationList(
                            grammar_c_actions::declaration_list_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DeclarationP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::DeclarationSpecifiers(p0)),
                        Symbol::NonTerminal(NonTerminal::InitDeclaratorListOpt(p1)),
                        _,
                    ) => {
                        NonTerminal::Declaration(
                            grammar_c_actions::declaration_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitDeclaratorListOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::InitDeclaratorList(p0)) => {
                        NonTerminal::InitDeclaratorListOpt(
                            grammar_c_actions::init_declarator_list_opt_init_declarator_list(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitDeclaratorListOptP2 => {
                NonTerminal::InitDeclaratorListOpt(
                    grammar_c_actions::init_declarator_list_opt_empty(context),
                )
            }
            ProdKind::InitDeclaratorListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::InitDeclarator(p0)) => {
                        NonTerminal::InitDeclaratorList(
                            grammar_c_actions::init_declarator_list_init_declarator(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitDeclaratorListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::InitDeclaratorList(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::InitDeclarator(p1)),
                    ) => {
                        NonTerminal::InitDeclaratorList(
                            grammar_c_actions::init_declarator_list_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitDeclaratorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declarator(p0)) => {
                        NonTerminal::InitDeclarator(
                            grammar_c_actions::init_declarator_declarator(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::InitDeclaratorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Declarator(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Initializer(p1)),
                    ) => {
                        NonTerminal::InitDeclarator(
                            grammar_c_actions::init_declarator_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::CompoundStatementP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::BlockItemListOpt(p0)), _) => {
                        NonTerminal::CompoundStatement(
                            grammar_c_actions::compound_statement_block_item_list_opt(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockItemListOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::BlockItemList(p0)) => {
                        NonTerminal::BlockItemListOpt(
                            grammar_c_actions::block_item_list_opt_block_item_list(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockItemListOptP2 => {
                NonTerminal::BlockItemListOpt(
                    grammar_c_actions::block_item_list_opt_empty(context),
                )
            }
            ProdKind::BlockItemListP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::BlockItem(p0)) => {
                        NonTerminal::BlockItemList(
                            grammar_c_actions::block_item_list_block_item(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockItemListP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::BlockItemList(p0)),
                        Symbol::NonTerminal(NonTerminal::BlockItem(p1)),
                    ) => {
                        NonTerminal::BlockItemList(
                            grammar_c_actions::block_item_list_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockItemP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Declaration(p0)) => {
                        NonTerminal::BlockItem(
                            grammar_c_actions::block_item_declaration(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BlockItemP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Statement(p0)) => {
                        NonTerminal::BlockItem(
                            grammar_c_actions::block_item_statement(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::LabeledStatement(p0)) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_labeled_statement(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::CompoundStatement(p0)) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_compound_statement(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ExpressionStatement(p0)) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_expression_statement(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::SelectionStatement(p0)) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_selection_statement(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementP5 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::IterationStatement(p0)) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_iteration_statement(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementP6 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::JumpStatement(p0)) => {
                        NonTerminal::Statement(
                            grammar_c_actions::statement_jump_statement(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabeledStatementP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::Identifier(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p1)),
                    ) => {
                        NonTerminal::LabeledStatement(
                            grammar_c_actions::labeled_statement_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabeledStatementP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::ConstantExpression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p1)),
                    ) => {
                        NonTerminal::LabeledStatement(
                            grammar_c_actions::labeled_statement_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LabeledStatementP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, _, Symbol::NonTerminal(NonTerminal::Statement(p0))) => {
                        NonTerminal::LabeledStatement(
                            grammar_c_actions::labeled_statement_statement(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionStatementP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (Symbol::NonTerminal(NonTerminal::ExpressionOpt(p0)), _) => {
                        NonTerminal::ExpressionStatement(
                            grammar_c_actions::expression_statement_expression_opt(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionOptP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Expression(p0)) => {
                        NonTerminal::ExpressionOpt(
                            grammar_c_actions::expression_opt_expression(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionOptP2 => {
                NonTerminal::ExpressionOpt(
                    grammar_c_actions::expression_opt_empty(context),
                )
            }
            ProdKind::SelectionStatementP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p1)),
                    ) => {
                        NonTerminal::SelectionStatement(
                            grammar_c_actions::selection_statement_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SelectionStatementP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 7usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p2)),
                    ) => {
                        NonTerminal::SelectionStatement(
                            grammar_c_actions::selection_statement_c2(
                                &*context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SelectionStatementP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p1)),
                    ) => {
                        NonTerminal::SelectionStatement(
                            grammar_c_actions::selection_statement_c3(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IterationStatementP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 5usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p1)),
                    ) => {
                        NonTerminal::IterationStatement(
                            grammar_c_actions::iteration_statement_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IterationStatementP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 7usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p0)),
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Expression(p1)),
                        _,
                        _,
                    ) => {
                        NonTerminal::IterationStatement(
                            grammar_c_actions::iteration_statement_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IterationStatementP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 9usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::ExpressionOpt(p0)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ExpressionOpt(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ExpressionOpt(p2)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p3)),
                    ) => {
                        NonTerminal::IterationStatement(
                            grammar_c_actions::iteration_statement_c3(
                                &*context,
                                p0,
                                p1,
                                p2,
                                p3,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IterationStatementP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 8usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        _,
                        _,
                        Symbol::NonTerminal(NonTerminal::Declaration(p0)),
                        Symbol::NonTerminal(NonTerminal::ExpressionOpt(p1)),
                        _,
                        Symbol::NonTerminal(NonTerminal::ExpressionOpt(p2)),
                        _,
                        Symbol::NonTerminal(NonTerminal::Statement(p3)),
                    ) => {
                        NonTerminal::IterationStatement(
                            grammar_c_actions::iteration_statement_c4(
                                &*context,
                                p0,
                                p1,
                                p2,
                                p3,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::JumpStatementP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::Terminal(Terminal::Identifier(p0)), _) => {
                        NonTerminal::JumpStatement(
                            grammar_c_actions::jump_statement_identifier(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::JumpStatementP2 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                NonTerminal::JumpStatement(grammar_c_actions::jump_statement_c2(context))
            }
            ProdKind::JumpStatementP3 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                NonTerminal::JumpStatement(grammar_c_actions::jump_statement_c3(context))
            }
            ProdKind::JumpStatementP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::ExpressionOpt(p0)), _) => {
                        NonTerminal::JumpStatement(
                            grammar_c_actions::jump_statement_expression_opt(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
